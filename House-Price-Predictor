{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":9340753,"sourceType":"datasetVersion","datasetId":5660749}],"dockerImageVersionId":30762,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":5,"nbformat":4,"cells":[{"cell_type":"code","source":"import numpy as np\nimport sklearn\nimport pandas as pd\n\n# Load the train and test datasets\ntrain_df = pd.read_csv('/kaggle/input/datatask1/train.csv')\ntest_df = pd.read_csv('/kaggle/input/datatask1/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:52.089226Z","iopub.execute_input":"2024-09-15T15:19:52.089534Z","iopub.status.idle":"2024-09-15T15:19:53.772135Z","shell.execute_reply.started":"2024-09-15T15:19:52.089476Z","shell.execute_reply":"2024-09-15T15:19:53.771235Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"# Display basic information about the datasets to understand their structure\ntrain_df_info = train_df.info()\ntest_df_info = test_df.info()","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-09-15T15:19:53.773607Z","iopub.execute_input":"2024-09-15T15:19:53.774054Z","iopub.status.idle":"2024-09-15T15:19:53.831541Z","shell.execute_reply.started":"2024-09-15T15:19:53.774001Z","shell.execute_reply":"2024-09-15T15:19:53.830494Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 81 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1460 non-null   int64  \n 1   MSSubClass     1460 non-null   int64  \n 2   MSZoning       1460 non-null   object \n 3   LotFrontage    1201 non-null   float64\n 4   LotArea        1460 non-null   int64  \n 5   Street         1460 non-null   object \n 6   Alley          91 non-null     object \n 7   LotShape       1460 non-null   object \n 8   LandContour    1460 non-null   object \n 9   Utilities      1460 non-null   object \n 10  LotConfig      1460 non-null   object \n 11  LandSlope      1460 non-null   object \n 12  Neighborhood   1460 non-null   object \n 13  Condition1     1460 non-null   object \n 14  Condition2     1460 non-null   object \n 15  BldgType       1460 non-null   object \n 16  HouseStyle     1460 non-null   object \n 17  OverallQual    1460 non-null   int64  \n 18  OverallCond    1460 non-null   int64  \n 19  YearBuilt      1460 non-null   int64  \n 20  YearRemodAdd   1460 non-null   int64  \n 21  RoofStyle      1460 non-null   object \n 22  RoofMatl       1460 non-null   object \n 23  Exterior1st    1460 non-null   object \n 24  Exterior2nd    1460 non-null   object \n 25  MasVnrType     588 non-null    object \n 26  MasVnrArea     1452 non-null   float64\n 27  ExterQual      1460 non-null   object \n 28  ExterCond      1460 non-null   object \n 29  Foundation     1460 non-null   object \n 30  BsmtQual       1423 non-null   object \n 31  BsmtCond       1423 non-null   object \n 32  BsmtExposure   1422 non-null   object \n 33  BsmtFinType1   1423 non-null   object \n 34  BsmtFinSF1     1460 non-null   int64  \n 35  BsmtFinType2   1422 non-null   object \n 36  BsmtFinSF2     1460 non-null   int64  \n 37  BsmtUnfSF      1460 non-null   int64  \n 38  TotalBsmtSF    1460 non-null   int64  \n 39  Heating        1460 non-null   object \n 40  HeatingQC      1460 non-null   object \n 41  CentralAir     1460 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1460 non-null   int64  \n 44  2ndFlrSF       1460 non-null   int64  \n 45  LowQualFinSF   1460 non-null   int64  \n 46  GrLivArea      1460 non-null   int64  \n 47  BsmtFullBath   1460 non-null   int64  \n 48  BsmtHalfBath   1460 non-null   int64  \n 49  FullBath       1460 non-null   int64  \n 50  HalfBath       1460 non-null   int64  \n 51  BedroomAbvGr   1460 non-null   int64  \n 52  KitchenAbvGr   1460 non-null   int64  \n 53  KitchenQual    1460 non-null   object \n 54  TotRmsAbvGrd   1460 non-null   int64  \n 55  Functional     1460 non-null   object \n 56  Fireplaces     1460 non-null   int64  \n 57  FireplaceQu    770 non-null    object \n 58  GarageType     1379 non-null   object \n 59  GarageYrBlt    1379 non-null   float64\n 60  GarageFinish   1379 non-null   object \n 61  GarageCars     1460 non-null   int64  \n 62  GarageArea     1460 non-null   int64  \n 63  GarageQual     1379 non-null   object \n 64  GarageCond     1379 non-null   object \n 65  PavedDrive     1460 non-null   object \n 66  WoodDeckSF     1460 non-null   int64  \n 67  OpenPorchSF    1460 non-null   int64  \n 68  EnclosedPorch  1460 non-null   int64  \n 69  3SsnPorch      1460 non-null   int64  \n 70  ScreenPorch    1460 non-null   int64  \n 71  PoolArea       1460 non-null   int64  \n 72  PoolQC         7 non-null      object \n 73  Fence          281 non-null    object \n 74  MiscFeature    54 non-null     object \n 75  MiscVal        1460 non-null   int64  \n 76  MoSold         1460 non-null   int64  \n 77  YrSold         1460 non-null   int64  \n 78  SaleType       1460 non-null   object \n 79  SaleCondition  1460 non-null   object \n 80  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(35), object(43)\nmemory usage: 924.0+ KB\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1459 entries, 0 to 1458\nData columns (total 80 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1459 non-null   int64  \n 1   MSSubClass     1459 non-null   int64  \n 2   MSZoning       1455 non-null   object \n 3   LotFrontage    1232 non-null   float64\n 4   LotArea        1459 non-null   int64  \n 5   Street         1459 non-null   object \n 6   Alley          107 non-null    object \n 7   LotShape       1459 non-null   object \n 8   LandContour    1459 non-null   object \n 9   Utilities      1457 non-null   object \n 10  LotConfig      1459 non-null   object \n 11  LandSlope      1459 non-null   object \n 12  Neighborhood   1459 non-null   object \n 13  Condition1     1459 non-null   object \n 14  Condition2     1459 non-null   object \n 15  BldgType       1459 non-null   object \n 16  HouseStyle     1459 non-null   object \n 17  OverallQual    1459 non-null   int64  \n 18  OverallCond    1459 non-null   int64  \n 19  YearBuilt      1459 non-null   int64  \n 20  YearRemodAdd   1459 non-null   int64  \n 21  RoofStyle      1459 non-null   object \n 22  RoofMatl       1459 non-null   object \n 23  Exterior1st    1458 non-null   object \n 24  Exterior2nd    1458 non-null   object \n 25  MasVnrType     565 non-null    object \n 26  MasVnrArea     1444 non-null   float64\n 27  ExterQual      1459 non-null   object \n 28  ExterCond      1459 non-null   object \n 29  Foundation     1459 non-null   object \n 30  BsmtQual       1415 non-null   object \n 31  BsmtCond       1414 non-null   object \n 32  BsmtExposure   1415 non-null   object \n 33  BsmtFinType1   1417 non-null   object \n 34  BsmtFinSF1     1458 non-null   float64\n 35  BsmtFinType2   1417 non-null   object \n 36  BsmtFinSF2     1458 non-null   float64\n 37  BsmtUnfSF      1458 non-null   float64\n 38  TotalBsmtSF    1458 non-null   float64\n 39  Heating        1459 non-null   object \n 40  HeatingQC      1459 non-null   object \n 41  CentralAir     1459 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1459 non-null   int64  \n 44  2ndFlrSF       1459 non-null   int64  \n 45  LowQualFinSF   1459 non-null   int64  \n 46  GrLivArea      1459 non-null   int64  \n 47  BsmtFullBath   1457 non-null   float64\n 48  BsmtHalfBath   1457 non-null   float64\n 49  FullBath       1459 non-null   int64  \n 50  HalfBath       1459 non-null   int64  \n 51  BedroomAbvGr   1459 non-null   int64  \n 52  KitchenAbvGr   1459 non-null   int64  \n 53  KitchenQual    1458 non-null   object \n 54  TotRmsAbvGrd   1459 non-null   int64  \n 55  Functional     1457 non-null   object \n 56  Fireplaces     1459 non-null   int64  \n 57  FireplaceQu    729 non-null    object \n 58  GarageType     1383 non-null   object \n 59  GarageYrBlt    1381 non-null   float64\n 60  GarageFinish   1381 non-null   object \n 61  GarageCars     1458 non-null   float64\n 62  GarageArea     1458 non-null   float64\n 63  GarageQual     1381 non-null   object \n 64  GarageCond     1381 non-null   object \n 65  PavedDrive     1459 non-null   object \n 66  WoodDeckSF     1459 non-null   int64  \n 67  OpenPorchSF    1459 non-null   int64  \n 68  EnclosedPorch  1459 non-null   int64  \n 69  3SsnPorch      1459 non-null   int64  \n 70  ScreenPorch    1459 non-null   int64  \n 71  PoolArea       1459 non-null   int64  \n 72  PoolQC         3 non-null      object \n 73  Fence          290 non-null    object \n 74  MiscFeature    51 non-null     object \n 75  MiscVal        1459 non-null   int64  \n 76  MoSold         1459 non-null   int64  \n 77  YrSold         1459 non-null   int64  \n 78  SaleType       1458 non-null   object \n 79  SaleCondition  1459 non-null   object \ndtypes: float64(11), int64(26), object(43)\nmemory usage: 912.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"train_df_head = train_df.head()\ntest_df_head = test_df.head()\n\ntrain_df_head","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:53.832700Z","iopub.execute_input":"2024-09-15T15:19:53.833032Z","iopub.status.idle":"2024-09-15T15:19:53.863465Z","shell.execute_reply.started":"2024-09-15T15:19:53.832996Z","shell.execute_reply":"2024-09-15T15:19:53.862565Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n\n  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n\n  YrSold  SaleType  SaleCondition  SalePrice  \n0   2008        WD         Normal     208500  \n1   2007        WD         Normal     181500  \n2   2008        WD         Normal     223500  \n3   2006        WD        Abnorml     140000  \n4   2008        WD         Normal     250000  \n\n[5 rows x 81 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>70</td>\n      <td>RL</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 81 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:33:06.439239Z","iopub.execute_input":"2024-09-15T16:33:06.439765Z","iopub.status.idle":"2024-09-15T16:33:06.460623Z","shell.execute_reply.started":"2024-09-15T16:33:06.439726Z","shell.execute_reply":"2024-09-15T16:33:06.459686Z"},"trusted":true},"execution_count":86,"outputs":[{"execution_count":86,"output_type":"execute_result","data":{"text/plain":"     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n\n  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n\n  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n0       0      6    2010        WD         Normal  \n1   12500      6    2010        WD         Normal  \n2       0      3    2010        WD         Normal  \n3       0      6    2010        WD         Normal  \n4       0      1    2010        WD         Normal  \n\n[5 rows x 80 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1461</td>\n      <td>20</td>\n      <td>RH</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>120</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1462</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Gar2</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1463</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1464</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1465</td>\n      <td>120</td>\n      <td>RL</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>HLS</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>144</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 80 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\n\n# Check for missing values in the train dataset\nmissing_values_train = train_df.isnull().sum().sort_values(ascending=False)\n\n# Check for missing values in the test dataset\nmissing_values_test = test_df.isnull().sum().sort_values(ascending=False)\n\nmissing_values_train.head(30)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:53.866148Z","iopub.execute_input":"2024-09-15T15:19:53.866455Z","iopub.status.idle":"2024-09-15T15:19:53.887671Z","shell.execute_reply.started":"2024-09-15T15:19:53.866422Z","shell.execute_reply":"2024-09-15T15:19:53.886689Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"PoolQC          1453\nMiscFeature     1406\nAlley           1369\nFence           1179\nMasVnrType       872\nFireplaceQu      690\nLotFrontage      259\nGarageQual        81\nGarageFinish      81\nGarageYrBlt       81\nGarageType        81\nGarageCond        81\nBsmtExposure      38\nBsmtFinType2      38\nBsmtFinType1      37\nBsmtQual          37\nBsmtCond          37\nMasVnrArea         8\nElectrical         1\n1stFlrSF           0\n2ndFlrSF           0\nLowQualFinSF       0\nGrLivArea          0\nBsmtFullBath       0\nBsmtHalfBath       0\nFullBath           0\nHalfBath           0\nBedroomAbvGr       0\nKitchenAbvGr       0\nKitchenQual        0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df.LotShape.value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:53.888840Z","iopub.execute_input":"2024-09-15T15:19:53.889149Z","iopub.status.idle":"2024-09-15T15:19:53.896683Z","shell.execute_reply.started":"2024-09-15T15:19:53.889115Z","shell.execute_reply":"2024-09-15T15:19:53.895650Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"LotShape\nReg    925\nIR1    484\nIR2     41\nIR3     10\nName: count, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"train_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:53.897874Z","iopub.execute_input":"2024-09-15T15:19:53.898247Z","iopub.status.idle":"2024-09-15T15:19:53.906940Z","shell.execute_reply.started":"2024-09-15T15:19:53.898202Z","shell.execute_reply":"2024-09-15T15:19:53.906085Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(1460, 81)"},"metadata":{}}]},{"cell_type":"code","source":"for column in train_df.columns:\n    print(train_df[column].value_counts())\n    print('-'*20)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-09-15T15:19:53.908144Z","iopub.execute_input":"2024-09-15T15:19:53.908467Z","iopub.status.idle":"2024-09-15T15:19:53.988409Z","shell.execute_reply.started":"2024-09-15T15:19:53.908408Z","shell.execute_reply":"2024-09-15T15:19:53.987555Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"Id\n1460    1\n1       1\n2       1\n3       1\n4       1\n       ..\n24      1\n25      1\n26      1\n27      1\n28      1\nName: count, Length: 1460, dtype: int64\n--------------------\nMSSubClass\n20     536\n60     299\n50     144\n120     87\n30      69\n160     63\n70      60\n80      58\n90      52\n190     30\n85      20\n75      16\n45      12\n180     10\n40       4\nName: count, dtype: int64\n--------------------\nMSZoning\nRL         1151\nRM          218\nFV           65\nRH           16\nC (all)      10\nName: count, dtype: int64\n--------------------\nLotFrontage\n60.0     143\n70.0      70\n80.0      69\n50.0      57\n75.0      53\n        ... \n33.0       1\n182.0      1\n38.0       1\n137.0      1\n46.0       1\nName: count, Length: 110, dtype: int64\n--------------------\nLotArea\n7200     25\n9600     24\n6000     17\n10800    14\n8400     14\n         ..\n1953      1\n9735      1\n8212      1\n12925     1\n25339     1\nName: count, Length: 1073, dtype: int64\n--------------------\nStreet\nPave    1454\nGrvl       6\nName: count, dtype: int64\n--------------------\nAlley\nGrvl    50\nPave    41\nName: count, dtype: int64\n--------------------\nLotShape\nReg    925\nIR1    484\nIR2     41\nIR3     10\nName: count, dtype: int64\n--------------------\nLandContour\nLvl    1311\nBnk      63\nHLS      50\nLow      36\nName: count, dtype: int64\n--------------------\nUtilities\nAllPub    1459\nNoSeWa       1\nName: count, dtype: int64\n--------------------\nLotConfig\nInside     1052\nCorner      263\nCulDSac      94\nFR2          47\nFR3           4\nName: count, dtype: int64\n--------------------\nLandSlope\nGtl    1382\nMod      65\nSev      13\nName: count, dtype: int64\n--------------------\nNeighborhood\nNAmes      225\nCollgCr    150\nOldTown    113\nEdwards    100\nSomerst     86\nGilbert     79\nNridgHt     77\nSawyer      74\nNWAmes      73\nSawyerW     59\nBrkSide     58\nCrawfor     51\nMitchel     49\nNoRidge     41\nTimber      38\nIDOTRR      37\nClearCr     28\nSWISU       25\nStoneBr     25\nBlmngtn     17\nMeadowV     17\nBrDale      16\nVeenker     11\nNPkVill      9\nBlueste      2\nName: count, dtype: int64\n--------------------\nCondition1\nNorm      1260\nFeedr       81\nArtery      48\nRRAn        26\nPosN        19\nRRAe        11\nPosA         8\nRRNn         5\nRRNe         2\nName: count, dtype: int64\n--------------------\nCondition2\nNorm      1445\nFeedr        6\nArtery       2\nRRNn         2\nPosN         2\nPosA         1\nRRAn         1\nRRAe         1\nName: count, dtype: int64\n--------------------\nBldgType\n1Fam      1220\nTwnhsE     114\nDuplex      52\nTwnhs       43\n2fmCon      31\nName: count, dtype: int64\n--------------------\nHouseStyle\n1Story    726\n2Story    445\n1.5Fin    154\nSLvl       65\nSFoyer     37\n1.5Unf     14\n2.5Unf     11\n2.5Fin      8\nName: count, dtype: int64\n--------------------\nOverallQual\n5     397\n6     374\n7     319\n8     168\n4     116\n9      43\n3      20\n10     18\n2       3\n1       2\nName: count, dtype: int64\n--------------------\nOverallCond\n5    821\n6    252\n7    205\n8     72\n4     57\n3     25\n9     22\n2      5\n1      1\nName: count, dtype: int64\n--------------------\nYearBuilt\n2006    67\n2005    64\n2004    54\n2007    49\n2003    45\n        ..\n1875     1\n1913     1\n2010     1\n1893     1\n1906     1\nName: count, Length: 112, dtype: int64\n--------------------\nYearRemodAdd\n1950    178\n2006     97\n2007     76\n2005     73\n2004     62\n       ... \n2010      6\n1983      5\n1952      5\n1986      5\n1951      4\nName: count, Length: 61, dtype: int64\n--------------------\nRoofStyle\nGable      1141\nHip         286\nFlat         13\nGambrel      11\nMansard       7\nShed          2\nName: count, dtype: int64\n--------------------\nRoofMatl\nCompShg    1434\nTar&Grv      11\nWdShngl       6\nWdShake       5\nMetal         1\nMembran       1\nRoll          1\nClyTile       1\nName: count, dtype: int64\n--------------------\nExterior1st\nVinylSd    515\nHdBoard    222\nMetalSd    220\nWd Sdng    206\nPlywood    108\nCemntBd     61\nBrkFace     50\nWdShing     26\nStucco      25\nAsbShng     20\nBrkComm      2\nStone        2\nAsphShn      1\nImStucc      1\nCBlock       1\nName: count, dtype: int64\n--------------------\nExterior2nd\nVinylSd    504\nMetalSd    214\nHdBoard    207\nWd Sdng    197\nPlywood    142\nCmentBd     60\nWd Shng     38\nStucco      26\nBrkFace     25\nAsbShng     20\nImStucc     10\nBrk Cmn      7\nStone        5\nAsphShn      3\nOther        1\nCBlock       1\nName: count, dtype: int64\n--------------------\nMasVnrType\nBrkFace    445\nStone      128\nBrkCmn      15\nName: count, dtype: int64\n--------------------\nMasVnrArea\n0.0      861\n180.0      8\n108.0      8\n72.0       8\n16.0       7\n        ... \n567.0      1\n337.0      1\n51.0       1\n234.0      1\n63.0       1\nName: count, Length: 327, dtype: int64\n--------------------\nExterQual\nTA    906\nGd    488\nEx     52\nFa     14\nName: count, dtype: int64\n--------------------\nExterCond\nTA    1282\nGd     146\nFa      28\nEx       3\nPo       1\nName: count, dtype: int64\n--------------------\nFoundation\nPConc     647\nCBlock    634\nBrkTil    146\nSlab       24\nStone       6\nWood        3\nName: count, dtype: int64\n--------------------\nBsmtQual\nTA    649\nGd    618\nEx    121\nFa     35\nName: count, dtype: int64\n--------------------\nBsmtCond\nTA    1311\nGd      65\nFa      45\nPo       2\nName: count, dtype: int64\n--------------------\nBsmtExposure\nNo    953\nAv    221\nGd    134\nMn    114\nName: count, dtype: int64\n--------------------\nBsmtFinType1\nUnf    430\nGLQ    418\nALQ    220\nBLQ    148\nRec    133\nLwQ     74\nName: count, dtype: int64\n--------------------\nBsmtFinSF1\n0      467\n24      12\n16       9\n20       5\n936      5\n      ... \n774      1\n35       1\n984      1\n668      1\n459      1\nName: count, Length: 637, dtype: int64\n--------------------\nBsmtFinType2\nUnf    1256\nRec      54\nLwQ      46\nBLQ      33\nALQ      19\nGLQ      14\nName: count, dtype: int64\n--------------------\nBsmtFinSF2\n0       1293\n180        5\n374        3\n290        2\n469        2\n        ... \n1120       1\n165        1\n532        1\n495        1\n531        1\nName: count, Length: 144, dtype: int64\n--------------------\nBsmtUnfSF\n0       118\n728       9\n384       8\n572       7\n600       7\n       ... \n204       1\n1566      1\n207       1\n649       1\n1228      1\nName: count, Length: 780, dtype: int64\n--------------------\nTotalBsmtSF\n0       37\n864     35\n672     17\n912     15\n1040    14\n        ..\n1902     1\n1274     1\n1393     1\n1622     1\n1352     1\nName: count, Length: 721, dtype: int64\n--------------------\nHeating\nGasA     1428\nGasW       18\nGrav        7\nWall        4\nOthW        2\nFloor       1\nName: count, dtype: int64\n--------------------\nHeatingQC\nEx    741\nTA    428\nGd    241\nFa     49\nPo      1\nName: count, dtype: int64\n--------------------\nCentralAir\nY    1365\nN      95\nName: count, dtype: int64\n--------------------\nElectrical\nSBrkr    1334\nFuseA      94\nFuseF      27\nFuseP       3\nMix         1\nName: count, dtype: int64\n--------------------\n1stFlrSF\n864     25\n1040    16\n912     14\n848     12\n894     12\n        ..\n1150     1\n1752     1\n736      1\n794      1\n1297     1\nName: count, Length: 753, dtype: int64\n--------------------\n2ndFlrSF\n0      829\n728     10\n504      9\n672      8\n546      8\n      ... \n870      1\n694      1\n854      1\n768      1\n208      1\nName: count, Length: 417, dtype: int64\n--------------------\nLowQualFinSF\n0      1434\n80        3\n360       2\n513       1\n528       1\n572       1\n144       1\n234       1\n392       1\n371       1\n420       1\n390       1\n473       1\n156       1\n515       1\n53        1\n232       1\n481       1\n120       1\n514       1\n397       1\n479       1\n205       1\n384       1\nName: count, dtype: int64\n--------------------\nGrLivArea\n864     22\n1040    14\n894     11\n848     10\n1456    10\n        ..\n774      1\n2792     1\n1334     1\n693      1\n1861     1\nName: count, Length: 861, dtype: int64\n--------------------\nBsmtFullBath\n0    856\n1    588\n2     15\n3      1\nName: count, dtype: int64\n--------------------\nBsmtHalfBath\n0    1378\n1      80\n2       2\nName: count, dtype: int64\n--------------------\nFullBath\n2    768\n1    650\n3     33\n0      9\nName: count, dtype: int64\n--------------------\nHalfBath\n0    913\n1    535\n2     12\nName: count, dtype: int64\n--------------------\nBedroomAbvGr\n3    804\n2    358\n4    213\n1     50\n5     21\n6      7\n0      6\n8      1\nName: count, dtype: int64\n--------------------\nKitchenAbvGr\n1    1392\n2      65\n3       2\n0       1\nName: count, dtype: int64\n--------------------\nKitchenQual\nTA    735\nGd    586\nEx    100\nFa     39\nName: count, dtype: int64\n--------------------\nTotRmsAbvGrd\n6     402\n7     329\n5     275\n8     187\n4      97\n9      75\n10     47\n11     18\n3      17\n12     11\n2       1\n14      1\nName: count, dtype: int64\n--------------------\nFunctional\nTyp     1360\nMin2      34\nMin1      31\nMod       15\nMaj1      14\nMaj2       5\nSev        1\nName: count, dtype: int64\n--------------------\nFireplaces\n0    690\n1    650\n2    115\n3      5\nName: count, dtype: int64\n--------------------\nFireplaceQu\nGd    380\nTA    313\nFa     33\nEx     24\nPo     20\nName: count, dtype: int64\n--------------------\nGarageType\nAttchd     870\nDetchd     387\nBuiltIn     88\nBasment     19\nCarPort      9\n2Types       6\nName: count, dtype: int64\n--------------------\nGarageYrBlt\n2005.0    65\n2006.0    59\n2004.0    53\n2003.0    50\n2007.0    49\n          ..\n1906.0     1\n1908.0     1\n1927.0     1\n1900.0     1\n1933.0     1\nName: count, Length: 97, dtype: int64\n--------------------\nGarageFinish\nUnf    605\nRFn    422\nFin    352\nName: count, dtype: int64\n--------------------\nGarageCars\n2    824\n1    369\n3    181\n0     81\n4      5\nName: count, dtype: int64\n--------------------\nGarageArea\n0      81\n440    49\n576    47\n240    38\n484    34\n       ..\n358     1\n186     1\n693     1\n813     1\n995     1\nName: count, Length: 441, dtype: int64\n--------------------\nGarageQual\nTA    1311\nFa      48\nGd      14\nEx       3\nPo       3\nName: count, dtype: int64\n--------------------\nGarageCond\nTA    1326\nFa      35\nGd       9\nPo       7\nEx       2\nName: count, dtype: int64\n--------------------\nPavedDrive\nY    1340\nN      90\nP      30\nName: count, dtype: int64\n--------------------\nWoodDeckSF\n0      761\n192     38\n100     36\n144     33\n120     31\n      ... \n162      1\n229      1\n439      1\n379      1\n84       1\nName: count, Length: 274, dtype: int64\n--------------------\nOpenPorchSF\n0      656\n36      29\n48      22\n20      21\n40      19\n      ... \n214      1\n195      1\n175      1\n10       1\n523      1\nName: count, Length: 202, dtype: int64\n--------------------\nEnclosedPorch\n0      1252\n112      15\n96        6\n120       5\n144       5\n       ... \n291       1\n248       1\n105       1\n169       1\n189       1\nName: count, Length: 120, dtype: int64\n--------------------\n3SsnPorch\n0      1436\n168       3\n180       2\n144       2\n216       2\n130       1\n320       1\n407       1\n508       1\n238       1\n245       1\n140       1\n196       1\n182       1\n162       1\n23        1\n96        1\n153       1\n290       1\n304       1\nName: count, dtype: int64\n--------------------\nScreenPorch\n0      1344\n192       6\n120       5\n224       5\n189       4\n       ... \n155       1\n220       1\n119       1\n40        1\n410       1\nName: count, Length: 76, dtype: int64\n--------------------\nPoolArea\n0      1453\n512       1\n648       1\n576       1\n555       1\n480       1\n519       1\n738       1\nName: count, dtype: int64\n--------------------\nPoolQC\nGd    3\nEx    2\nFa    2\nName: count, dtype: int64\n--------------------\nFence\nMnPrv    157\nGdPrv     59\nGdWo      54\nMnWw      11\nName: count, dtype: int64\n--------------------\nMiscFeature\nShed    49\nGar2     2\nOthr     2\nTenC     1\nName: count, dtype: int64\n--------------------\nMiscVal\n0        1408\n400        11\n500         8\n700         5\n450         4\n600         4\n2000        4\n1200        2\n480         2\n350         1\n15500       1\n800         1\n3500        1\n1300        1\n54          1\n620         1\n560         1\n1400        1\n8300        1\n1150        1\n2500        1\nName: count, dtype: int64\n--------------------\nMoSold\n6     253\n7     234\n5     204\n4     141\n8     122\n3     106\n10     89\n11     79\n9      63\n12     59\n1      58\n2      52\nName: count, dtype: int64\n--------------------\nYrSold\n2009    338\n2007    329\n2006    314\n2008    304\n2010    175\nName: count, dtype: int64\n--------------------\nSaleType\nWD       1267\nNew       122\nCOD        43\nConLD       9\nConLI       5\nConLw       5\nCWD         4\nOth         3\nCon         2\nName: count, dtype: int64\n--------------------\nSaleCondition\nNormal     1198\nPartial     125\nAbnorml     101\nFamily       20\nAlloca       12\nAdjLand       4\nName: count, dtype: int64\n--------------------\nSalePrice\n140000    20\n135000    17\n145000    14\n155000    14\n110000    13\n          ..\n410000     1\n156932     1\n144152     1\n216000     1\n274300     1\nName: count, Length: 663, dtype: int64\n--------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:53.989682Z","iopub.execute_input":"2024-09-15T15:19:53.990057Z","iopub.status.idle":"2024-09-15T15:19:54.516951Z","shell.execute_reply.started":"2024-09-15T15:19:53.990015Z","shell.execute_reply":"2024-09-15T15:19:54.515957Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"code","source":"sns.boxplot(x=train_df['LotArea'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:54.518364Z","iopub.execute_input":"2024-09-15T15:19:54.519388Z","iopub.status.idle":"2024-09-15T15:19:54.683400Z","shell.execute_reply.started":"2024-09-15T15:19:54.519340Z","shell.execute_reply":"2024-09-15T15:19:54.681781Z"},"trusted":true},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"sns.boxplot(x=train_df['LotFrontage'])\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:54.685309Z","iopub.execute_input":"2024-09-15T15:19:54.686013Z","iopub.status.idle":"2024-09-15T15:19:54.887053Z","shell.execute_reply.started":"2024-09-15T15:19:54.685952Z","shell.execute_reply":"2024-09-15T15:19:54.886028Z"},"trusted":true},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"train_df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:54.888603Z","iopub.execute_input":"2024-09-15T15:19:54.889028Z","iopub.status.idle":"2024-09-15T15:19:54.985052Z","shell.execute_reply.started":"2024-09-15T15:19:54.888977Z","shell.execute_reply":"2024-09-15T15:19:54.984054Z"},"trusted":true},"execution_count":11,"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\ncount  1460.000000  1460.000000  1201.000000    1460.000000  1460.000000   \nmean    730.500000    56.897260    70.049958   10516.828082     6.099315   \nstd     421.610009    42.300571    24.284752    9981.264932     1.382997   \nmin       1.000000    20.000000    21.000000    1300.000000     1.000000   \n25%     365.750000    20.000000    59.000000    7553.500000     5.000000   \n50%     730.500000    50.000000    69.000000    9478.500000     6.000000   \n75%    1095.250000    70.000000    80.000000   11601.500000     7.000000   \nmax    1460.000000   190.000000   313.000000  215245.000000    10.000000   \n\n       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  ...  \\\ncount  1460.000000  1460.000000   1460.000000  1452.000000  1460.000000  ...   \nmean      5.575342  1971.267808   1984.865753   103.685262   443.639726  ...   \nstd       1.112799    30.202904     20.645407   181.066207   456.098091  ...   \nmin       1.000000  1872.000000   1950.000000     0.000000     0.000000  ...   \n25%       5.000000  1954.000000   1967.000000     0.000000     0.000000  ...   \n50%       5.000000  1973.000000   1994.000000     0.000000   383.500000  ...   \n75%       6.000000  2000.000000   2004.000000   166.000000   712.250000  ...   \nmax       9.000000  2010.000000   2010.000000  1600.000000  5644.000000  ...   \n\n        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\ncount  1460.000000  1460.000000    1460.000000  1460.000000  1460.000000   \nmean     94.244521    46.660274      21.954110     3.409589    15.060959   \nstd     125.338794    66.256028      61.119149    29.317331    55.757415   \nmin       0.000000     0.000000       0.000000     0.000000     0.000000   \n25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n50%       0.000000    25.000000       0.000000     0.000000     0.000000   \n75%     168.000000    68.000000       0.000000     0.000000     0.000000   \nmax     857.000000   547.000000     552.000000   508.000000   480.000000   \n\n          PoolArea       MiscVal       MoSold       YrSold      SalePrice  \ncount  1460.000000   1460.000000  1460.000000  1460.000000    1460.000000  \nmean      2.758904     43.489041     6.321918  2007.815753  180921.195890  \nstd      40.177307    496.123024     2.703626     1.328095   79442.502883  \nmin       0.000000      0.000000     1.000000  2006.000000   34900.000000  \n25%       0.000000      0.000000     5.000000  2007.000000  129975.000000  \n50%       0.000000      0.000000     6.000000  2008.000000  163000.000000  \n75%       0.000000      0.000000     8.000000  2009.000000  214000.000000  \nmax     738.000000  15500.000000    12.000000  2010.000000  755000.000000  \n\n[8 rows x 38 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>OverallQual</th>\n      <th>OverallCond</th>\n      <th>YearBuilt</th>\n      <th>YearRemodAdd</th>\n      <th>MasVnrArea</th>\n      <th>BsmtFinSF1</th>\n      <th>...</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>EnclosedPorch</th>\n      <th>3SsnPorch</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1201.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1452.000000</td>\n      <td>1460.000000</td>\n      <td>...</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>730.500000</td>\n      <td>56.897260</td>\n      <td>70.049958</td>\n      <td>10516.828082</td>\n      <td>6.099315</td>\n      <td>5.575342</td>\n      <td>1971.267808</td>\n      <td>1984.865753</td>\n      <td>103.685262</td>\n      <td>443.639726</td>\n      <td>...</td>\n      <td>94.244521</td>\n      <td>46.660274</td>\n      <td>21.954110</td>\n      <td>3.409589</td>\n      <td>15.060959</td>\n      <td>2.758904</td>\n      <td>43.489041</td>\n      <td>6.321918</td>\n      <td>2007.815753</td>\n      <td>180921.195890</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>421.610009</td>\n      <td>42.300571</td>\n      <td>24.284752</td>\n      <td>9981.264932</td>\n      <td>1.382997</td>\n      <td>1.112799</td>\n      <td>30.202904</td>\n      <td>20.645407</td>\n      <td>181.066207</td>\n      <td>456.098091</td>\n      <td>...</td>\n      <td>125.338794</td>\n      <td>66.256028</td>\n      <td>61.119149</td>\n      <td>29.317331</td>\n      <td>55.757415</td>\n      <td>40.177307</td>\n      <td>496.123024</td>\n      <td>2.703626</td>\n      <td>1.328095</td>\n      <td>79442.502883</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>20.000000</td>\n      <td>21.000000</td>\n      <td>1300.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1872.000000</td>\n      <td>1950.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>2006.000000</td>\n      <td>34900.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>365.750000</td>\n      <td>20.000000</td>\n      <td>59.000000</td>\n      <td>7553.500000</td>\n      <td>5.000000</td>\n      <td>5.000000</td>\n      <td>1954.000000</td>\n      <td>1967.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>5.000000</td>\n      <td>2007.000000</td>\n      <td>129975.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>730.500000</td>\n      <td>50.000000</td>\n      <td>69.000000</td>\n      <td>9478.500000</td>\n      <td>6.000000</td>\n      <td>5.000000</td>\n      <td>1973.000000</td>\n      <td>1994.000000</td>\n      <td>0.000000</td>\n      <td>383.500000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>25.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>6.000000</td>\n      <td>2008.000000</td>\n      <td>163000.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1095.250000</td>\n      <td>70.000000</td>\n      <td>80.000000</td>\n      <td>11601.500000</td>\n      <td>7.000000</td>\n      <td>6.000000</td>\n      <td>2000.000000</td>\n      <td>2004.000000</td>\n      <td>166.000000</td>\n      <td>712.250000</td>\n      <td>...</td>\n      <td>168.000000</td>\n      <td>68.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>8.000000</td>\n      <td>2009.000000</td>\n      <td>214000.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1460.000000</td>\n      <td>190.000000</td>\n      <td>313.000000</td>\n      <td>215245.000000</td>\n      <td>10.000000</td>\n      <td>9.000000</td>\n      <td>2010.000000</td>\n      <td>2010.000000</td>\n      <td>1600.000000</td>\n      <td>5644.000000</td>\n      <td>...</td>\n      <td>857.000000</td>\n      <td>547.000000</td>\n      <td>552.000000</td>\n      <td>508.000000</td>\n      <td>480.000000</td>\n      <td>738.000000</td>\n      <td>15500.000000</td>\n      <td>12.000000</td>\n      <td>2010.000000</td>\n      <td>755000.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 38 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Outliers removal ","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\n# Load the dataset (ensure you provide the correct path)\ndf = pd.read_csv('/kaggle/input/datatask1/train.csv')  # Update with your dataset path\n\n# Step 1: Remove Outliers using IQR method\ndef remove_outliers(df):\n    for column in df.select_dtypes(include=[np.number]).columns:\n        Q1 = df[column].quantile(0.25)\n        Q3 = df[column].quantile(0.75)\n        IQR = Q3 - Q1\n        lower_bound = Q1 - 1.5 * IQR\n        upper_bound = Q3 + 1.5 * IQR\n        # Filter the dataframe by removing outliers\n        df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]\n    return df\n\ndf_cleaned = remove_outliers(df)\n\n# Step 2: Handle Missing Values\n\n# Fill missing values in 'LotFrontage' with the median of the column\ndf_cleaned['LotFrontage'] = df_cleaned['LotFrontage'].fillna(df_cleaned['LotFrontage'].median())\n\n# For numerical features - fill missing values with the median of each column\nfor column in df_cleaned.select_dtypes(include=[np.number]).columns:\n    df_cleaned[column] = df_cleaned[column].fillna(df_cleaned[column].median())\n\n# For categorical features - handle missing values\nfor column in df_cleaned.select_dtypes(include=[object]).columns:\n    if df_cleaned[column].isnull().sum() > 0:\n        if column == \"PoolQC\":\n            # Remove the column if it has too many missing values\n            df_cleaned = df_cleaned.drop(columns=[column])\n        else:\n            # Fill missing categorical values with the mode (most frequent value)\n            df_cleaned[column] = df_cleaned[column].fillna(df_cleaned[column].mode()[0])\n\n# Step 3: Optionally, drop columns with too many missing values\n# Drop columns where more than 50% of the values are missing\nmissing_value_threshold = 0.5\ndf_cleaned = df_cleaned.loc[:, df_cleaned.isnull().mean() < missing_value_threshold]\n\n# Check if the dataset still has missing values after cleaning\nmissing_values = df_cleaned.isnull().sum()\nprint(\"Missing values after cleaning:\")\nprint(missing_values[missing_values > 0])  # Print columns with remaining missing values, if any\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:54.986177Z","iopub.execute_input":"2024-09-15T15:19:54.986492Z","iopub.status.idle":"2024-09-15T15:19:55.155072Z","shell.execute_reply.started":"2024-09-15T15:19:54.986451Z","shell.execute_reply":"2024-09-15T15:19:55.154072Z"},"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Missing values after cleaning:\nSeries([], dtype: int64)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Save the cleaned dataset\n# Save the cleaned dataset\ndf_cleaned.to_csv('/kaggle/working/cleaned_dataset.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.160766Z","iopub.execute_input":"2024-09-15T15:19:55.161175Z","iopub.status.idle":"2024-09-15T15:19:55.185606Z","shell.execute_reply.started":"2024-09-15T15:19:55.161135Z","shell.execute_reply":"2024-09-15T15:19:55.184829Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"df_cleaned.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.186819Z","iopub.execute_input":"2024-09-15T15:19:55.187466Z","iopub.status.idle":"2024-09-15T15:19:55.193700Z","shell.execute_reply.started":"2024-09-15T15:19:55.187422Z","shell.execute_reply":"2024-09-15T15:19:55.192759Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"(423, 80)"},"metadata":{}}]},{"cell_type":"code","source":"\n# Check for missing values in the train dataset\nmissing_values_train = df_cleaned.isnull().sum().sort_values(ascending=False)\n\n# Check for missing values in the test dataset\n#missing_values_test = test_df.isnull().sum().sort_values(ascending=False)\n\nmissing_values_train.head(30)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.194944Z","iopub.execute_input":"2024-09-15T15:19:55.195409Z","iopub.status.idle":"2024-09-15T15:19:55.210372Z","shell.execute_reply.started":"2024-09-15T15:19:55.195364Z","shell.execute_reply":"2024-09-15T15:19:55.209496Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"GarageCond       0\nPavedDrive       0\nWoodDeckSF       0\nOpenPorchSF      0\nEnclosedPorch    0\n3SsnPorch        0\nScreenPorch      0\nPoolArea         0\nLandContour      0\nUtilities        0\nLotConfig        0\nLandSlope        0\nNeighborhood     0\nCondition1       0\nCondition2       0\nBldgType         0\nHouseStyle       0\nOverallQual      0\nOverallCond      0\nYearBuilt        0\nYearRemodAdd     0\nRoofStyle        0\nRoofMatl         0\nExterior1st      0\nExterior2nd      0\nMasVnrType       0\nMasVnrArea       0\nExterQual        0\nExterCond        0\nFoundation       0\ndtype: int64"},"metadata":{}}]},{"cell_type":"markdown","source":"# Cleaned data","metadata":{}},{"cell_type":"code","source":"# Drop irrelevant columns\nirrelevant_columns = [\n    'Id',  # If there's an ID column\n    'Alley',  # If not useful for the model\n    'PoolQC',  # Pool quality might not be useful\n    'Fence',  # Fence quality might not be predictive\n    'MiscFeature',  # Miscellaneous features often have little predictive power\n    'FireplaceQu',  # If `Fireplaces` is sufficient\n    'GarageYrBlt',  # If garage features are sufficient\n    '3SsnPorch',  # If not useful\n    'ScreenPorch',  # If not useful\n    'LowQualFinSF',  # If not useful\n    'EnclosedPorch'  # If not useful\n]\n\ndf_cleaned = df.drop(columns=irrelevant_columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.211584Z","iopub.execute_input":"2024-09-15T15:19:55.212392Z","iopub.status.idle":"2024-09-15T15:19:55.219485Z","shell.execute_reply.started":"2024-09-15T15:19:55.212356Z","shell.execute_reply":"2024-09-15T15:19:55.218554Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\n# Updated list of categorical columns\ncategorical_columns = [\n    'MSSubClass', 'MSZoning', 'Street', 'LotShape', 'LandContour',\n    'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1',\n    'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n    'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'Heating',\n    'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional',\n    'Fireplaces', 'GarageType', 'GarageFinish', 'PavedDrive', \n     'SaleType', 'SaleCondition'\n]\n\n# Ensure all categorical columns are in the DataFrame\npresent_columns = [col for col in categorical_columns if col in df_cleaned.columns]\nmissing_columns = [col for col in categorical_columns if col not in df_cleaned.columns]\n\nif missing_columns:\n    print(f\"Missing columns: {missing_columns}\")\n\n# Convert YrSold to datetime\ndf_cleaned['YrSold'] = pd.to_datetime(df_cleaned['YrSold'], format='%Y').dt.year\n\n# Optional: Extract month and year if needed for other date columns\ndf_cleaned['MoSold'] = df_cleaned['MoSold'].astype(int)  # Convert MoSold to integer\n\n# Define the preprocessor with imputation for missing values and scaling for numerical features\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', OneHotEncoder(handle_unknown='ignore', drop='first'), present_columns)\n    ],\n    remainder='passthrough'  # Keep other columns unchanged\n)\n\n# Display the first few rows of the updated DataFrame\ndf_cleaned.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.220944Z","iopub.execute_input":"2024-09-15T15:19:55.221332Z","iopub.status.idle":"2024-09-15T15:19:55.559879Z","shell.execute_reply.started":"2024-09-15T15:19:55.221287Z","shell.execute_reply":"2024-09-15T15:19:55.558803Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"   MSSubClass MSZoning  LotFrontage  LotArea Street LotShape LandContour  \\\n0          60       RL         65.0     8450   Pave      Reg         Lvl   \n1          20       RL         80.0     9600   Pave      Reg         Lvl   \n2          60       RL         68.0    11250   Pave      IR1         Lvl   \n3          70       RL         60.0     9550   Pave      IR1         Lvl   \n4          60       RL         84.0    14260   Pave      IR1         Lvl   \n\n  Utilities LotConfig LandSlope  ... PavedDrive WoodDeckSF OpenPorchSF  \\\n0    AllPub    Inside       Gtl  ...          Y          0          61   \n1    AllPub       FR2       Gtl  ...          Y        298           0   \n2    AllPub    Inside       Gtl  ...          Y          0          42   \n3    AllPub    Corner       Gtl  ...          Y          0          35   \n4    AllPub       FR2       Gtl  ...          Y        192          84   \n\n  PoolArea MiscVal  MoSold  YrSold  SaleType  SaleCondition SalePrice  \n0        0       0       2    2008        WD         Normal    208500  \n1        0       0       5    2007        WD         Normal    181500  \n2        0       0       9    2008        WD         Normal    223500  \n3        0       0       2    2006        WD        Abnorml    140000  \n4        0       0      12    2008        WD         Normal    250000  \n\n[5 rows x 70 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>...</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>Y</td>\n      <td>0</td>\n      <td>61</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>Y</td>\n      <td>298</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>Y</td>\n      <td>0</td>\n      <td>42</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>70</td>\n      <td>RL</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Corner</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>Y</td>\n      <td>0</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>WD</td>\n      <td>Abnorml</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>Y</td>\n      <td>192</td>\n      <td>84</td>\n      <td>0</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 70 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_cleaned.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.561129Z","iopub.execute_input":"2024-09-15T15:19:55.561467Z","iopub.status.idle":"2024-09-15T15:19:55.583249Z","shell.execute_reply.started":"2024-09-15T15:19:55.561430Z","shell.execute_reply":"2024-09-15T15:19:55.582330Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 70 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   MSSubClass     1460 non-null   int64  \n 1   MSZoning       1460 non-null   object \n 2   LotFrontage    1201 non-null   float64\n 3   LotArea        1460 non-null   int64  \n 4   Street         1460 non-null   object \n 5   LotShape       1460 non-null   object \n 6   LandContour    1460 non-null   object \n 7   Utilities      1460 non-null   object \n 8   LotConfig      1460 non-null   object \n 9   LandSlope      1460 non-null   object \n 10  Neighborhood   1460 non-null   object \n 11  Condition1     1460 non-null   object \n 12  Condition2     1460 non-null   object \n 13  BldgType       1460 non-null   object \n 14  HouseStyle     1460 non-null   object \n 15  OverallQual    1460 non-null   int64  \n 16  OverallCond    1460 non-null   int64  \n 17  YearBuilt      1460 non-null   int64  \n 18  YearRemodAdd   1460 non-null   int64  \n 19  RoofStyle      1460 non-null   object \n 20  RoofMatl       1460 non-null   object \n 21  Exterior1st    1460 non-null   object \n 22  Exterior2nd    1460 non-null   object \n 23  MasVnrType     588 non-null    object \n 24  MasVnrArea     1452 non-null   float64\n 25  ExterQual      1460 non-null   object \n 26  ExterCond      1460 non-null   object \n 27  Foundation     1460 non-null   object \n 28  BsmtQual       1423 non-null   object \n 29  BsmtCond       1423 non-null   object \n 30  BsmtExposure   1422 non-null   object \n 31  BsmtFinType1   1423 non-null   object \n 32  BsmtFinSF1     1460 non-null   int64  \n 33  BsmtFinType2   1422 non-null   object \n 34  BsmtFinSF2     1460 non-null   int64  \n 35  BsmtUnfSF      1460 non-null   int64  \n 36  TotalBsmtSF    1460 non-null   int64  \n 37  Heating        1460 non-null   object \n 38  HeatingQC      1460 non-null   object \n 39  CentralAir     1460 non-null   object \n 40  Electrical     1459 non-null   object \n 41  1stFlrSF       1460 non-null   int64  \n 42  2ndFlrSF       1460 non-null   int64  \n 43  GrLivArea      1460 non-null   int64  \n 44  BsmtFullBath   1460 non-null   int64  \n 45  BsmtHalfBath   1460 non-null   int64  \n 46  FullBath       1460 non-null   int64  \n 47  HalfBath       1460 non-null   int64  \n 48  BedroomAbvGr   1460 non-null   int64  \n 49  KitchenAbvGr   1460 non-null   int64  \n 50  KitchenQual    1460 non-null   object \n 51  TotRmsAbvGrd   1460 non-null   int64  \n 52  Functional     1460 non-null   object \n 53  Fireplaces     1460 non-null   int64  \n 54  GarageType     1379 non-null   object \n 55  GarageFinish   1379 non-null   object \n 56  GarageCars     1460 non-null   int64  \n 57  GarageArea     1460 non-null   int64  \n 58  GarageQual     1379 non-null   object \n 59  GarageCond     1379 non-null   object \n 60  PavedDrive     1460 non-null   object \n 61  WoodDeckSF     1460 non-null   int64  \n 62  OpenPorchSF    1460 non-null   int64  \n 63  PoolArea       1460 non-null   int64  \n 64  MiscVal        1460 non-null   int64  \n 65  MoSold         1460 non-null   int64  \n 66  YrSold         1460 non-null   int32  \n 67  SaleType       1460 non-null   object \n 68  SaleCondition  1460 non-null   object \n 69  SalePrice      1460 non-null   int64  \ndtypes: float64(2), int32(1), int64(29), object(38)\nmemory usage: 792.9+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"# Verify data types\ndf_cleaned.dtypes\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.584488Z","iopub.execute_input":"2024-09-15T15:19:55.584841Z","iopub.status.idle":"2024-09-15T15:19:55.592627Z","shell.execute_reply.started":"2024-09-15T15:19:55.584806Z","shell.execute_reply":"2024-09-15T15:19:55.591750Z"},"trusted":true},"execution_count":19,"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"MSSubClass         int64\nMSZoning          object\nLotFrontage      float64\nLotArea            int64\nStreet            object\n                  ...   \nMoSold             int64\nYrSold             int32\nSaleType          object\nSaleCondition     object\nSalePrice          int64\nLength: 70, dtype: object"},"metadata":{}}]},{"cell_type":"code","source":"# List all columns with dtype 'object'\nremaining_object_columns = df_cleaned.select_dtypes(include=['object']).columns\n\n# Display remaining object columns\nprint(\"Remaining object columns:\", remaining_object_columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.593735Z","iopub.execute_input":"2024-09-15T15:19:55.594015Z","iopub.status.idle":"2024-09-15T15:19:55.603789Z","shell.execute_reply.started":"2024-09-15T15:19:55.593984Z","shell.execute_reply":"2024-09-15T15:19:55.602892Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"Remaining object columns: Index(['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Initialize LabelEncoder\nlabel_encoders = {}\n\n# Apply LabelEncoder to each object column\nfor col in remaining_object_columns:\n    le = LabelEncoder()\n    df_cleaned[col] = le.fit_transform(df_cleaned[col].astype(str))\n    label_encoders[col] = le\n\ndf_cleaned.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.604844Z","iopub.execute_input":"2024-09-15T15:19:55.605118Z","iopub.status.idle":"2024-09-15T15:19:55.665724Z","shell.execute_reply.started":"2024-09-15T15:19:55.605087Z","shell.execute_reply":"2024-09-15T15:19:55.664688Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"   MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  LandContour  \\\n0          60         3         65.0     8450       1         3            3   \n1          20         3         80.0     9600       1         3            3   \n2          60         3         68.0    11250       1         0            3   \n3          70         3         60.0     9550       1         0            3   \n4          60         3         84.0    14260       1         0            3   \n\n   Utilities  LotConfig  LandSlope  ...  PavedDrive  WoodDeckSF  OpenPorchSF  \\\n0          0          4          0  ...           2           0           61   \n1          0          2          0  ...           2         298            0   \n2          0          4          0  ...           2           0           42   \n3          0          0          0  ...           2           0           35   \n4          0          2          0  ...           2         192           84   \n\n   PoolArea  MiscVal  MoSold  YrSold  SaleType  SaleCondition  SalePrice  \n0         0        0       2    2008         8              4     208500  \n1         0        0       5    2007         8              4     181500  \n2         0        0       9    2008         8              4     223500  \n3         0        0       2    2006         8              0     140000  \n4         0        0      12    2008         8              4     250000  \n\n[5 rows x 70 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>...</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>3</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>0</td>\n      <td>61</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>3</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>298</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>4</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>3</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>0</td>\n      <td>42</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>223500</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>70</td>\n      <td>3</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>0</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>8</td>\n      <td>0</td>\n      <td>140000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>3</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>...</td>\n      <td>2</td>\n      <td>192</td>\n      <td>84</td>\n      <td>0</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n      <td>250000</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 70 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_cleaned.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.666879Z","iopub.execute_input":"2024-09-15T15:19:55.667162Z","iopub.status.idle":"2024-09-15T15:19:55.685754Z","shell.execute_reply.started":"2024-09-15T15:19:55.667131Z","shell.execute_reply":"2024-09-15T15:19:55.684938Z"},"trusted":true},"execution_count":22,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 70 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   MSSubClass     1460 non-null   int64  \n 1   MSZoning       1460 non-null   int64  \n 2   LotFrontage    1201 non-null   float64\n 3   LotArea        1460 non-null   int64  \n 4   Street         1460 non-null   int64  \n 5   LotShape       1460 non-null   int64  \n 6   LandContour    1460 non-null   int64  \n 7   Utilities      1460 non-null   int64  \n 8   LotConfig      1460 non-null   int64  \n 9   LandSlope      1460 non-null   int64  \n 10  Neighborhood   1460 non-null   int64  \n 11  Condition1     1460 non-null   int64  \n 12  Condition2     1460 non-null   int64  \n 13  BldgType       1460 non-null   int64  \n 14  HouseStyle     1460 non-null   int64  \n 15  OverallQual    1460 non-null   int64  \n 16  OverallCond    1460 non-null   int64  \n 17  YearBuilt      1460 non-null   int64  \n 18  YearRemodAdd   1460 non-null   int64  \n 19  RoofStyle      1460 non-null   int64  \n 20  RoofMatl       1460 non-null   int64  \n 21  Exterior1st    1460 non-null   int64  \n 22  Exterior2nd    1460 non-null   int64  \n 23  MasVnrType     1460 non-null   int64  \n 24  MasVnrArea     1452 non-null   float64\n 25  ExterQual      1460 non-null   int64  \n 26  ExterCond      1460 non-null   int64  \n 27  Foundation     1460 non-null   int64  \n 28  BsmtQual       1460 non-null   int64  \n 29  BsmtCond       1460 non-null   int64  \n 30  BsmtExposure   1460 non-null   int64  \n 31  BsmtFinType1   1460 non-null   int64  \n 32  BsmtFinSF1     1460 non-null   int64  \n 33  BsmtFinType2   1460 non-null   int64  \n 34  BsmtFinSF2     1460 non-null   int64  \n 35  BsmtUnfSF      1460 non-null   int64  \n 36  TotalBsmtSF    1460 non-null   int64  \n 37  Heating        1460 non-null   int64  \n 38  HeatingQC      1460 non-null   int64  \n 39  CentralAir     1460 non-null   int64  \n 40  Electrical     1460 non-null   int64  \n 41  1stFlrSF       1460 non-null   int64  \n 42  2ndFlrSF       1460 non-null   int64  \n 43  GrLivArea      1460 non-null   int64  \n 44  BsmtFullBath   1460 non-null   int64  \n 45  BsmtHalfBath   1460 non-null   int64  \n 46  FullBath       1460 non-null   int64  \n 47  HalfBath       1460 non-null   int64  \n 48  BedroomAbvGr   1460 non-null   int64  \n 49  KitchenAbvGr   1460 non-null   int64  \n 50  KitchenQual    1460 non-null   int64  \n 51  TotRmsAbvGrd   1460 non-null   int64  \n 52  Functional     1460 non-null   int64  \n 53  Fireplaces     1460 non-null   int64  \n 54  GarageType     1460 non-null   int64  \n 55  GarageFinish   1460 non-null   int64  \n 56  GarageCars     1460 non-null   int64  \n 57  GarageArea     1460 non-null   int64  \n 58  GarageQual     1460 non-null   int64  \n 59  GarageCond     1460 non-null   int64  \n 60  PavedDrive     1460 non-null   int64  \n 61  WoodDeckSF     1460 non-null   int64  \n 62  OpenPorchSF    1460 non-null   int64  \n 63  PoolArea       1460 non-null   int64  \n 64  MiscVal        1460 non-null   int64  \n 65  MoSold         1460 non-null   int64  \n 66  YrSold         1460 non-null   int32  \n 67  SaleType       1460 non-null   int64  \n 68  SaleCondition  1460 non-null   int64  \n 69  SalePrice      1460 non-null   int64  \ndtypes: float64(2), int32(1), int64(67)\nmemory usage: 792.9 KB\n","output_type":"stream"}]},{"cell_type":"raw","source":"# Identify numerical columns\nnumerical_features = df_cleaned.select_dtypes(include=['int64', 'float64']).columns\n\n# Create a StandardScaler instance\nscaler = StandardScaler()\n\n# Fit and transform the numerical features\ndf_cleaned[numerical_features] = scaler.fit_transform(df_cleaned[numerical_features])\n\n# Display the transformed DataFrame with scaled numerical features\ndf_cleaned.head()","metadata":{}},{"cell_type":"code","source":"# Calculate the correlation matrix\ncorrelation_matrix = df_cleaned.corr()\n\n# Select the correlations with SalePrice\nsaleprice_corr = correlation_matrix[['SalePrice']].sort_values(by='SalePrice', ascending=False)\n\n# Plot the correlation matrix\nplt.figure(figsize=(12, 10))\nsns.heatmap(saleprice_corr, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\nplt.title('Correlation Matrix with SalePrice')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:55.686814Z","iopub.execute_input":"2024-09-15T15:19:55.687100Z","iopub.status.idle":"2024-09-15T15:19:56.498187Z","shell.execute_reply.started":"2024-09-15T15:19:55.687069Z","shell.execute_reply":"2024-09-15T15:19:56.497049Z"},"trusted":true},"execution_count":23,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1200x1000 with 2 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split, GridSearchCV\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.499699Z","iopub.execute_input":"2024-09-15T15:19:56.500097Z","iopub.status.idle":"2024-09-15T15:19:56.809687Z","shell.execute_reply.started":"2024-09-15T15:19:56.500050Z","shell.execute_reply":"2024-09-15T15:19:56.808678Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# Separate features and target variable\nX = df_cleaned.drop('SalePrice', axis=1)\ny = df_cleaned['SalePrice']\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.811280Z","iopub.execute_input":"2024-09-15T15:19:56.811708Z","iopub.status.idle":"2024-09-15T15:19:56.820737Z","shell.execute_reply.started":"2024-09-15T15:19:56.811660Z","shell.execute_reply":"2024-09-15T15:19:56.819662Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"X","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.822715Z","iopub.execute_input":"2024-09-15T15:19:56.823202Z","iopub.status.idle":"2024-09-15T15:19:56.857259Z","shell.execute_reply.started":"2024-09-15T15:19:56.823145Z","shell.execute_reply":"2024-09-15T15:19:56.856164Z"},"trusted":true},"execution_count":26,"outputs":[{"execution_count":26,"output_type":"execute_result","data":{"text/plain":"      MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  \\\n0             60         3         65.0     8450       1         3   \n1             20         3         80.0     9600       1         3   \n2             60         3         68.0    11250       1         0   \n3             70         3         60.0     9550       1         0   \n4             60         3         84.0    14260       1         0   \n...          ...       ...          ...      ...     ...       ...   \n1455          60         3         62.0     7917       1         3   \n1456          20         3         85.0    13175       1         3   \n1457          70         3         66.0     9042       1         3   \n1458          20         3         68.0     9717       1         3   \n1459          20         3         75.0     9937       1         3   \n\n      LandContour  Utilities  LotConfig  LandSlope  ...  GarageCond  \\\n0               3          0          4          0  ...           4   \n1               3          0          2          0  ...           4   \n2               3          0          4          0  ...           4   \n3               3          0          0          0  ...           4   \n4               3          0          2          0  ...           4   \n...           ...        ...        ...        ...  ...         ...   \n1455            3          0          4          0  ...           4   \n1456            3          0          4          0  ...           4   \n1457            3          0          4          0  ...           4   \n1458            3          0          4          0  ...           4   \n1459            3          0          4          0  ...           4   \n\n      PavedDrive  WoodDeckSF  OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  \\\n0              2           0           61         0        0       2    2008   \n1              2         298            0         0        0       5    2007   \n2              2           0           42         0        0       9    2008   \n3              2           0           35         0        0       2    2006   \n4              2         192           84         0        0      12    2008   \n...          ...         ...          ...       ...      ...     ...     ...   \n1455           2           0           40         0        0       8    2007   \n1456           2         349            0         0        0       2    2010   \n1457           2           0           60         0     2500       5    2010   \n1458           2         366            0         0        0       4    2010   \n1459           2         736           68         0        0       6    2008   \n\n      SaleType  SaleCondition  \n0            8              4  \n1            8              4  \n2            8              4  \n3            8              0  \n4            8              4  \n...        ...            ...  \n1455         8              4  \n1456         8              4  \n1457         8              4  \n1458         8              4  \n1459         8              4  \n\n[1460 rows x 69 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>...</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>3</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>61</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>3</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>298</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>3</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>42</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>70</td>\n      <td>3</td>\n      <td>60.0</td>\n      <td>9550</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>35</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>8</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>60</td>\n      <td>3</td>\n      <td>84.0</td>\n      <td>14260</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>192</td>\n      <td>84</td>\n      <td>0</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1455</th>\n      <td>60</td>\n      <td>3</td>\n      <td>62.0</td>\n      <td>7917</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>40</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1456</th>\n      <td>20</td>\n      <td>3</td>\n      <td>85.0</td>\n      <td>13175</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>349</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1457</th>\n      <td>70</td>\n      <td>3</td>\n      <td>66.0</td>\n      <td>9042</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>60</td>\n      <td>0</td>\n      <td>2500</td>\n      <td>5</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1458</th>\n      <td>20</td>\n      <td>3</td>\n      <td>68.0</td>\n      <td>9717</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>366</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1459</th>\n      <td>20</td>\n      <td>3</td>\n      <td>75.0</td>\n      <td>9937</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>736</td>\n      <td>68</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>1460 rows × 69 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.858724Z","iopub.execute_input":"2024-09-15T15:19:56.859124Z","iopub.status.idle":"2024-09-15T15:19:56.873603Z","shell.execute_reply.started":"2024-09-15T15:19:56.859078Z","shell.execute_reply":"2024-09-15T15:19:56.872740Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"print(X_train.shape)\nprint(X_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.874943Z","iopub.execute_input":"2024-09-15T15:19:56.875331Z","iopub.status.idle":"2024-09-15T15:19:56.880704Z","shell.execute_reply.started":"2024-09-15T15:19:56.875287Z","shell.execute_reply":"2024-09-15T15:19:56.879724Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"(1168, 69)\n(292, 69)\n","output_type":"stream"}]},{"cell_type":"code","source":"df['MasVnrArea'].corr(df['SalePrice'])","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.881731Z","iopub.execute_input":"2024-09-15T15:19:56.882054Z","iopub.status.idle":"2024-09-15T15:19:56.893141Z","shell.execute_reply.started":"2024-09-15T15:19:56.882022Z","shell.execute_reply":"2024-09-15T15:19:56.892141Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"0.4774930470957166"},"metadata":{}}]},{"cell_type":"raw","source":"imputer_masvnr = SimpleImputer(strategy='median')\nX_train['MasVnrArea'] = imputer_masvnr.fit_transform(X_train[['MasVnrArea']])\n\n# For 'LotFrontage', fill with the median\nimputer_lotfrontage = SimpleImputer(strategy='median')\nX_train['LotFrontage'] = imputer_lotfrontage.fit_transform(X_train[['LotFrontage']])\n\n# Check if the dataset still has missing values\nmissing_values = X_train.isna().sum()\nprint(\"Missing values after filling:\")\nprint(missing_values[missing_values > 0])  # Print columns with remaining missing values, if any","metadata":{}},{"cell_type":"code","source":"# Loop through each column to check for missing values\nfor column in X_train.columns:\n    missing_values = X_train[column].isna().sum()\n    if missing_values > 0:\n        print(f\"Column '{column}' has {missing_values} missing values.\")\n    else:\n        print(f\"Column '{column}' has no missing values.\")","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-09-15T15:19:56.896451Z","iopub.execute_input":"2024-09-15T15:19:56.896785Z","iopub.status.idle":"2024-09-15T15:19:56.917614Z","shell.execute_reply.started":"2024-09-15T15:19:56.896750Z","shell.execute_reply":"2024-09-15T15:19:56.916543Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"Column 'MSSubClass' has no missing values.\nColumn 'MSZoning' has no missing values.\nColumn 'LotFrontage' has 217 missing values.\nColumn 'LotArea' has no missing values.\nColumn 'Street' has no missing values.\nColumn 'LotShape' has no missing values.\nColumn 'LandContour' has no missing values.\nColumn 'Utilities' has no missing values.\nColumn 'LotConfig' has no missing values.\nColumn 'LandSlope' has no missing values.\nColumn 'Neighborhood' has no missing values.\nColumn 'Condition1' has no missing values.\nColumn 'Condition2' has no missing values.\nColumn 'BldgType' has no missing values.\nColumn 'HouseStyle' has no missing values.\nColumn 'OverallQual' has no missing values.\nColumn 'OverallCond' has no missing values.\nColumn 'YearBuilt' has no missing values.\nColumn 'YearRemodAdd' has no missing values.\nColumn 'RoofStyle' has no missing values.\nColumn 'RoofMatl' has no missing values.\nColumn 'Exterior1st' has no missing values.\nColumn 'Exterior2nd' has no missing values.\nColumn 'MasVnrType' has no missing values.\nColumn 'MasVnrArea' has 6 missing values.\nColumn 'ExterQual' has no missing values.\nColumn 'ExterCond' has no missing values.\nColumn 'Foundation' has no missing values.\nColumn 'BsmtQual' has no missing values.\nColumn 'BsmtCond' has no missing values.\nColumn 'BsmtExposure' has no missing values.\nColumn 'BsmtFinType1' has no missing values.\nColumn 'BsmtFinSF1' has no missing values.\nColumn 'BsmtFinType2' has no missing values.\nColumn 'BsmtFinSF2' has no missing values.\nColumn 'BsmtUnfSF' has no missing values.\nColumn 'TotalBsmtSF' has no missing values.\nColumn 'Heating' has no missing values.\nColumn 'HeatingQC' has no missing values.\nColumn 'CentralAir' has no missing values.\nColumn 'Electrical' has no missing values.\nColumn '1stFlrSF' has no missing values.\nColumn '2ndFlrSF' has no missing values.\nColumn 'GrLivArea' has no missing values.\nColumn 'BsmtFullBath' has no missing values.\nColumn 'BsmtHalfBath' has no missing values.\nColumn 'FullBath' has no missing values.\nColumn 'HalfBath' has no missing values.\nColumn 'BedroomAbvGr' has no missing values.\nColumn 'KitchenAbvGr' has no missing values.\nColumn 'KitchenQual' has no missing values.\nColumn 'TotRmsAbvGrd' has no missing values.\nColumn 'Functional' has no missing values.\nColumn 'Fireplaces' has no missing values.\nColumn 'GarageType' has no missing values.\nColumn 'GarageFinish' has no missing values.\nColumn 'GarageCars' has no missing values.\nColumn 'GarageArea' has no missing values.\nColumn 'GarageQual' has no missing values.\nColumn 'GarageCond' has no missing values.\nColumn 'PavedDrive' has no missing values.\nColumn 'WoodDeckSF' has no missing values.\nColumn 'OpenPorchSF' has no missing values.\nColumn 'PoolArea' has no missing values.\nColumn 'MiscVal' has no missing values.\nColumn 'MoSold' has no missing values.\nColumn 'YrSold' has no missing values.\nColumn 'SaleType' has no missing values.\nColumn 'SaleCondition' has no missing values.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Check for missing values in y_train (SalePrice)\nmissing_values_y = y_train.isna().sum()\n\nif missing_values_y > 0:\n    print(f\"Column 'SalePrice' has {missing_values_y} missing values.\")\nelse:\n    print(\"Column 'SalePrice' has no missing values.\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.918776Z","iopub.execute_input":"2024-09-15T15:19:56.919131Z","iopub.status.idle":"2024-09-15T15:19:56.925689Z","shell.execute_reply.started":"2024-09-15T15:19:56.919088Z","shell.execute_reply":"2024-09-15T15:19:56.924633Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"Column 'SalePrice' has no missing values.\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.927089Z","iopub.execute_input":"2024-09-15T15:19:56.927449Z","iopub.status.idle":"2024-09-15T15:19:56.965721Z","shell.execute_reply.started":"2024-09-15T15:19:56.927407Z","shell.execute_reply":"2024-09-15T15:19:56.964696Z"},"trusted":true},"execution_count":32,"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"      MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  \\\n254           20         3         70.0     8400       1         3   \n1066          60         3         59.0     7837       1         0   \n638           30         3         67.0     8777       1         3   \n799           50         3         60.0     7200       1         3   \n380           50         3         50.0     5000       1         3   \n...          ...       ...          ...      ...     ...       ...   \n1095          20         3         78.0     9317       1         0   \n1130          50         3         65.0     7804       1         3   \n1294          20         3         60.0     8172       1         3   \n860           50         3         55.0     7642       1         3   \n1126         120         3         53.0     3684       1         3   \n\n      LandContour  Utilities  LotConfig  LandSlope  ...  GarageCond  \\\n254             3          0          4          0  ...           4   \n1066            3          0          4          0  ...           4   \n638             3          0          4          0  ...           5   \n799             3          0          0          0  ...           4   \n380             3          0          4          0  ...           4   \n...           ...        ...        ...        ...  ...         ...   \n1095            3          0          4          0  ...           4   \n1130            3          0          4          0  ...           4   \n1294            3          0          4          0  ...           4   \n860             3          0          0          0  ...           4   \n1126            3          0          4          0  ...           4   \n\n      PavedDrive  WoodDeckSF  OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  \\\n254            2         250            0         0        0       6    2010   \n1066           2           0           40         0        0       5    2009   \n638            1         328            0         0        0       5    2008   \n799            2           0            0         0        0       6    2007   \n380            2           0            0         0        0       5    2010   \n...          ...         ...          ...       ...      ...     ...     ...   \n1095           2           0           22         0        0       3    2007   \n1130           2         431           44         0        0      12    2009   \n1294           0           0            0         0        0       4    2006   \n860            2           0          240         0        0       6    2007   \n1126           2         143           20         0        0       6    2009   \n\n      SaleType  SaleCondition  \n254          8              4  \n1066         8              4  \n638          8              4  \n799          8              4  \n380          8              4  \n...        ...            ...  \n1095         8              4  \n1130         8              4  \n1294         8              4  \n860          8              4  \n1126         8              4  \n\n[1168 rows x 69 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>...</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>254</th>\n      <td>20</td>\n      <td>3</td>\n      <td>70.0</td>\n      <td>8400</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>250</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1066</th>\n      <td>60</td>\n      <td>3</td>\n      <td>59.0</td>\n      <td>7837</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>40</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2009</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>638</th>\n      <td>30</td>\n      <td>3</td>\n      <td>67.0</td>\n      <td>8777</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>5</td>\n      <td>1</td>\n      <td>328</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>799</th>\n      <td>50</td>\n      <td>3</td>\n      <td>60.0</td>\n      <td>7200</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>380</th>\n      <td>50</td>\n      <td>3</td>\n      <td>50.0</td>\n      <td>5000</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1095</th>\n      <td>20</td>\n      <td>3</td>\n      <td>78.0</td>\n      <td>9317</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>22</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1130</th>\n      <td>50</td>\n      <td>3</td>\n      <td>65.0</td>\n      <td>7804</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>431</td>\n      <td>44</td>\n      <td>0</td>\n      <td>0</td>\n      <td>12</td>\n      <td>2009</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1294</th>\n      <td>20</td>\n      <td>3</td>\n      <td>60.0</td>\n      <td>8172</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>2006</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>860</th>\n      <td>50</td>\n      <td>3</td>\n      <td>55.0</td>\n      <td>7642</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>240</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1126</th>\n      <td>120</td>\n      <td>3</td>\n      <td>53.0</td>\n      <td>3684</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>143</td>\n      <td>20</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2009</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>1168 rows × 69 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X_train.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.967017Z","iopub.execute_input":"2024-09-15T15:19:56.967357Z","iopub.status.idle":"2024-09-15T15:19:56.982829Z","shell.execute_reply.started":"2024-09-15T15:19:56.967318Z","shell.execute_reply":"2024-09-15T15:19:56.981901Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 1168 entries, 254 to 1126\nData columns (total 69 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   MSSubClass     1168 non-null   int64  \n 1   MSZoning       1168 non-null   int64  \n 2   LotFrontage    951 non-null    float64\n 3   LotArea        1168 non-null   int64  \n 4   Street         1168 non-null   int64  \n 5   LotShape       1168 non-null   int64  \n 6   LandContour    1168 non-null   int64  \n 7   Utilities      1168 non-null   int64  \n 8   LotConfig      1168 non-null   int64  \n 9   LandSlope      1168 non-null   int64  \n 10  Neighborhood   1168 non-null   int64  \n 11  Condition1     1168 non-null   int64  \n 12  Condition2     1168 non-null   int64  \n 13  BldgType       1168 non-null   int64  \n 14  HouseStyle     1168 non-null   int64  \n 15  OverallQual    1168 non-null   int64  \n 16  OverallCond    1168 non-null   int64  \n 17  YearBuilt      1168 non-null   int64  \n 18  YearRemodAdd   1168 non-null   int64  \n 19  RoofStyle      1168 non-null   int64  \n 20  RoofMatl       1168 non-null   int64  \n 21  Exterior1st    1168 non-null   int64  \n 22  Exterior2nd    1168 non-null   int64  \n 23  MasVnrType     1168 non-null   int64  \n 24  MasVnrArea     1162 non-null   float64\n 25  ExterQual      1168 non-null   int64  \n 26  ExterCond      1168 non-null   int64  \n 27  Foundation     1168 non-null   int64  \n 28  BsmtQual       1168 non-null   int64  \n 29  BsmtCond       1168 non-null   int64  \n 30  BsmtExposure   1168 non-null   int64  \n 31  BsmtFinType1   1168 non-null   int64  \n 32  BsmtFinSF1     1168 non-null   int64  \n 33  BsmtFinType2   1168 non-null   int64  \n 34  BsmtFinSF2     1168 non-null   int64  \n 35  BsmtUnfSF      1168 non-null   int64  \n 36  TotalBsmtSF    1168 non-null   int64  \n 37  Heating        1168 non-null   int64  \n 38  HeatingQC      1168 non-null   int64  \n 39  CentralAir     1168 non-null   int64  \n 40  Electrical     1168 non-null   int64  \n 41  1stFlrSF       1168 non-null   int64  \n 42  2ndFlrSF       1168 non-null   int64  \n 43  GrLivArea      1168 non-null   int64  \n 44  BsmtFullBath   1168 non-null   int64  \n 45  BsmtHalfBath   1168 non-null   int64  \n 46  FullBath       1168 non-null   int64  \n 47  HalfBath       1168 non-null   int64  \n 48  BedroomAbvGr   1168 non-null   int64  \n 49  KitchenAbvGr   1168 non-null   int64  \n 50  KitchenQual    1168 non-null   int64  \n 51  TotRmsAbvGrd   1168 non-null   int64  \n 52  Functional     1168 non-null   int64  \n 53  Fireplaces     1168 non-null   int64  \n 54  GarageType     1168 non-null   int64  \n 55  GarageFinish   1168 non-null   int64  \n 56  GarageCars     1168 non-null   int64  \n 57  GarageArea     1168 non-null   int64  \n 58  GarageQual     1168 non-null   int64  \n 59  GarageCond     1168 non-null   int64  \n 60  PavedDrive     1168 non-null   int64  \n 61  WoodDeckSF     1168 non-null   int64  \n 62  OpenPorchSF    1168 non-null   int64  \n 63  PoolArea       1168 non-null   int64  \n 64  MiscVal        1168 non-null   int64  \n 65  MoSold         1168 non-null   int64  \n 66  YrSold         1168 non-null   int32  \n 67  SaleType       1168 non-null   int64  \n 68  SaleCondition  1168 non-null   int64  \ndtypes: float64(2), int32(1), int64(66)\nmemory usage: 634.2 KB\n","output_type":"stream"}]},{"cell_type":"code","source":"y_train","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.984152Z","iopub.execute_input":"2024-09-15T15:19:56.984652Z","iopub.status.idle":"2024-09-15T15:19:56.992469Z","shell.execute_reply.started":"2024-09-15T15:19:56.984602Z","shell.execute_reply":"2024-09-15T15:19:56.991383Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"254     145000\n1066    178000\n638      85000\n799     175000\n380     127000\n         ...  \n1095    176432\n1130    135000\n1294    115000\n860     189950\n1126    174000\nName: SalePrice, Length: 1168, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"X_test","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:19:56.993932Z","iopub.execute_input":"2024-09-15T15:19:56.994440Z","iopub.status.idle":"2024-09-15T15:19:57.021368Z","shell.execute_reply.started":"2024-09-15T15:19:56.994394Z","shell.execute_reply":"2024-09-15T15:19:57.020189Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"      MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  \\\n892           20         3         70.0     8414       1         3   \n1105          60         3         98.0    12256       1         0   \n413           30         4         56.0     8960       1         3   \n522           50         4         50.0     5000       1         3   \n1036          20         3         89.0    12898       1         0   \n...          ...       ...          ...      ...     ...       ...   \n479           30         4         50.0     5925       1         3   \n1361          20         3        124.0    16158       1         0   \n802           60         3         63.0     8199       1         3   \n651           70         3         60.0     9084       1         3   \n722           20         3         70.0     8120       1         3   \n\n      LandContour  Utilities  LotConfig  LandSlope  ...  GarageCond  \\\n892             3          0          4          0  ...           4   \n1105            3          0          0          0  ...           4   \n413             3          0          4          0  ...           4   \n522             3          0          0          0  ...           4   \n1036            1          0          4          0  ...           4   \n...           ...        ...        ...        ...  ...         ...   \n479             0          0          4          0  ...           4   \n1361            2          0          4          1  ...           4   \n802             3          0          4          0  ...           4   \n651             3          0          4          0  ...           3   \n722             3          0          4          0  ...           4   \n\n      PavedDrive  WoodDeckSF  OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  \\\n892            2         192            0         0        0       2    2006   \n1105           2         186           32         0        0       4    2010   \n413            2           0            0         0        0       3    2010   \n522            2           0           24         0        0      10    2006   \n1036           2         228            0         0        0       9    2009   \n...          ...         ...          ...       ...      ...     ...     ...   \n479            2           0           72         0        0       3    2007   \n1361           2         168           36         0        0       6    2009   \n802            2          36           18         0        0      10    2008   \n651            1         120            0         0        0      10    2009   \n722            2           0            0         0        0       7    2009   \n\n      SaleType  SaleCondition  \n892          8              4  \n1105         8              4  \n413          8              4  \n522          8              4  \n1036         8              4  \n...        ...            ...  \n479          8              2  \n1361         8              4  \n802          8              4  \n651          8              4  \n722          8              4  \n\n[292 rows x 69 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>...</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>892</th>\n      <td>20</td>\n      <td>3</td>\n      <td>70.0</td>\n      <td>8414</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>192</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2006</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1105</th>\n      <td>60</td>\n      <td>3</td>\n      <td>98.0</td>\n      <td>12256</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>186</td>\n      <td>32</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>413</th>\n      <td>30</td>\n      <td>4</td>\n      <td>56.0</td>\n      <td>8960</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>522</th>\n      <td>50</td>\n      <td>4</td>\n      <td>50.0</td>\n      <td>5000</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>24</td>\n      <td>0</td>\n      <td>0</td>\n      <td>10</td>\n      <td>2006</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1036</th>\n      <td>20</td>\n      <td>3</td>\n      <td>89.0</td>\n      <td>12898</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>228</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2009</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>479</th>\n      <td>30</td>\n      <td>4</td>\n      <td>50.0</td>\n      <td>5925</td>\n      <td>1</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>72</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2007</td>\n      <td>8</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1361</th>\n      <td>20</td>\n      <td>3</td>\n      <td>124.0</td>\n      <td>16158</td>\n      <td>1</td>\n      <td>0</td>\n      <td>2</td>\n      <td>0</td>\n      <td>4</td>\n      <td>1</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>168</td>\n      <td>36</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2009</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>802</th>\n      <td>60</td>\n      <td>3</td>\n      <td>63.0</td>\n      <td>8199</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>36</td>\n      <td>18</td>\n      <td>0</td>\n      <td>0</td>\n      <td>10</td>\n      <td>2008</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>651</th>\n      <td>70</td>\n      <td>3</td>\n      <td>60.0</td>\n      <td>9084</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>3</td>\n      <td>1</td>\n      <td>120</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>10</td>\n      <td>2009</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>722</th>\n      <td>20</td>\n      <td>3</td>\n      <td>70.0</td>\n      <td>8120</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>7</td>\n      <td>2009</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>292 rows × 69 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Import necessary libraries\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LinearRegression, Lasso, Ridge\nfrom sklearn.ensemble import RandomForestRegressor\nfrom xgboost import XGBRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score\nfrom sklearn.model_selection import train_test_split\n\n# Define a function to evaluate models\ndef evaluate_model(model, X_train, X_test, y_train, y_test):\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    r2 = r2_score(y_test, y_pred)\n    mse = mean_squared_error(y_test, y_pred)\n    \n    # Approximate accuracy based on the percentage of predictions within a certain threshold\n    accuracy = np.mean(np.abs((y_test - y_pred) / y_test) < 0.1)  # Within 10% of actual value\n    return r2, mse, accuracy\n\n# Define a preprocessor pipeline\npreprocessor = Pipeline([\n    ('imputer', SimpleImputer(strategy='median')),  # Handle missing values\n    ('scaler', StandardScaler())  # Standardize features\n])\n\n\n# Initialize dictionary to store results\nresults = {}\n\n# 1. Linear Regression Pipeline\nlr_pipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('model', LinearRegression())\n])\nr2_lr, mse_lr, acc_lr = evaluate_model(lr_pipeline, X_train, X_test, y_train, y_test)\nresults['Linear Regression'] = {'R2': r2_lr, 'MSE': mse_lr, 'Accuracy': acc_lr}\n\n# 2. Lasso Regression Pipeline\nlasso_pipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('model', Lasso(alpha=0.1))\n])\nr2_lasso, mse_lasso, acc_lasso = evaluate_model(lasso_pipeline, X_train, X_test, y_train, y_test)\nresults['Lasso Regression'] = {'R2': r2_lasso, 'MSE': mse_lasso, 'Accuracy': acc_lasso}\n\n# 3. Ridge Regression Pipeline\nridge_pipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('model', Ridge(alpha=0.1))\n])\nr2_ridge, mse_ridge, acc_ridge = evaluate_model(ridge_pipeline, X_train, X_test, y_train, y_test)\nresults['Ridge Regression'] = {'R2': r2_ridge, 'MSE': mse_ridge, 'Accuracy': acc_ridge}\n\n# 4. Random Forest Regressor Pipeline\nrf_pipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('model', RandomForestRegressor(n_estimators=100, random_state=42))\n])\nr2_rf, mse_rf, acc_rf = evaluate_model(rf_pipeline, X_train, X_test, y_train, y_test)\nresults['Random Forest'] = {'R2': r2_rf, 'MSE': mse_rf, 'Accuracy': acc_rf}\n\n# 5. XGBoost Regressor Pipeline\nxgb_pipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('model', XGBRegressor(n_estimators=100, random_state=42))\n])\nr2_xgb, mse_xgb, acc_xgb = evaluate_model(xgb_pipeline, X_train, X_test, y_train, y_test)\nresults['XGBoost'] = {'R2': r2_xgb, 'MSE': mse_xgb, 'Accuracy': acc_xgb}\n\n# Convert results to a DataFrame for better visualization\nresults_df = pd.DataFrame(results).T\n\n# Display the results\nprint(\"Model Performance:\\n\", results_df)\n\n# Find the best model based on R² score (or choose MSE/accuracy if preferred)\nbest_model = results_df['R2'].idxmax()\nprint(f\"\\nBest model based on R² score: {best_model}\")\n\n# Display the performance of the best model\nprint(f\"\\nBest model performance:\\n{results_df.loc[best_model]}\")\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T15:24:31.990755Z","iopub.execute_input":"2024-09-15T15:24:31.991668Z","iopub.status.idle":"2024-09-15T15:24:34.302381Z","shell.execute_reply.started":"2024-09-15T15:24:31.991625Z","shell.execute_reply":"2024-09-15T15:24:34.301564Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.681e+10, tolerance: 6.967e+08\n  model = cd_fast.enet_coordinate_descent(\n","output_type":"stream"},{"name":"stdout","text":"Model Performance:\n                          R2           MSE  Accuracy\nLinear Regression  0.848727  1.160313e+09  0.537671\nLasso Regression   0.848909  1.158919e+09  0.534247\nRidge Regression   0.848913  1.158890e+09  0.534247\nRandom Forest      0.897278  7.879130e+08  0.667808\nXGBoost            0.914513  6.557118e+08  0.657534\n\nBest model based on R² score: XGBoost\n\nBest model performance:\nR2          9.145132e-01\nMSE         6.557118e+08\nAccuracy    6.575342e-01\nName: XGBoost, dtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"test_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:13:45.060421Z","iopub.execute_input":"2024-09-15T16:13:45.061121Z","iopub.status.idle":"2024-09-15T16:13:45.084169Z","shell.execute_reply.started":"2024-09-15T16:13:45.061076Z","shell.execute_reply":"2024-09-15T16:13:45.083245Z"},"trusted":true},"execution_count":51,"outputs":[{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n\n  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n\n  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n0       0      6    2010        WD         Normal  \n1   12500      6    2010        WD         Normal  \n2       0      3    2010        WD         Normal  \n3       0      6    2010        WD         Normal  \n4       0      1    2010        WD         Normal  \n\n[5 rows x 80 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1461</td>\n      <td>20</td>\n      <td>RH</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>120</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1462</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Gar2</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1463</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1464</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1465</td>\n      <td>120</td>\n      <td>RL</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>HLS</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>144</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 80 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_df.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:13:46.370917Z","iopub.execute_input":"2024-09-15T16:13:46.371306Z","iopub.status.idle":"2024-09-15T16:13:46.377429Z","shell.execute_reply.started":"2024-09-15T16:13:46.371261Z","shell.execute_reply":"2024-09-15T16:13:46.376569Z"},"trusted":true},"execution_count":52,"outputs":[{"execution_count":52,"output_type":"execute_result","data":{"text/plain":"(1459, 80)"},"metadata":{}}]},{"cell_type":"code","source":"test_df.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:13:47.209811Z","iopub.execute_input":"2024-09-15T16:13:47.210180Z","iopub.status.idle":"2024-09-15T16:13:47.231504Z","shell.execute_reply.started":"2024-09-15T16:13:47.210147Z","shell.execute_reply":"2024-09-15T16:13:47.230570Z"},"trusted":true},"execution_count":53,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1459 entries, 0 to 1458\nData columns (total 80 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   Id             1459 non-null   int64  \n 1   MSSubClass     1459 non-null   int64  \n 2   MSZoning       1455 non-null   object \n 3   LotFrontage    1232 non-null   float64\n 4   LotArea        1459 non-null   int64  \n 5   Street         1459 non-null   object \n 6   Alley          107 non-null    object \n 7   LotShape       1459 non-null   object \n 8   LandContour    1459 non-null   object \n 9   Utilities      1457 non-null   object \n 10  LotConfig      1459 non-null   object \n 11  LandSlope      1459 non-null   object \n 12  Neighborhood   1459 non-null   object \n 13  Condition1     1459 non-null   object \n 14  Condition2     1459 non-null   object \n 15  BldgType       1459 non-null   object \n 16  HouseStyle     1459 non-null   object \n 17  OverallQual    1459 non-null   int64  \n 18  OverallCond    1459 non-null   int64  \n 19  YearBuilt      1459 non-null   int64  \n 20  YearRemodAdd   1459 non-null   int64  \n 21  RoofStyle      1459 non-null   object \n 22  RoofMatl       1459 non-null   object \n 23  Exterior1st    1458 non-null   object \n 24  Exterior2nd    1458 non-null   object \n 25  MasVnrType     565 non-null    object \n 26  MasVnrArea     1444 non-null   float64\n 27  ExterQual      1459 non-null   object \n 28  ExterCond      1459 non-null   object \n 29  Foundation     1459 non-null   object \n 30  BsmtQual       1415 non-null   object \n 31  BsmtCond       1414 non-null   object \n 32  BsmtExposure   1415 non-null   object \n 33  BsmtFinType1   1417 non-null   object \n 34  BsmtFinSF1     1458 non-null   float64\n 35  BsmtFinType2   1417 non-null   object \n 36  BsmtFinSF2     1458 non-null   float64\n 37  BsmtUnfSF      1458 non-null   float64\n 38  TotalBsmtSF    1458 non-null   float64\n 39  Heating        1459 non-null   object \n 40  HeatingQC      1459 non-null   object \n 41  CentralAir     1459 non-null   object \n 42  Electrical     1459 non-null   object \n 43  1stFlrSF       1459 non-null   int64  \n 44  2ndFlrSF       1459 non-null   int64  \n 45  LowQualFinSF   1459 non-null   int64  \n 46  GrLivArea      1459 non-null   int64  \n 47  BsmtFullBath   1457 non-null   float64\n 48  BsmtHalfBath   1457 non-null   float64\n 49  FullBath       1459 non-null   int64  \n 50  HalfBath       1459 non-null   int64  \n 51  BedroomAbvGr   1459 non-null   int64  \n 52  KitchenAbvGr   1459 non-null   int64  \n 53  KitchenQual    1458 non-null   object \n 54  TotRmsAbvGrd   1459 non-null   int64  \n 55  Functional     1457 non-null   object \n 56  Fireplaces     1459 non-null   int64  \n 57  FireplaceQu    729 non-null    object \n 58  GarageType     1383 non-null   object \n 59  GarageYrBlt    1381 non-null   float64\n 60  GarageFinish   1381 non-null   object \n 61  GarageCars     1458 non-null   float64\n 62  GarageArea     1458 non-null   float64\n 63  GarageQual     1381 non-null   object \n 64  GarageCond     1381 non-null   object \n 65  PavedDrive     1459 non-null   object \n 66  WoodDeckSF     1459 non-null   int64  \n 67  OpenPorchSF    1459 non-null   int64  \n 68  EnclosedPorch  1459 non-null   int64  \n 69  3SsnPorch      1459 non-null   int64  \n 70  ScreenPorch    1459 non-null   int64  \n 71  PoolArea       1459 non-null   int64  \n 72  PoolQC         3 non-null      object \n 73  Fence          290 non-null    object \n 74  MiscFeature    51 non-null     object \n 75  MiscVal        1459 non-null   int64  \n 76  MoSold         1459 non-null   int64  \n 77  YrSold         1459 non-null   int64  \n 78  SaleType       1458 non-null   object \n 79  SaleCondition  1459 non-null   object \ndtypes: float64(11), int64(26), object(43)\nmemory usage: 912.0+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"\n# Check for missing values in the test dataset\nmissing_values_test = test_df.isnull().sum().sort_values(ascending=False)\n\nmissing_values_test.head(30)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:13:47.233152Z","iopub.execute_input":"2024-09-15T16:13:47.233482Z","iopub.status.idle":"2024-09-15T16:13:47.248870Z","shell.execute_reply.started":"2024-09-15T16:13:47.233447Z","shell.execute_reply":"2024-09-15T16:13:47.247879Z"},"trusted":true},"execution_count":54,"outputs":[{"execution_count":54,"output_type":"execute_result","data":{"text/plain":"PoolQC          1456\nMiscFeature     1408\nAlley           1352\nFence           1169\nMasVnrType       894\nFireplaceQu      730\nLotFrontage      227\nGarageFinish      78\nGarageYrBlt       78\nGarageCond        78\nGarageQual        78\nGarageType        76\nBsmtCond          45\nBsmtExposure      44\nBsmtQual          44\nBsmtFinType1      42\nBsmtFinType2      42\nMasVnrArea        15\nMSZoning           4\nUtilities          2\nFunctional         2\nBsmtFullBath       2\nBsmtHalfBath       2\nSaleType           1\nExterior1st        1\nKitchenQual        1\nGarageCars         1\nGarageArea         1\nExterior2nd        1\nBsmtFinSF1         1\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"for column in test_df.columns:\n    print(test_df[column].value_counts())\n    print('-'*20)","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-09-15T16:13:48.234799Z","iopub.execute_input":"2024-09-15T16:13:48.235235Z","iopub.status.idle":"2024-09-15T16:13:48.317056Z","shell.execute_reply.started":"2024-09-15T16:13:48.235176Z","shell.execute_reply":"2024-09-15T16:13:48.315916Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"Id\n2919    1\n1461    1\n1462    1\n1463    1\n1464    1\n       ..\n1483    1\n1484    1\n1485    1\n1486    1\n1487    1\nName: count, Length: 1459, dtype: int64\n--------------------\nMSSubClass\n20     543\n60     276\n50     143\n120     95\n30      70\n70      68\n160     65\n80      60\n90      57\n190     31\n85      28\n75       7\n180      7\n45       6\n40       2\n150      1\nName: count, dtype: int64\n--------------------\nMSZoning\nRL         1114\nRM          242\nFV           74\nC (all)      15\nRH           10\nName: count, dtype: int64\n--------------------\nLotFrontage\n60.0     133\n80.0      68\n70.0      63\n50.0      60\n75.0      52\n        ... \n25.0       1\n22.0       1\n123.0      1\n133.0      1\n140.0      1\nName: count, Length: 115, dtype: int64\n--------------------\nLotArea\n9600     20\n7200     18\n6000     17\n9000     15\n7500     12\n         ..\n16900     1\n16451     1\n12304     1\n8232      1\n14311     1\nName: count, Length: 1106, dtype: int64\n--------------------\nStreet\nPave    1453\nGrvl       6\nName: count, dtype: int64\n--------------------\nAlley\nGrvl    70\nPave    37\nName: count, dtype: int64\n--------------------\nLotShape\nReg    934\nIR1    484\nIR2     35\nIR3      6\nName: count, dtype: int64\n--------------------\nLandContour\nLvl    1311\nHLS      70\nBnk      54\nLow      24\nName: count, dtype: int64\n--------------------\nUtilities\nAllPub    1457\nName: count, dtype: int64\n--------------------\nLotConfig\nInside     1081\nCorner      248\nCulDSac      82\nFR2          38\nFR3          10\nName: count, dtype: int64\n--------------------\nLandSlope\nGtl    1396\nMod      60\nSev       3\nName: count, dtype: int64\n--------------------\nNeighborhood\nNAmes      218\nOldTown    126\nCollgCr    117\nSomerst     96\nEdwards     94\nNridgHt     89\nGilbert     86\nSawyer      77\nSawyerW     66\nMitchel     65\nNWAmes      58\nIDOTRR      56\nCrawfor     52\nBrkSide     50\nTimber      34\nNoRidge     30\nStoneBr     26\nSWISU       23\nMeadowV     20\nClearCr     16\nBrDale      14\nNPkVill     14\nVeenker     13\nBlmngtn     11\nBlueste      8\nName: count, dtype: int64\n--------------------\nCondition1\nNorm      1251\nFeedr       83\nArtery      44\nRRAn        24\nPosN        20\nRRAe        17\nPosA        12\nRRNe         4\nRRNn         4\nName: count, dtype: int64\n--------------------\nCondition2\nNorm      1444\nFeedr        7\nPosA         3\nArtery       3\nPosN         2\nName: count, dtype: int64\n--------------------\nBldgType\n1Fam      1205\nTwnhsE     113\nDuplex      57\nTwnhs       53\n2fmCon      31\nName: count, dtype: int64\n--------------------\nHouseStyle\n1Story    745\n2Story    427\n1.5Fin    160\nSLvl       63\nSFoyer     46\n2.5Unf     13\n1.5Unf      5\nName: count, dtype: int64\n--------------------\nOverallQual\n5     428\n6     357\n7     281\n8     174\n4     110\n9      64\n3      20\n10     13\n2      10\n1       2\nName: count, dtype: int64\n--------------------\nOverallCond\n5    824\n6    279\n7    185\n8     72\n4     44\n3     25\n9     19\n1      6\n2      5\nName: count, dtype: int64\n--------------------\nYearBuilt\n2005    78\n2006    71\n2007    60\n2004    45\n2003    43\n        ..\n1931     1\n1896     1\n1902     1\n1880     1\n1932     1\nName: count, Length: 106, dtype: int64\n--------------------\nYearRemodAdd\n1950    183\n2006    105\n2007     88\n2005     68\n2004     49\n       ... \n1987      6\n1988      6\n1985      5\n1981      4\n1982      2\nName: count, Length: 61, dtype: int64\n--------------------\nRoofStyle\nGable      1169\nHip         265\nGambrel      11\nFlat          7\nMansard       4\nShed          3\nName: count, dtype: int64\n--------------------\nRoofMatl\nCompShg    1442\nTar&Grv      12\nWdShake       4\nWdShngl       1\nName: count, dtype: int64\n--------------------\nExterior1st\nVinylSd    510\nMetalSd    230\nHdBoard    220\nWd Sdng    205\nPlywood    113\nCemntBd     65\nBrkFace     37\nWdShing     30\nAsbShng     24\nStucco      18\nBrkComm      4\nAsphShn      1\nCBlock       1\nName: count, dtype: int64\n--------------------\nExterior2nd\nVinylSd    510\nMetalSd    233\nHdBoard    199\nWd Sdng    194\nPlywood    128\nCmentBd     66\nWd Shng     43\nBrkFace     22\nStucco      21\nAsbShng     18\nBrk Cmn     15\nImStucc      5\nCBlock       2\nAsphShn      1\nStone        1\nName: count, dtype: int64\n--------------------\nMasVnrType\nBrkFace    434\nStone      121\nBrkCmn      10\nName: count, dtype: int64\n--------------------\nMasVnrArea\n0.0      877\n176.0     10\n144.0      9\n120.0      8\n216.0      8\n        ... \n432.0      1\n771.0      1\n47.0       1\n434.0      1\n662.0      1\nName: count, Length: 303, dtype: int64\n--------------------\nExterQual\nTA    892\nGd    491\nEx     55\nFa     21\nName: count, dtype: int64\n--------------------\nExterCond\nTA    1256\nGd     153\nFa      39\nEx       9\nPo       2\nName: count, dtype: int64\n--------------------\nFoundation\nPConc     661\nCBlock    601\nBrkTil    165\nSlab       25\nStone       5\nWood        2\nName: count, dtype: int64\n--------------------\nBsmtQual\nTA    634\nGd    591\nEx    137\nFa     53\nName: count, dtype: int64\n--------------------\nBsmtCond\nTA    1295\nFa      59\nGd      57\nPo       3\nName: count, dtype: int64\n--------------------\nBsmtExposure\nNo    951\nAv    197\nGd    142\nMn    125\nName: count, dtype: int64\n--------------------\nBsmtFinType1\nGLQ    431\nUnf    421\nALQ    209\nRec    155\nBLQ    121\nLwQ     80\nName: count, dtype: int64\n--------------------\nBsmtFinSF1\n0.0       462\n24.0       15\n602.0       6\n276.0       6\n16.0        5\n         ... \n1298.0      1\n376.0       1\n953.0       1\n381.0       1\n208.0       1\nName: count, Length: 669, dtype: int64\n--------------------\nBsmtFinType2\nUnf    1237\nRec      51\nLwQ      41\nBLQ      35\nALQ      33\nGLQ      20\nName: count, dtype: int64\n--------------------\nBsmtFinSF2\n0.0      1278\n483.0       3\n294.0       3\n162.0       3\n60.0        2\n         ... \n186.0       1\n449.0       1\n48.0        1\n613.0       1\n507.0       1\nName: count, Length: 161, dtype: int64\n--------------------\nBsmtUnfSF\n0.0      123\n384.0     11\n624.0      8\n672.0      7\n738.0      7\n        ... \n307.0      1\n556.0      1\n99.0       1\n350.0      1\n517.0      1\nName: count, Length: 793, dtype: int64\n--------------------\nTotalBsmtSF\n0.0      41\n864.0    39\n960.0    13\n546.0    12\n384.0    12\n         ..\n818.0     1\n824.0     1\n817.0     1\n637.0     1\n697.0     1\nName: count, Length: 736, dtype: int64\n--------------------\nHeating\nGasA    1446\nGasW       9\nGrav       2\nWall       2\nName: count, dtype: int64\n--------------------\nHeatingQC\nEx    752\nTA    429\nGd    233\nFa     43\nPo      2\nName: count, dtype: int64\n--------------------\nCentralAir\nY    1358\nN     101\nName: count, dtype: int64\n--------------------\nElectrical\nSBrkr    1337\nFuseA      94\nFuseF      23\nFuseP       5\nName: count, dtype: int64\n--------------------\n1stFlrSF\n864     21\n1040    12\n546     12\n960     11\n936     10\n        ..\n1147     1\n502      1\n714      1\n492      1\n885      1\nName: count, Length: 789, dtype: int64\n--------------------\n2ndFlrSF\n0       839\n546      15\n504       8\n728       8\n886       7\n       ... \n1182      1\n363       1\n973       1\n308       1\n651       1\nName: count, Length: 407, dtype: int64\n--------------------\nLowQualFinSF\n0       1445\n362        1\n1064       1\n431        1\n436        1\n259        1\n312        1\n108        1\n697        1\n512        1\n114        1\n205        1\n80         1\n140        1\n450        1\nName: count, dtype: int64\n--------------------\nGrLivArea\n864     19\n1092    18\n1040    11\n1456    10\n936      9\n        ..\n713      1\n715      1\n720      1\n1146     1\n1207     1\nName: count, Length: 879, dtype: int64\n--------------------\nBsmtFullBath\n0.0    849\n1.0    584\n2.0     23\n3.0      1\nName: count, dtype: int64\n--------------------\nBsmtHalfBath\n0.0    1364\n1.0      91\n2.0       2\nName: count, dtype: int64\n--------------------\nFullBath\n2    762\n1    659\n3     31\n4      4\n0      3\nName: count, dtype: int64\n--------------------\nHalfBath\n0    921\n1    525\n2     13\nName: count, dtype: int64\n--------------------\nBedroomAbvGr\n3    792\n2    384\n4    187\n1     53\n5     27\n6     14\n0      2\nName: count, dtype: int64\n--------------------\nKitchenAbvGr\n1    1393\n2      64\n0       2\nName: count, dtype: int64\n--------------------\nKitchenQual\nTA    757\nGd    565\nEx    105\nFa     31\nName: count, dtype: int64\n--------------------\nTotRmsAbvGrd\n6     442\n7     320\n5     308\n8     160\n4      99\n9      68\n10     33\n11     14\n3       8\n12      5\n13      1\n15      1\nName: count, dtype: int64\n--------------------\nFunctional\nTyp     1357\nMin2      36\nMin1      34\nMod       20\nMaj1       5\nMaj2       4\nSev        1\nName: count, dtype: int64\n--------------------\nFireplaces\n0    730\n1    618\n2    104\n3      6\n4      1\nName: count, dtype: int64\n--------------------\nFireplaceQu\nGd    364\nTA    279\nFa     41\nPo     26\nEx     19\nName: count, dtype: int64\n--------------------\nGarageType\nAttchd     853\nDetchd     392\nBuiltIn     98\nBasment     17\n2Types      17\nCarPort      6\nName: count, dtype: int64\n--------------------\nGarageYrBlt\n2005.0    77\n2007.0    66\n2006.0    56\n2004.0    46\n2003.0    42\n          ..\n1896.0     1\n1916.0     1\n1918.0     1\n1932.0     1\n1919.0     1\nName: count, Length: 97, dtype: int64\n--------------------\nGarageFinish\nUnf    625\nRFn    389\nFin    367\nName: count, dtype: int64\n--------------------\nGarageCars\n2.0    770\n1.0    407\n3.0    193\n0.0     76\n4.0     11\n5.0      1\nName: count, dtype: int64\n--------------------\nGarageArea\n0.0       76\n576.0     50\n440.0     47\n484.0     34\n400.0     33\n          ..\n582.0      1\n485.0      1\n543.0      1\n831.0      1\n1085.0     1\nName: count, Length: 459, dtype: int64\n--------------------\nGarageQual\nTA    1293\nFa      76\nGd      10\nPo       2\nName: count, dtype: int64\n--------------------\nGarageCond\nTA    1328\nFa      39\nPo       7\nGd       6\nEx       1\nName: count, dtype: int64\n--------------------\nPavedDrive\nY    1301\nN     126\nP      32\nName: count, dtype: int64\n--------------------\nWoodDeckSF\n0      762\n100     38\n192     32\n144     28\n168     28\n      ... \n121      1\n414      1\n657      1\n351      1\n444      1\nName: count, Length: 263, dtype: int64\n--------------------\nOpenPorchSF\n0      642\n48      29\n32      27\n40      25\n36      23\n      ... \n188      1\n215      1\n222      1\n193      1\n204      1\nName: count, Length: 203, dtype: int64\n--------------------\nEnclosedPorch\n0      1208\n112       7\n96        7\n168       7\n84        6\n       ... \n225       1\n208       1\n34        1\n213       1\n102       1\nName: count, Length: 131, dtype: int64\n--------------------\n3SsnPorch\n0      1446\n153       2\n224       1\n225       1\n255       1\n360       1\n150       1\n174       1\n120       1\n219       1\n176       1\n86        1\n323       1\nName: count, dtype: int64\n--------------------\nScreenPorch\n0      1319\n144      10\n168       7\n216       6\n192       5\n       ... \n171       1\n135       1\n322       1\n174       1\n141       1\nName: count, Length: 75, dtype: int64\n--------------------\nPoolArea\n0      1453\n144       1\n368       1\n444       1\n228       1\n561       1\n800       1\nName: count, dtype: int64\n--------------------\nPoolQC\nEx    2\nGd    1\nName: count, dtype: int64\n--------------------\nFence\nMnPrv    172\nGdPrv     59\nGdWo      58\nMnWw       1\nName: count, dtype: int64\n--------------------\nMiscFeature\nShed    46\nGar2     3\nOthr     2\nName: count, dtype: int64\n--------------------\nMiscVal\n0        1408\n400         7\n450         5\n500         5\n600         4\n1500        3\n650         3\n2000        3\n700         2\n3000        2\n4500        2\n1200        1\n80          1\n300         1\n12500       1\n490         1\n2500        1\n900         1\n6500        1\n750         1\n1000        1\n17000       1\n1512        1\n455         1\n460         1\n420         1\nName: count, dtype: int64\n--------------------\nMoSold\n6     250\n7     212\n5     190\n4     138\n3     126\n8     111\n9      95\n10     84\n2      81\n1      64\n11     63\n12     45\nName: count, dtype: int64\n--------------------\nYrSold\n2007    363\n2008    318\n2009    309\n2006    305\n2010    164\nName: count, dtype: int64\n--------------------\nSaleType\nWD       1258\nNew       117\nCOD        44\nConLD      17\nCWD         8\nOth         4\nConLI       4\nConLw       3\nCon         3\nName: count, dtype: int64\n--------------------\nSaleCondition\nNormal     1204\nPartial     120\nAbnorml      89\nFamily       26\nAlloca       12\nAdjLand       8\nName: count, dtype: int64\n--------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"\n\n# Load the dataset (ensure you provide the correct path)\ndf2 = pd.read_csv('/kaggle/input/datatask1/test.csv')  # Update with your dataset path\n\n# Step 1: Remove Outliers using IQR method\ndef remove_outliers(df2):\n    for column in df2.select_dtypes(include=[np.number]).columns:\n        Q1 = df2[column].quantile(0.25)\n        Q3 = df2[column].quantile(0.75)\n        IQR = Q3 - Q1\n        lower_bound = Q1 - 1.5 * IQR\n        upper_bound = Q3 + 1.5 * IQR\n        # Filter the dataframe by removing outliers\n        df2 = df2[(df2[column] >= lower_bound) & (df2[column] <= upper_bound)]\n    return df2\n\ndf2_cleaned = remove_outliers(df)\n\n# Step 2: Handle Missing Values\n\n# Fill missing values in 'LotFrontage' with the median of the column\ndf2_cleaned['LotFrontage'] = df2_cleaned['LotFrontage'].fillna(df2_cleaned['LotFrontage'].median())\n\n# For numerical features - fill missing values with the median of each column\nfor column in df2_cleaned.select_dtypes(include=[np.number]).columns:\n    df2_cleaned[column] = df2_cleaned[column].fillna(df2_cleaned[column].median())\n\n# For categorical features - handle missing values\nfor column in df2_cleaned.select_dtypes(include=[object]).columns:\n    if df2_cleaned[column].isnull().sum() > 0:\n        if column == \"PoolQC\":\n            # Remove the column if it has too many missing values\n            df2_cleaned = df2_cleaned.drop(columns=[column])\n        else:\n            # Fill missing categorical values with the mode (most frequent value)\n            df2_cleaned[column] = df2_cleaned[column].fillna(df2_cleaned[column].mode()[0])\n\n# Step 3: Optionally, drop columns with too many missing values\n# Drop columns where more than 50% of the values are missing\nmissing_value_threshold = 0.5\ndf2_cleaned = df2_cleaned.loc[:, df2_cleaned.isnull().mean() < missing_value_threshold]\n\n# Check if the dataset still has missing values after cleaning\nmissing_values = df2_cleaned.isnull().sum()\nprint(\"Missing values after cleaning:\")\nprint(missing_values[missing_values > 0])  # Print columns with remaining missing values, if any\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:25.860637Z","iopub.execute_input":"2024-09-15T16:14:25.861037Z","iopub.status.idle":"2024-09-15T16:14:26.021843Z","shell.execute_reply.started":"2024-09-15T16:14:25.860999Z","shell.execute_reply":"2024-09-15T16:14:26.020747Z"},"trusted":true},"execution_count":60,"outputs":[{"name":"stdout","text":"Missing values after cleaning:\nSeries([], dtype: int64)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Save the cleaned dataset\n#df2_cleaned.to_csv('/kaggle/input/datatask1/cleaned_dataset_test.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:13:48.882183Z","iopub.execute_input":"2024-09-15T16:13:48.882495Z","iopub.status.idle":"2024-09-15T16:13:48.886606Z","shell.execute_reply.started":"2024-09-15T16:13:48.882457Z","shell.execute_reply":"2024-09-15T16:13:48.885479Z"},"trusted":true},"execution_count":57,"outputs":[]},{"cell_type":"code","source":"df2_cleaned=pd.read_csv('/kaggle/working/cleaned_dataset.csv')\ndf2_cleaned.head().T","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:32.059985Z","iopub.execute_input":"2024-09-15T16:14:32.060892Z","iopub.status.idle":"2024-09-15T16:14:32.084130Z","shell.execute_reply.started":"2024-09-15T16:14:32.060847Z","shell.execute_reply":"2024-09-15T16:14:32.083250Z"},"trusted":true},"execution_count":61,"outputs":[{"execution_count":61,"output_type":"execute_result","data":{"text/plain":"                    0       1       2       3       4\nId                  1       3       5       7      11\nMSSubClass         60      60      60      20      20\nMSZoning           RL      RL      RL      RL      RL\nLotFrontage      65.0    68.0    84.0    75.0    70.0\nLotArea          8450   11250   14260   10084   11200\n...               ...     ...     ...     ...     ...\nMoSold              2       9      12       8       2\nYrSold           2008    2008    2008    2007    2008\nSaleType           WD      WD      WD      WD      WD\nSaleCondition  Normal  Normal  Normal  Normal  Normal\nSalePrice      208500  223500  250000  307000  129500\n\n[80 rows x 5 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Id</th>\n      <td>1</td>\n      <td>3</td>\n      <td>5</td>\n      <td>7</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>MSSubClass</th>\n      <td>60</td>\n      <td>60</td>\n      <td>60</td>\n      <td>20</td>\n      <td>20</td>\n    </tr>\n    <tr>\n      <th>MSZoning</th>\n      <td>RL</td>\n      <td>RL</td>\n      <td>RL</td>\n      <td>RL</td>\n      <td>RL</td>\n    </tr>\n    <tr>\n      <th>LotFrontage</th>\n      <td>65.0</td>\n      <td>68.0</td>\n      <td>84.0</td>\n      <td>75.0</td>\n      <td>70.0</td>\n    </tr>\n    <tr>\n      <th>LotArea</th>\n      <td>8450</td>\n      <td>11250</td>\n      <td>14260</td>\n      <td>10084</td>\n      <td>11200</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>MoSold</th>\n      <td>2</td>\n      <td>9</td>\n      <td>12</td>\n      <td>8</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>YrSold</th>\n      <td>2008</td>\n      <td>2008</td>\n      <td>2008</td>\n      <td>2007</td>\n      <td>2008</td>\n    </tr>\n    <tr>\n      <th>SaleType</th>\n      <td>WD</td>\n      <td>WD</td>\n      <td>WD</td>\n      <td>WD</td>\n      <td>WD</td>\n    </tr>\n    <tr>\n      <th>SaleCondition</th>\n      <td>Normal</td>\n      <td>Normal</td>\n      <td>Normal</td>\n      <td>Normal</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>SalePrice</th>\n      <td>208500</td>\n      <td>223500</td>\n      <td>250000</td>\n      <td>307000</td>\n      <td>129500</td>\n    </tr>\n  </tbody>\n</table>\n<p>80 rows × 5 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"\n\n# Check for missing values in the test dataset\nmissing_values_test = df2_cleaned.isnull().sum().sort_values(ascending=False)\n\nmissing_values_test.head(30)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:38.804149Z","iopub.execute_input":"2024-09-15T16:14:38.804504Z","iopub.status.idle":"2024-09-15T16:14:38.815453Z","shell.execute_reply.started":"2024-09-15T16:14:38.804471Z","shell.execute_reply":"2024-09-15T16:14:38.814413Z"},"trusted":true},"execution_count":62,"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"GarageCond       0\nPavedDrive       0\nWoodDeckSF       0\nOpenPorchSF      0\nEnclosedPorch    0\n3SsnPorch        0\nScreenPorch      0\nPoolArea         0\nLandContour      0\nUtilities        0\nLotConfig        0\nLandSlope        0\nNeighborhood     0\nCondition1       0\nCondition2       0\nBldgType         0\nHouseStyle       0\nOverallQual      0\nOverallCond      0\nYearBuilt        0\nYearRemodAdd     0\nRoofStyle        0\nRoofMatl         0\nExterior1st      0\nExterior2nd      0\nMasVnrType       0\nMasVnrArea       0\nExterQual        0\nExterCond        0\nFoundation       0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"# Drop irrelevant columns\nirrelevant_columns = [\n    'Id',  # If there's an ID column\n    'Alley',  # If not useful for the model\n    'PoolQC',  # Pool quality might not be useful\n    'Fence',  # Fence quality might not be predictive\n    'MiscFeature',  # Miscellaneous features often have little predictive power\n    'FireplaceQu',  # If `Fireplaces` is sufficient\n    'GarageYrBlt',  # If garage features are sufficient\n    '3SsnPorch',  # If not useful\n    'ScreenPorch',  # If not useful\n    'LowQualFinSF',  # If not useful\n    'EnclosedPorch'  # If not useful\n]\n\ndf2_cleaned = df2.drop(columns=irrelevant_columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:40.809322Z","iopub.execute_input":"2024-09-15T16:14:40.809713Z","iopub.status.idle":"2024-09-15T16:14:40.817283Z","shell.execute_reply.started":"2024-09-15T16:14:40.809676Z","shell.execute_reply":"2024-09-15T16:14:40.816078Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler\n\n# Updated list of categorical columns\ncategorical_columns = [\n    'MSSubClass', 'MSZoning', 'Street', 'LotShape', 'LandContour',\n    'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1',\n    'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n    'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'Heating',\n    'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional',\n    'Fireplaces', 'GarageType', 'GarageFinish', 'PavedDrive', \n     'SaleType', 'SaleCondition'\n]\n\n# Ensure all categorical columns are in the DataFrame\npresent_columns = [col for col in categorical_columns if col in df2_cleaned.columns]\nmissing_columns = [col for col in categorical_columns if col not in df2_cleaned.columns]\n\nif missing_columns:\n    print(f\"Missing columns: {missing_columns}\")\n\n# Convert YrSold to datetime\ndf2_cleaned['YrSold'] = pd.to_datetime(df2_cleaned['YrSold'], format='%Y').dt.year\n\n# Optional: Extract month and year if needed for other date columns\ndf2_cleaned['MoSold'] = df2_cleaned['MoSold'].astype(int)  # Convert MoSold to integer\n\n# Define the preprocessor with imputation for missing values and scaling for numerical features\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('cat', OneHotEncoder(handle_unknown='ignore', drop='first'), present_columns)\n    ],\n    remainder='passthrough'  # Keep other columns unchanged\n)\n\n# Display the first few rows of the updated DataFrame\ndf2_cleaned.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:45.524252Z","iopub.execute_input":"2024-09-15T16:14:45.525036Z","iopub.status.idle":"2024-09-15T16:14:45.555388Z","shell.execute_reply.started":"2024-09-15T16:14:45.524994Z","shell.execute_reply":"2024-09-15T16:14:45.554527Z"},"trusted":true},"execution_count":64,"outputs":[{"execution_count":64,"output_type":"execute_result","data":{"text/plain":"   MSSubClass MSZoning  LotFrontage  LotArea Street LotShape LandContour  \\\n0          20       RH         80.0    11622   Pave      Reg         Lvl   \n1          20       RL         81.0    14267   Pave      IR1         Lvl   \n2          60       RL         74.0    13830   Pave      IR1         Lvl   \n3          60       RL         78.0     9978   Pave      IR1         Lvl   \n4         120       RL         43.0     5005   Pave      IR1         HLS   \n\n  Utilities LotConfig LandSlope  ... GarageCond PavedDrive WoodDeckSF  \\\n0    AllPub    Inside       Gtl  ...         TA          Y        140   \n1    AllPub    Corner       Gtl  ...         TA          Y        393   \n2    AllPub    Inside       Gtl  ...         TA          Y        212   \n3    AllPub    Inside       Gtl  ...         TA          Y        360   \n4    AllPub    Inside       Gtl  ...         TA          Y          0   \n\n  OpenPorchSF PoolArea  MiscVal  MoSold  YrSold  SaleType SaleCondition  \n0           0        0        0       6    2010        WD        Normal  \n1          36        0    12500       6    2010        WD        Normal  \n2          34        0        0       3    2010        WD        Normal  \n3          36        0        0       6    2010        WD        Normal  \n4          82        0        0       1    2010        WD        Normal  \n\n[5 rows x 69 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>...</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20</td>\n      <td>RH</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>Pave</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>140</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>RL</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Corner</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>393</td>\n      <td>36</td>\n      <td>0</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>212</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>360</td>\n      <td>36</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>120</td>\n      <td>RL</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>Pave</td>\n      <td>IR1</td>\n      <td>HLS</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>Gtl</td>\n      <td>...</td>\n      <td>TA</td>\n      <td>Y</td>\n      <td>0</td>\n      <td>82</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 69 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df2_cleaned.info()","metadata":{"scrolled":true,"execution":{"iopub.status.busy":"2024-09-15T16:14:46.139734Z","iopub.execute_input":"2024-09-15T16:14:46.140634Z","iopub.status.idle":"2024-09-15T16:14:46.160388Z","shell.execute_reply.started":"2024-09-15T16:14:46.140593Z","shell.execute_reply":"2024-09-15T16:14:46.159546Z"},"trusted":true},"execution_count":65,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1459 entries, 0 to 1458\nData columns (total 69 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   MSSubClass     1459 non-null   int64  \n 1   MSZoning       1455 non-null   object \n 2   LotFrontage    1232 non-null   float64\n 3   LotArea        1459 non-null   int64  \n 4   Street         1459 non-null   object \n 5   LotShape       1459 non-null   object \n 6   LandContour    1459 non-null   object \n 7   Utilities      1457 non-null   object \n 8   LotConfig      1459 non-null   object \n 9   LandSlope      1459 non-null   object \n 10  Neighborhood   1459 non-null   object \n 11  Condition1     1459 non-null   object \n 12  Condition2     1459 non-null   object \n 13  BldgType       1459 non-null   object \n 14  HouseStyle     1459 non-null   object \n 15  OverallQual    1459 non-null   int64  \n 16  OverallCond    1459 non-null   int64  \n 17  YearBuilt      1459 non-null   int64  \n 18  YearRemodAdd   1459 non-null   int64  \n 19  RoofStyle      1459 non-null   object \n 20  RoofMatl       1459 non-null   object \n 21  Exterior1st    1458 non-null   object \n 22  Exterior2nd    1458 non-null   object \n 23  MasVnrType     565 non-null    object \n 24  MasVnrArea     1444 non-null   float64\n 25  ExterQual      1459 non-null   object \n 26  ExterCond      1459 non-null   object \n 27  Foundation     1459 non-null   object \n 28  BsmtQual       1415 non-null   object \n 29  BsmtCond       1414 non-null   object \n 30  BsmtExposure   1415 non-null   object \n 31  BsmtFinType1   1417 non-null   object \n 32  BsmtFinSF1     1458 non-null   float64\n 33  BsmtFinType2   1417 non-null   object \n 34  BsmtFinSF2     1458 non-null   float64\n 35  BsmtUnfSF      1458 non-null   float64\n 36  TotalBsmtSF    1458 non-null   float64\n 37  Heating        1459 non-null   object \n 38  HeatingQC      1459 non-null   object \n 39  CentralAir     1459 non-null   object \n 40  Electrical     1459 non-null   object \n 41  1stFlrSF       1459 non-null   int64  \n 42  2ndFlrSF       1459 non-null   int64  \n 43  GrLivArea      1459 non-null   int64  \n 44  BsmtFullBath   1457 non-null   float64\n 45  BsmtHalfBath   1457 non-null   float64\n 46  FullBath       1459 non-null   int64  \n 47  HalfBath       1459 non-null   int64  \n 48  BedroomAbvGr   1459 non-null   int64  \n 49  KitchenAbvGr   1459 non-null   int64  \n 50  KitchenQual    1458 non-null   object \n 51  TotRmsAbvGrd   1459 non-null   int64  \n 52  Functional     1457 non-null   object \n 53  Fireplaces     1459 non-null   int64  \n 54  GarageType     1383 non-null   object \n 55  GarageFinish   1381 non-null   object \n 56  GarageCars     1458 non-null   float64\n 57  GarageArea     1458 non-null   float64\n 58  GarageQual     1381 non-null   object \n 59  GarageCond     1381 non-null   object \n 60  PavedDrive     1459 non-null   object \n 61  WoodDeckSF     1459 non-null   int64  \n 62  OpenPorchSF    1459 non-null   int64  \n 63  PoolArea       1459 non-null   int64  \n 64  MiscVal        1459 non-null   int64  \n 65  MoSold         1459 non-null   int64  \n 66  YrSold         1459 non-null   int32  \n 67  SaleType       1458 non-null   object \n 68  SaleCondition  1459 non-null   object \ndtypes: float64(10), int32(1), int64(20), object(38)\nmemory usage: 780.9+ KB\n","output_type":"stream"}]},{"cell_type":"code","source":"# List all columns with dtype 'object'\nremaining_object_columns = df2_cleaned.select_dtypes(include=['object']).columns\n\n# Display remaining object columns\nprint(\"Remaining object columns:\", remaining_object_columns)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:47.119473Z","iopub.execute_input":"2024-09-15T16:14:47.119878Z","iopub.status.idle":"2024-09-15T16:14:47.127719Z","shell.execute_reply.started":"2024-09-15T16:14:47.119844Z","shell.execute_reply":"2024-09-15T16:14:47.126666Z"},"trusted":true},"execution_count":66,"outputs":[{"name":"stdout","text":"Remaining object columns: Index(['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n       'PavedDrive', 'SaleType', 'SaleCondition'],\n      dtype='object')\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\n# Initialize LabelEncoder\nlabel_encoders = {}\n\n# Apply LabelEncoder to each object column\nfor col in remaining_object_columns:\n    le = LabelEncoder()\n    df2_cleaned[col] = le.fit_transform(df2_cleaned[col].astype(str))\n    label_encoders[col] = le\n\ndf2_cleaned.head()\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:48.089747Z","iopub.execute_input":"2024-09-15T16:14:48.090162Z","iopub.status.idle":"2024-09-15T16:14:48.150116Z","shell.execute_reply.started":"2024-09-15T16:14:48.090121Z","shell.execute_reply":"2024-09-15T16:14:48.149179Z"},"trusted":true},"execution_count":67,"outputs":[{"execution_count":67,"output_type":"execute_result","data":{"text/plain":"   MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  LandContour  \\\n0          20         2         80.0    11622       1         3            3   \n1          20         3         81.0    14267       1         0            3   \n2          60         3         74.0    13830       1         0            3   \n3          60         3         78.0     9978       1         0            3   \n4         120         3         43.0     5005       1         0            1   \n\n   Utilities  LotConfig  LandSlope  ...  GarageCond  PavedDrive  WoodDeckSF  \\\n0          0          4          0  ...           4           2         140   \n1          0          0          0  ...           4           2         393   \n2          0          4          0  ...           4           2         212   \n3          0          4          0  ...           4           2         360   \n4          0          4          0  ...           4           2           0   \n\n   OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n0            0         0        0       6    2010         8              4  \n1           36         0    12500       6    2010         8              4  \n2           34         0        0       3    2010         8              4  \n3           36         0        0       6    2010         8              4  \n4           82         0        0       1    2010         8              4  \n\n[5 rows x 69 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>...</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20</td>\n      <td>2</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>140</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>3</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>393</td>\n      <td>36</td>\n      <td>0</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>3</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>212</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60</td>\n      <td>3</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>360</td>\n      <td>36</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>120</td>\n      <td>3</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>82</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 69 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df2_cleaned.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:49.299249Z","iopub.execute_input":"2024-09-15T16:14:49.299665Z","iopub.status.idle":"2024-09-15T16:14:49.306050Z","shell.execute_reply.started":"2024-09-15T16:14:49.299624Z","shell.execute_reply":"2024-09-15T16:14:49.305110Z"},"trusted":true},"execution_count":68,"outputs":[{"execution_count":68,"output_type":"execute_result","data":{"text/plain":"(1459, 69)"},"metadata":{}}]},{"cell_type":"code","source":"\nX2 = df2_cleaned\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:23:29.617121Z","iopub.execute_input":"2024-09-15T16:23:29.618016Z","iopub.status.idle":"2024-09-15T16:23:29.622028Z","shell.execute_reply.started":"2024-09-15T16:23:29.617972Z","shell.execute_reply":"2024-09-15T16:23:29.621017Z"},"trusted":true},"execution_count":75,"outputs":[]},{"cell_type":"code","source":"X2.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:14:50.989167Z","iopub.execute_input":"2024-09-15T16:14:50.989855Z","iopub.status.idle":"2024-09-15T16:14:51.012495Z","shell.execute_reply.started":"2024-09-15T16:14:50.989812Z","shell.execute_reply":"2024-09-15T16:14:51.011570Z"},"trusted":true},"execution_count":70,"outputs":[{"execution_count":70,"output_type":"execute_result","data":{"text/plain":"   MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  LandContour  \\\n0          20         2         80.0    11622       1         3            3   \n1          20         3         81.0    14267       1         0            3   \n2          60         3         74.0    13830       1         0            3   \n3          60         3         78.0     9978       1         0            3   \n4         120         3         43.0     5005       1         0            1   \n\n   Utilities  LotConfig  LandSlope  ...  GarageCond  PavedDrive  WoodDeckSF  \\\n0          0          4          0  ...           4           2         140   \n1          0          0          0  ...           4           2         393   \n2          0          4          0  ...           4           2         212   \n3          0          4          0  ...           4           2         360   \n4          0          4          0  ...           4           2           0   \n\n   OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n0            0         0        0       6    2010         8              4  \n1           36         0    12500       6    2010         8              4  \n2           34         0        0       3    2010         8              4  \n3           36         0        0       6    2010         8              4  \n4           82         0        0       1    2010         8              4  \n\n[5 rows x 69 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>LandSlope</th>\n      <th>...</th>\n      <th>GarageCond</th>\n      <th>PavedDrive</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20</td>\n      <td>2</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>1</td>\n      <td>3</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>140</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>3</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>393</td>\n      <td>36</td>\n      <td>0</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>3</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>212</td>\n      <td>34</td>\n      <td>0</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>60</td>\n      <td>3</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>360</td>\n      <td>36</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>120</td>\n      <td>3</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>4</td>\n      <td>0</td>\n      <td>...</td>\n      <td>4</td>\n      <td>2</td>\n      <td>0</td>\n      <td>82</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>8</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 69 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X2.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:20:56.640045Z","iopub.execute_input":"2024-09-15T16:20:56.640567Z","iopub.status.idle":"2024-09-15T16:20:56.647038Z","shell.execute_reply.started":"2024-09-15T16:20:56.640518Z","shell.execute_reply":"2024-09-15T16:20:56.646008Z"},"trusted":true},"execution_count":72,"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"(1459, 69)"},"metadata":{}}]},{"cell_type":"code","source":"import pandas as pd\n\n# Define the best model pipeline (already trained in your previous code)\nbest_model_pipeline = Pipeline([\n    ('preprocessor', preprocessor),\n    ('model', XGBRegressor(n_estimators=100, random_state=42))\n])\n\n# Refit the best model on the entire training dataset\nbest_model_pipeline.fit(X, y)\n\n# Prepare test data for prediction\nX2 = df2_cleaned  # Assuming df2_cleaned is the cleaned test dataset\n\n# Apply preprocessing to the test data\nX2_preprocessed = preprocessor.transform(X2)\n\n# Generate predictions using the best model\ny_pred = best_model_pipeline.predict(X2_preprocessed)\n\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:30:28.816556Z","iopub.execute_input":"2024-09-15T16:30:28.817475Z","iopub.status.idle":"2024-09-15T16:30:29.080485Z","shell.execute_reply.started":"2024-09-15T16:30:28.817434Z","shell.execute_reply":"2024-09-15T16:30:29.079765Z"},"trusted":true},"execution_count":79,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but SimpleImputer was fitted with feature names\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"y_pred","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:36:20.538975Z","iopub.execute_input":"2024-09-15T16:36:20.539393Z","iopub.status.idle":"2024-09-15T16:36:20.546286Z","shell.execute_reply.started":"2024-09-15T16:36:20.539354Z","shell.execute_reply":"2024-09-15T16:36:20.545336Z"},"trusted":true},"execution_count":94,"outputs":[{"execution_count":94,"output_type":"execute_result","data":{"text/plain":"array([62230.508, 62431.562, 62400.824, ..., 61608.18 , 48118.984,\n       62400.824], dtype=float32)"},"metadata":{}}]},{"cell_type":"code","source":"y_pred.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:30:32.671818Z","iopub.execute_input":"2024-09-15T16:30:32.672750Z","iopub.status.idle":"2024-09-15T16:30:32.678887Z","shell.execute_reply.started":"2024-09-15T16:30:32.672707Z","shell.execute_reply":"2024-09-15T16:30:32.677835Z"},"trusted":true},"execution_count":80,"outputs":[{"execution_count":80,"output_type":"execute_result","data":{"text/plain":"(1459,)"},"metadata":{}}]},{"cell_type":"code","source":"submission_df = pd.DataFrame({\n    'Id': test_df['Id'],  # Replace with the actual test IDs\n    'SalePrice': y_pred\n})\n\n# Save the DataFrame to a CSV file\nsubmission_file = '/kaggle/working/submission2.csv'\nsubmission_df.to_csv(submission_file, index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:34:26.599111Z","iopub.execute_input":"2024-09-15T16:34:26.600124Z","iopub.status.idle":"2024-09-15T16:34:26.610326Z","shell.execute_reply.started":"2024-09-15T16:34:26.600069Z","shell.execute_reply":"2024-09-15T16:34:26.609364Z"},"trusted":true},"execution_count":89,"outputs":[]},{"cell_type":"code","source":"submission_2=pd.read_csv('/kaggle/working/submission2.csv')\nsubmission_2.head(10)","metadata":{"execution":{"iopub.status.busy":"2024-09-15T16:35:30.965019Z","iopub.execute_input":"2024-09-15T16:35:30.966046Z","iopub.status.idle":"2024-09-15T16:35:30.979364Z","shell.execute_reply.started":"2024-09-15T16:35:30.966000Z","shell.execute_reply":"2024-09-15T16:35:30.978536Z"},"trusted":true},"execution_count":92,"outputs":[{"execution_count":92,"output_type":"execute_result","data":{"text/plain":"     Id  SalePrice\n0  1461  62230.508\n1  1462  62431.562\n2  1463  62400.824\n3  1464  62400.824\n4  1465  62040.363\n5  1466  53953.880\n6  1467  61580.805\n7  1468  53953.880\n8  1469  61781.860\n9  1470  61611.543","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1461</td>\n      <td>62230.508</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1462</td>\n      <td>62431.562</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1463</td>\n      <td>62400.824</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1464</td>\n      <td>62400.824</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1465</td>\n      <td>62040.363</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1466</td>\n      <td>53953.880</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1467</td>\n      <td>61580.805</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>1468</td>\n      <td>53953.880</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1469</td>\n      <td>61781.860</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1470</td>\n      <td>61611.543</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}