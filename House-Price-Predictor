{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c46021c3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:07.275224Z",
     "iopub.status.busy": "2024-09-15T17:14:07.274217Z",
     "iopub.status.idle": "2024-09-15T17:14:09.349538Z",
     "shell.execute_reply": "2024-09-15T17:14:09.348434Z"
    },
    "papermill": {
     "duration": 2.096773,
     "end_time": "2024-09-15T17:14:09.352059",
     "exception": false,
     "start_time": "2024-09-15T17:14:07.255286",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import sklearn\n",
    "import pandas as pd\n",
    "\n",
    "# Load the train and test datasets\n",
    "train_df = pd.read_csv('/kaggle/input/datatask1/train.csv')\n",
    "test_df = pd.read_csv('/kaggle/input/datatask1/test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7ce47eb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:09.389638Z",
     "iopub.status.busy": "2024-09-15T17:14:09.389004Z",
     "iopub.status.idle": "2024-09-15T17:14:09.443114Z",
     "shell.execute_reply": "2024-09-15T17:14:09.442158Z"
    },
    "papermill": {
     "duration": 0.075675,
     "end_time": "2024-09-15T17:14:09.446873",
     "exception": false,
     "start_time": "2024-09-15T17:14:09.371198",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 81 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1460 non-null   int64  \n",
      " 1   MSSubClass     1460 non-null   int64  \n",
      " 2   MSZoning       1460 non-null   object \n",
      " 3   LotFrontage    1201 non-null   float64\n",
      " 4   LotArea        1460 non-null   int64  \n",
      " 5   Street         1460 non-null   object \n",
      " 6   Alley          91 non-null     object \n",
      " 7   LotShape       1460 non-null   object \n",
      " 8   LandContour    1460 non-null   object \n",
      " 9   Utilities      1460 non-null   object \n",
      " 10  LotConfig      1460 non-null   object \n",
      " 11  LandSlope      1460 non-null   object \n",
      " 12  Neighborhood   1460 non-null   object \n",
      " 13  Condition1     1460 non-null   object \n",
      " 14  Condition2     1460 non-null   object \n",
      " 15  BldgType       1460 non-null   object \n",
      " 16  HouseStyle     1460 non-null   object \n",
      " 17  OverallQual    1460 non-null   int64  \n",
      " 18  OverallCond    1460 non-null   int64  \n",
      " 19  YearBuilt      1460 non-null   int64  \n",
      " 20  YearRemodAdd   1460 non-null   int64  \n",
      " 21  RoofStyle      1460 non-null   object \n",
      " 22  RoofMatl       1460 non-null   object \n",
      " 23  Exterior1st    1460 non-null   object \n",
      " 24  Exterior2nd    1460 non-null   object \n",
      " 25  MasVnrType     588 non-null    object \n",
      " 26  MasVnrArea     1452 non-null   float64\n",
      " 27  ExterQual      1460 non-null   object \n",
      " 28  ExterCond      1460 non-null   object \n",
      " 29  Foundation     1460 non-null   object \n",
      " 30  BsmtQual       1423 non-null   object \n",
      " 31  BsmtCond       1423 non-null   object \n",
      " 32  BsmtExposure   1422 non-null   object \n",
      " 33  BsmtFinType1   1423 non-null   object \n",
      " 34  BsmtFinSF1     1460 non-null   int64  \n",
      " 35  BsmtFinType2   1422 non-null   object \n",
      " 36  BsmtFinSF2     1460 non-null   int64  \n",
      " 37  BsmtUnfSF      1460 non-null   int64  \n",
      " 38  TotalBsmtSF    1460 non-null   int64  \n",
      " 39  Heating        1460 non-null   object \n",
      " 40  HeatingQC      1460 non-null   object \n",
      " 41  CentralAir     1460 non-null   object \n",
      " 42  Electrical     1459 non-null   object \n",
      " 43  1stFlrSF       1460 non-null   int64  \n",
      " 44  2ndFlrSF       1460 non-null   int64  \n",
      " 45  LowQualFinSF   1460 non-null   int64  \n",
      " 46  GrLivArea      1460 non-null   int64  \n",
      " 47  BsmtFullBath   1460 non-null   int64  \n",
      " 48  BsmtHalfBath   1460 non-null   int64  \n",
      " 49  FullBath       1460 non-null   int64  \n",
      " 50  HalfBath       1460 non-null   int64  \n",
      " 51  BedroomAbvGr   1460 non-null   int64  \n",
      " 52  KitchenAbvGr   1460 non-null   int64  \n",
      " 53  KitchenQual    1460 non-null   object \n",
      " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 55  Functional     1460 non-null   object \n",
      " 56  Fireplaces     1460 non-null   int64  \n",
      " 57  FireplaceQu    770 non-null    object \n",
      " 58  GarageType     1379 non-null   object \n",
      " 59  GarageYrBlt    1379 non-null   float64\n",
      " 60  GarageFinish   1379 non-null   object \n",
      " 61  GarageCars     1460 non-null   int64  \n",
      " 62  GarageArea     1460 non-null   int64  \n",
      " 63  GarageQual     1379 non-null   object \n",
      " 64  GarageCond     1379 non-null   object \n",
      " 65  PavedDrive     1460 non-null   object \n",
      " 66  WoodDeckSF     1460 non-null   int64  \n",
      " 67  OpenPorchSF    1460 non-null   int64  \n",
      " 68  EnclosedPorch  1460 non-null   int64  \n",
      " 69  3SsnPorch      1460 non-null   int64  \n",
      " 70  ScreenPorch    1460 non-null   int64  \n",
      " 71  PoolArea       1460 non-null   int64  \n",
      " 72  PoolQC         7 non-null      object \n",
      " 73  Fence          281 non-null    object \n",
      " 74  MiscFeature    54 non-null     object \n",
      " 75  MiscVal        1460 non-null   int64  \n",
      " 76  MoSold         1460 non-null   int64  \n",
      " 77  YrSold         1460 non-null   int64  \n",
      " 78  SaleType       1460 non-null   object \n",
      " 79  SaleCondition  1460 non-null   object \n",
      " 80  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(3), int64(35), object(43)\n",
      "memory usage: 924.0+ KB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1459 entries, 0 to 1458\n",
      "Data columns (total 80 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1459 non-null   int64  \n",
      " 1   MSSubClass     1459 non-null   int64  \n",
      " 2   MSZoning       1455 non-null   object \n",
      " 3   LotFrontage    1232 non-null   float64\n",
      " 4   LotArea        1459 non-null   int64  \n",
      " 5   Street         1459 non-null   object \n",
      " 6   Alley          107 non-null    object \n",
      " 7   LotShape       1459 non-null   object \n",
      " 8   LandContour    1459 non-null   object \n",
      " 9   Utilities      1457 non-null   object \n",
      " 10  LotConfig      1459 non-null   object \n",
      " 11  LandSlope      1459 non-null   object \n",
      " 12  Neighborhood   1459 non-null   object \n",
      " 13  Condition1     1459 non-null   object \n",
      " 14  Condition2     1459 non-null   object \n",
      " 15  BldgType       1459 non-null   object \n",
      " 16  HouseStyle     1459 non-null   object \n",
      " 17  OverallQual    1459 non-null   int64  \n",
      " 18  OverallCond    1459 non-null   int64  \n",
      " 19  YearBuilt      1459 non-null   int64  \n",
      " 20  YearRemodAdd   1459 non-null   int64  \n",
      " 21  RoofStyle      1459 non-null   object \n",
      " 22  RoofMatl       1459 non-null   object \n",
      " 23  Exterior1st    1458 non-null   object \n",
      " 24  Exterior2nd    1458 non-null   object \n",
      " 25  MasVnrType     565 non-null    object \n",
      " 26  MasVnrArea     1444 non-null   float64\n",
      " 27  ExterQual      1459 non-null   object \n",
      " 28  ExterCond      1459 non-null   object \n",
      " 29  Foundation     1459 non-null   object \n",
      " 30  BsmtQual       1415 non-null   object \n",
      " 31  BsmtCond       1414 non-null   object \n",
      " 32  BsmtExposure   1415 non-null   object \n",
      " 33  BsmtFinType1   1417 non-null   object \n",
      " 34  BsmtFinSF1     1458 non-null   float64\n",
      " 35  BsmtFinType2   1417 non-null   object \n",
      " 36  BsmtFinSF2     1458 non-null   float64\n",
      " 37  BsmtUnfSF      1458 non-null   float64\n",
      " 38  TotalBsmtSF    1458 non-null   float64\n",
      " 39  Heating        1459 non-null   object \n",
      " 40  HeatingQC      1459 non-null   object \n",
      " 41  CentralAir     1459 non-null   object \n",
      " 42  Electrical     1459 non-null   object \n",
      " 43  1stFlrSF       1459 non-null   int64  \n",
      " 44  2ndFlrSF       1459 non-null   int64  \n",
      " 45  LowQualFinSF   1459 non-null   int64  \n",
      " 46  GrLivArea      1459 non-null   int64  \n",
      " 47  BsmtFullBath   1457 non-null   float64\n",
      " 48  BsmtHalfBath   1457 non-null   float64\n",
      " 49  FullBath       1459 non-null   int64  \n",
      " 50  HalfBath       1459 non-null   int64  \n",
      " 51  BedroomAbvGr   1459 non-null   int64  \n",
      " 52  KitchenAbvGr   1459 non-null   int64  \n",
      " 53  KitchenQual    1458 non-null   object \n",
      " 54  TotRmsAbvGrd   1459 non-null   int64  \n",
      " 55  Functional     1457 non-null   object \n",
      " 56  Fireplaces     1459 non-null   int64  \n",
      " 57  FireplaceQu    729 non-null    object \n",
      " 58  GarageType     1383 non-null   object \n",
      " 59  GarageYrBlt    1381 non-null   float64\n",
      " 60  GarageFinish   1381 non-null   object \n",
      " 61  GarageCars     1458 non-null   float64\n",
      " 62  GarageArea     1458 non-null   float64\n",
      " 63  GarageQual     1381 non-null   object \n",
      " 64  GarageCond     1381 non-null   object \n",
      " 65  PavedDrive     1459 non-null   object \n",
      " 66  WoodDeckSF     1459 non-null   int64  \n",
      " 67  OpenPorchSF    1459 non-null   int64  \n",
      " 68  EnclosedPorch  1459 non-null   int64  \n",
      " 69  3SsnPorch      1459 non-null   int64  \n",
      " 70  ScreenPorch    1459 non-null   int64  \n",
      " 71  PoolArea       1459 non-null   int64  \n",
      " 72  PoolQC         3 non-null      object \n",
      " 73  Fence          290 non-null    object \n",
      " 74  MiscFeature    51 non-null     object \n",
      " 75  MiscVal        1459 non-null   int64  \n",
      " 76  MoSold         1459 non-null   int64  \n",
      " 77  YrSold         1459 non-null   int64  \n",
      " 78  SaleType       1458 non-null   object \n",
      " 79  SaleCondition  1459 non-null   object \n",
      "dtypes: float64(11), int64(26), object(43)\n",
      "memory usage: 912.0+ KB\n"
     ]
    }
   ],
   "source": [
    "# Display basic information about the datasets to understand their structure\n",
    "train_df_info = train_df.info()\n",
    "test_df_info = test_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "619e9bc4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:09.483167Z",
     "iopub.status.busy": "2024-09-15T17:14:09.482801Z",
     "iopub.status.idle": "2024-09-15T17:14:09.512472Z",
     "shell.execute_reply": "2024-09-15T17:14:09.511585Z"
    },
    "papermill": {
     "duration": 0.049313,
     "end_time": "2024-09-15T17:14:09.514511",
     "exception": false,
     "start_time": "2024-09-15T17:14:09.465198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 81 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0   1          60       RL         65.0     8450   Pave   NaN      Reg   \n",
       "1   2          20       RL         80.0     9600   Pave   NaN      Reg   \n",
       "2   3          60       RL         68.0    11250   Pave   NaN      IR1   \n",
       "3   4          70       RL         60.0     9550   Pave   NaN      IR1   \n",
       "4   5          60       RL         84.0    14260   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... PoolArea PoolQC Fence MiscFeature MiscVal MoSold  \\\n",
       "0         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "1         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      5   \n",
       "2         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      9   \n",
       "3         Lvl    AllPub  ...        0    NaN   NaN         NaN       0      2   \n",
       "4         Lvl    AllPub  ...        0    NaN   NaN         NaN       0     12   \n",
       "\n",
       "  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0   2008        WD         Normal     208500  \n",
       "1   2007        WD         Normal     181500  \n",
       "2   2008        WD         Normal     223500  \n",
       "3   2006        WD        Abnorml     140000  \n",
       "4   2008        WD         Normal     250000  \n",
       "\n",
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df_head = train_df.head()\n",
    "test_df_head = test_df.head()\n",
    "\n",
    "train_df_head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0181c9f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:09.549625Z",
     "iopub.status.busy": "2024-09-15T17:14:09.549313Z",
     "iopub.status.idle": "2024-09-15T17:14:09.570246Z",
     "shell.execute_reply": "2024-09-15T17:14:09.569360Z"
    },
    "papermill": {
     "duration": 0.040605,
     "end_time": "2024-09-15T17:14:09.572142",
     "exception": false,
     "start_time": "2024-09-15T17:14:09.531537",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>20</td>\n",
       "      <td>RH</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Gar2</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9978</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>120</td>\n",
       "      <td>RL</td>\n",
       "      <td>43.0</td>\n",
       "      <td>5005</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>HLS</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>144</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n",
       "1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n",
       "2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n",
       "3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n",
       "4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n",
       "0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n",
       "1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n",
       "2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n",
       "3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n",
       "4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n",
       "\n",
       "  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n",
       "0       0      6    2010        WD         Normal  \n",
       "1   12500      6    2010        WD         Normal  \n",
       "2       0      3    2010        WD         Normal  \n",
       "3       0      6    2010        WD         Normal  \n",
       "4       0      1    2010        WD         Normal  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9de6f723",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:09.608805Z",
     "iopub.status.busy": "2024-09-15T17:14:09.608453Z",
     "iopub.status.idle": "2024-09-15T17:14:09.629831Z",
     "shell.execute_reply": "2024-09-15T17:14:09.628988Z"
    },
    "papermill": {
     "duration": 0.042227,
     "end_time": "2024-09-15T17:14:09.631904",
     "exception": false,
     "start_time": "2024-09-15T17:14:09.589677",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PoolQC          1453\n",
       "MiscFeature     1406\n",
       "Alley           1369\n",
       "Fence           1179\n",
       "MasVnrType       872\n",
       "FireplaceQu      690\n",
       "LotFrontage      259\n",
       "GarageQual        81\n",
       "GarageFinish      81\n",
       "GarageYrBlt       81\n",
       "GarageType        81\n",
       "GarageCond        81\n",
       "BsmtExposure      38\n",
       "BsmtFinType2      38\n",
       "BsmtFinType1      37\n",
       "BsmtQual          37\n",
       "BsmtCond          37\n",
       "MasVnrArea         8\n",
       "Electrical         1\n",
       "1stFlrSF           0\n",
       "2ndFlrSF           0\n",
       "LowQualFinSF       0\n",
       "GrLivArea          0\n",
       "BsmtFullBath       0\n",
       "BsmtHalfBath       0\n",
       "FullBath           0\n",
       "HalfBath           0\n",
       "BedroomAbvGr       0\n",
       "KitchenAbvGr       0\n",
       "KitchenQual        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Check for missing values in the train dataset\n",
    "missing_values_train = train_df.isnull().sum().sort_values(ascending=False)\n",
    "\n",
    "# Check for missing values in the test dataset\n",
    "missing_values_test = test_df.isnull().sum().sort_values(ascending=False)\n",
    "\n",
    "missing_values_train.head(30)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "53c4d6fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:09.668902Z",
     "iopub.status.busy": "2024-09-15T17:14:09.668624Z",
     "iopub.status.idle": "2024-09-15T17:14:09.675927Z",
     "shell.execute_reply": "2024-09-15T17:14:09.674940Z"
    },
    "papermill": {
     "duration": 0.027235,
     "end_time": "2024-09-15T17:14:09.677849",
     "exception": false,
     "start_time": "2024-09-15T17:14:09.650614",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LotShape\n",
       "Reg    925\n",
       "IR1    484\n",
       "IR2     41\n",
       "IR3     10\n",
       "Name: count, dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.LotShape.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c29332f5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:09.714196Z",
     "iopub.status.busy": "2024-09-15T17:14:09.713892Z",
     "iopub.status.idle": "2024-09-15T17:14:09.719521Z",
     "shell.execute_reply": "2024-09-15T17:14:09.718575Z"
    },
    "papermill": {
     "duration": 0.026013,
     "end_time": "2024-09-15T17:14:09.721349",
     "exception": false,
     "start_time": "2024-09-15T17:14:09.695336",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1460, 81)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "5cb5018e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:09.757053Z",
     "iopub.status.busy": "2024-09-15T17:14:09.756761Z",
     "iopub.status.idle": "2024-09-15T17:14:09.834134Z",
     "shell.execute_reply": "2024-09-15T17:14:09.833227Z"
    },
    "papermill": {
     "duration": 0.098158,
     "end_time": "2024-09-15T17:14:09.836902",
     "exception": false,
     "start_time": "2024-09-15T17:14:09.738744",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Id\n",
      "1460    1\n",
      "1       1\n",
      "2       1\n",
      "3       1\n",
      "4       1\n",
      "       ..\n",
      "24      1\n",
      "25      1\n",
      "26      1\n",
      "27      1\n",
      "28      1\n",
      "Name: count, Length: 1460, dtype: int64\n",
      "--------------------\n",
      "MSSubClass\n",
      "20     536\n",
      "60     299\n",
      "50     144\n",
      "120     87\n",
      "30      69\n",
      "160     63\n",
      "70      60\n",
      "80      58\n",
      "90      52\n",
      "190     30\n",
      "85      20\n",
      "75      16\n",
      "45      12\n",
      "180     10\n",
      "40       4\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MSZoning\n",
      "RL         1151\n",
      "RM          218\n",
      "FV           65\n",
      "RH           16\n",
      "C (all)      10\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LotFrontage\n",
      "60.0     143\n",
      "70.0      70\n",
      "80.0      69\n",
      "50.0      57\n",
      "75.0      53\n",
      "        ... \n",
      "33.0       1\n",
      "182.0      1\n",
      "38.0       1\n",
      "137.0      1\n",
      "46.0       1\n",
      "Name: count, Length: 110, dtype: int64\n",
      "--------------------\n",
      "LotArea\n",
      "7200     25\n",
      "9600     24\n",
      "6000     17\n",
      "10800    14\n",
      "8400     14\n",
      "         ..\n",
      "1953      1\n",
      "9735      1\n",
      "8212      1\n",
      "12925     1\n",
      "25339     1\n",
      "Name: count, Length: 1073, dtype: int64\n",
      "--------------------\n",
      "Street\n",
      "Pave    1454\n",
      "Grvl       6\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Alley\n",
      "Grvl    50\n",
      "Pave    41\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LotShape\n",
      "Reg    925\n",
      "IR1    484\n",
      "IR2     41\n",
      "IR3     10\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LandContour\n",
      "Lvl    1311\n",
      "Bnk      63\n",
      "HLS      50\n",
      "Low      36\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Utilities\n",
      "AllPub    1459\n",
      "NoSeWa       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LotConfig\n",
      "Inside     1052\n",
      "Corner      263\n",
      "CulDSac      94\n",
      "FR2          47\n",
      "FR3           4\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LandSlope\n",
      "Gtl    1382\n",
      "Mod      65\n",
      "Sev      13\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Neighborhood\n",
      "NAmes      225\n",
      "CollgCr    150\n",
      "OldTown    113\n",
      "Edwards    100\n",
      "Somerst     86\n",
      "Gilbert     79\n",
      "NridgHt     77\n",
      "Sawyer      74\n",
      "NWAmes      73\n",
      "SawyerW     59\n",
      "BrkSide     58\n",
      "Crawfor     51\n",
      "Mitchel     49\n",
      "NoRidge     41\n",
      "Timber      38\n",
      "IDOTRR      37\n",
      "ClearCr     28\n",
      "SWISU       25\n",
      "StoneBr     25\n",
      "Blmngtn     17\n",
      "MeadowV     17\n",
      "BrDale      16\n",
      "Veenker     11\n",
      "NPkVill      9\n",
      "Blueste      2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Condition1\n",
      "Norm      1260\n",
      "Feedr       81\n",
      "Artery      48\n",
      "RRAn        26\n",
      "PosN        19\n",
      "RRAe        11\n",
      "PosA         8\n",
      "RRNn         5\n",
      "RRNe         2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Condition2\n",
      "Norm      1445\n",
      "Feedr        6\n",
      "Artery       2\n",
      "RRNn         2\n",
      "PosN         2\n",
      "PosA         1\n",
      "RRAn         1\n",
      "RRAe         1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BldgType\n",
      "1Fam      1220\n",
      "TwnhsE     114\n",
      "Duplex      52\n",
      "Twnhs       43\n",
      "2fmCon      31\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "HouseStyle\n",
      "1Story    726\n",
      "2Story    445\n",
      "1.5Fin    154\n",
      "SLvl       65\n",
      "SFoyer     37\n",
      "1.5Unf     14\n",
      "2.5Unf     11\n",
      "2.5Fin      8\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "OverallQual\n",
      "5     397\n",
      "6     374\n",
      "7     319\n",
      "8     168\n",
      "4     116\n",
      "9      43\n",
      "3      20\n",
      "10     18\n",
      "2       3\n",
      "1       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "OverallCond\n",
      "5    821\n",
      "6    252\n",
      "7    205\n",
      "8     72\n",
      "4     57\n",
      "3     25\n",
      "9     22\n",
      "2      5\n",
      "1      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "YearBuilt\n",
      "2006    67\n",
      "2005    64\n",
      "2004    54\n",
      "2007    49\n",
      "2003    45\n",
      "        ..\n",
      "1875     1\n",
      "1913     1\n",
      "2010     1\n",
      "1893     1\n",
      "1906     1\n",
      "Name: count, Length: 112, dtype: int64\n",
      "--------------------\n",
      "YearRemodAdd\n",
      "1950    178\n",
      "2006     97\n",
      "2007     76\n",
      "2005     73\n",
      "2004     62\n",
      "       ... \n",
      "2010      6\n",
      "1983      5\n",
      "1952      5\n",
      "1986      5\n",
      "1951      4\n",
      "Name: count, Length: 61, dtype: int64\n",
      "--------------------\n",
      "RoofStyle\n",
      "Gable      1141\n",
      "Hip         286\n",
      "Flat         13\n",
      "Gambrel      11\n",
      "Mansard       7\n",
      "Shed          2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "RoofMatl\n",
      "CompShg    1434\n",
      "Tar&Grv      11\n",
      "WdShngl       6\n",
      "WdShake       5\n",
      "Metal         1\n",
      "Membran       1\n",
      "Roll          1\n",
      "ClyTile       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Exterior1st\n",
      "VinylSd    515\n",
      "HdBoard    222\n",
      "MetalSd    220\n",
      "Wd Sdng    206\n",
      "Plywood    108\n",
      "CemntBd     61\n",
      "BrkFace     50\n",
      "WdShing     26\n",
      "Stucco      25\n",
      "AsbShng     20\n",
      "BrkComm      2\n",
      "Stone        2\n",
      "AsphShn      1\n",
      "ImStucc      1\n",
      "CBlock       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Exterior2nd\n",
      "VinylSd    504\n",
      "MetalSd    214\n",
      "HdBoard    207\n",
      "Wd Sdng    197\n",
      "Plywood    142\n",
      "CmentBd     60\n",
      "Wd Shng     38\n",
      "Stucco      26\n",
      "BrkFace     25\n",
      "AsbShng     20\n",
      "ImStucc     10\n",
      "Brk Cmn      7\n",
      "Stone        5\n",
      "AsphShn      3\n",
      "Other        1\n",
      "CBlock       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MasVnrType\n",
      "BrkFace    445\n",
      "Stone      128\n",
      "BrkCmn      15\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MasVnrArea\n",
      "0.0      861\n",
      "180.0      8\n",
      "108.0      8\n",
      "72.0       8\n",
      "16.0       7\n",
      "        ... \n",
      "567.0      1\n",
      "337.0      1\n",
      "51.0       1\n",
      "234.0      1\n",
      "63.0       1\n",
      "Name: count, Length: 327, dtype: int64\n",
      "--------------------\n",
      "ExterQual\n",
      "TA    906\n",
      "Gd    488\n",
      "Ex     52\n",
      "Fa     14\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "ExterCond\n",
      "TA    1282\n",
      "Gd     146\n",
      "Fa      28\n",
      "Ex       3\n",
      "Po       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Foundation\n",
      "PConc     647\n",
      "CBlock    634\n",
      "BrkTil    146\n",
      "Slab       24\n",
      "Stone       6\n",
      "Wood        3\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtQual\n",
      "TA    649\n",
      "Gd    618\n",
      "Ex    121\n",
      "Fa     35\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtCond\n",
      "TA    1311\n",
      "Gd      65\n",
      "Fa      45\n",
      "Po       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtExposure\n",
      "No    953\n",
      "Av    221\n",
      "Gd    134\n",
      "Mn    114\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtFinType1\n",
      "Unf    430\n",
      "GLQ    418\n",
      "ALQ    220\n",
      "BLQ    148\n",
      "Rec    133\n",
      "LwQ     74\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtFinSF1\n",
      "0      467\n",
      "24      12\n",
      "16       9\n",
      "20       5\n",
      "936      5\n",
      "      ... \n",
      "774      1\n",
      "35       1\n",
      "984      1\n",
      "668      1\n",
      "459      1\n",
      "Name: count, Length: 637, dtype: int64\n",
      "--------------------\n",
      "BsmtFinType2\n",
      "Unf    1256\n",
      "Rec      54\n",
      "LwQ      46\n",
      "BLQ      33\n",
      "ALQ      19\n",
      "GLQ      14\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtFinSF2\n",
      "0       1293\n",
      "180        5\n",
      "374        3\n",
      "290        2\n",
      "469        2\n",
      "        ... \n",
      "1120       1\n",
      "165        1\n",
      "532        1\n",
      "495        1\n",
      "531        1\n",
      "Name: count, Length: 144, dtype: int64\n",
      "--------------------\n",
      "BsmtUnfSF\n",
      "0       118\n",
      "728       9\n",
      "384       8\n",
      "572       7\n",
      "600       7\n",
      "       ... \n",
      "204       1\n",
      "1566      1\n",
      "207       1\n",
      "649       1\n",
      "1228      1\n",
      "Name: count, Length: 780, dtype: int64\n",
      "--------------------\n",
      "TotalBsmtSF\n",
      "0       37\n",
      "864     35\n",
      "672     17\n",
      "912     15\n",
      "1040    14\n",
      "        ..\n",
      "1902     1\n",
      "1274     1\n",
      "1393     1\n",
      "1622     1\n",
      "1352     1\n",
      "Name: count, Length: 721, dtype: int64\n",
      "--------------------\n",
      "Heating\n",
      "GasA     1428\n",
      "GasW       18\n",
      "Grav        7\n",
      "Wall        4\n",
      "OthW        2\n",
      "Floor       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "HeatingQC\n",
      "Ex    741\n",
      "TA    428\n",
      "Gd    241\n",
      "Fa     49\n",
      "Po      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "CentralAir\n",
      "Y    1365\n",
      "N      95\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Electrical\n",
      "SBrkr    1334\n",
      "FuseA      94\n",
      "FuseF      27\n",
      "FuseP       3\n",
      "Mix         1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "1stFlrSF\n",
      "864     25\n",
      "1040    16\n",
      "912     14\n",
      "848     12\n",
      "894     12\n",
      "        ..\n",
      "1150     1\n",
      "1752     1\n",
      "736      1\n",
      "794      1\n",
      "1297     1\n",
      "Name: count, Length: 753, dtype: int64\n",
      "--------------------\n",
      "2ndFlrSF\n",
      "0      829\n",
      "728     10\n",
      "504      9\n",
      "672      8\n",
      "546      8\n",
      "      ... \n",
      "870      1\n",
      "694      1\n",
      "854      1\n",
      "768      1\n",
      "208      1\n",
      "Name: count, Length: 417, dtype: int64\n",
      "--------------------\n",
      "LowQualFinSF\n",
      "0      1434\n",
      "80        3\n",
      "360       2\n",
      "513       1\n",
      "528       1\n",
      "572       1\n",
      "144       1\n",
      "234       1\n",
      "392       1\n",
      "371       1\n",
      "420       1\n",
      "390       1\n",
      "473       1\n",
      "156       1\n",
      "515       1\n",
      "53        1\n",
      "232       1\n",
      "481       1\n",
      "120       1\n",
      "514       1\n",
      "397       1\n",
      "479       1\n",
      "205       1\n",
      "384       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GrLivArea\n",
      "864     22\n",
      "1040    14\n",
      "894     11\n",
      "848     10\n",
      "1456    10\n",
      "        ..\n",
      "774      1\n",
      "2792     1\n",
      "1334     1\n",
      "693      1\n",
      "1861     1\n",
      "Name: count, Length: 861, dtype: int64\n",
      "--------------------\n",
      "BsmtFullBath\n",
      "0    856\n",
      "1    588\n",
      "2     15\n",
      "3      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtHalfBath\n",
      "0    1378\n",
      "1      80\n",
      "2       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "FullBath\n",
      "2    768\n",
      "1    650\n",
      "3     33\n",
      "0      9\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "HalfBath\n",
      "0    913\n",
      "1    535\n",
      "2     12\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BedroomAbvGr\n",
      "3    804\n",
      "2    358\n",
      "4    213\n",
      "1     50\n",
      "5     21\n",
      "6      7\n",
      "0      6\n",
      "8      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "KitchenAbvGr\n",
      "1    1392\n",
      "2      65\n",
      "3       2\n",
      "0       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "KitchenQual\n",
      "TA    735\n",
      "Gd    586\n",
      "Ex    100\n",
      "Fa     39\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "TotRmsAbvGrd\n",
      "6     402\n",
      "7     329\n",
      "5     275\n",
      "8     187\n",
      "4      97\n",
      "9      75\n",
      "10     47\n",
      "11     18\n",
      "3      17\n",
      "12     11\n",
      "2       1\n",
      "14      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Functional\n",
      "Typ     1360\n",
      "Min2      34\n",
      "Min1      31\n",
      "Mod       15\n",
      "Maj1      14\n",
      "Maj2       5\n",
      "Sev        1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Fireplaces\n",
      "0    690\n",
      "1    650\n",
      "2    115\n",
      "3      5\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "FireplaceQu\n",
      "Gd    380\n",
      "TA    313\n",
      "Fa     33\n",
      "Ex     24\n",
      "Po     20\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageType\n",
      "Attchd     870\n",
      "Detchd     387\n",
      "BuiltIn     88\n",
      "Basment     19\n",
      "CarPort      9\n",
      "2Types       6\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageYrBlt\n",
      "2005.0    65\n",
      "2006.0    59\n",
      "2004.0    53\n",
      "2003.0    50\n",
      "2007.0    49\n",
      "          ..\n",
      "1906.0     1\n",
      "1908.0     1\n",
      "1927.0     1\n",
      "1900.0     1\n",
      "1933.0     1\n",
      "Name: count, Length: 97, dtype: int64\n",
      "--------------------\n",
      "GarageFinish\n",
      "Unf    605\n",
      "RFn    422\n",
      "Fin    352\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageCars\n",
      "2    824\n",
      "1    369\n",
      "3    181\n",
      "0     81\n",
      "4      5\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageArea\n",
      "0      81\n",
      "440    49\n",
      "576    47\n",
      "240    38\n",
      "484    34\n",
      "       ..\n",
      "358     1\n",
      "186     1\n",
      "693     1\n",
      "813     1\n",
      "995     1\n",
      "Name: count, Length: 441, dtype: int64\n",
      "--------------------\n",
      "GarageQual\n",
      "TA    1311\n",
      "Fa      48\n",
      "Gd      14\n",
      "Ex       3\n",
      "Po       3\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageCond\n",
      "TA    1326\n",
      "Fa      35\n",
      "Gd       9\n",
      "Po       7\n",
      "Ex       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "PavedDrive\n",
      "Y    1340\n",
      "N      90\n",
      "P      30\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "WoodDeckSF\n",
      "0      761\n",
      "192     38\n",
      "100     36\n",
      "144     33\n",
      "120     31\n",
      "      ... \n",
      "162      1\n",
      "229      1\n",
      "439      1\n",
      "379      1\n",
      "84       1\n",
      "Name: count, Length: 274, dtype: int64\n",
      "--------------------\n",
      "OpenPorchSF\n",
      "0      656\n",
      "36      29\n",
      "48      22\n",
      "20      21\n",
      "40      19\n",
      "      ... \n",
      "214      1\n",
      "195      1\n",
      "175      1\n",
      "10       1\n",
      "523      1\n",
      "Name: count, Length: 202, dtype: int64\n",
      "--------------------\n",
      "EnclosedPorch\n",
      "0      1252\n",
      "112      15\n",
      "96        6\n",
      "120       5\n",
      "144       5\n",
      "       ... \n",
      "291       1\n",
      "248       1\n",
      "105       1\n",
      "169       1\n",
      "189       1\n",
      "Name: count, Length: 120, dtype: int64\n",
      "--------------------\n",
      "3SsnPorch\n",
      "0      1436\n",
      "168       3\n",
      "180       2\n",
      "144       2\n",
      "216       2\n",
      "130       1\n",
      "320       1\n",
      "407       1\n",
      "508       1\n",
      "238       1\n",
      "245       1\n",
      "140       1\n",
      "196       1\n",
      "182       1\n",
      "162       1\n",
      "23        1\n",
      "96        1\n",
      "153       1\n",
      "290       1\n",
      "304       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "ScreenPorch\n",
      "0      1344\n",
      "192       6\n",
      "120       5\n",
      "224       5\n",
      "189       4\n",
      "       ... \n",
      "155       1\n",
      "220       1\n",
      "119       1\n",
      "40        1\n",
      "410       1\n",
      "Name: count, Length: 76, dtype: int64\n",
      "--------------------\n",
      "PoolArea\n",
      "0      1453\n",
      "512       1\n",
      "648       1\n",
      "576       1\n",
      "555       1\n",
      "480       1\n",
      "519       1\n",
      "738       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "PoolQC\n",
      "Gd    3\n",
      "Ex    2\n",
      "Fa    2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Fence\n",
      "MnPrv    157\n",
      "GdPrv     59\n",
      "GdWo      54\n",
      "MnWw      11\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MiscFeature\n",
      "Shed    49\n",
      "Gar2     2\n",
      "Othr     2\n",
      "TenC     1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MiscVal\n",
      "0        1408\n",
      "400        11\n",
      "500         8\n",
      "700         5\n",
      "450         4\n",
      "600         4\n",
      "2000        4\n",
      "1200        2\n",
      "480         2\n",
      "350         1\n",
      "15500       1\n",
      "800         1\n",
      "3500        1\n",
      "1300        1\n",
      "54          1\n",
      "620         1\n",
      "560         1\n",
      "1400        1\n",
      "8300        1\n",
      "1150        1\n",
      "2500        1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MoSold\n",
      "6     253\n",
      "7     234\n",
      "5     204\n",
      "4     141\n",
      "8     122\n",
      "3     106\n",
      "10     89\n",
      "11     79\n",
      "9      63\n",
      "12     59\n",
      "1      58\n",
      "2      52\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "YrSold\n",
      "2009    338\n",
      "2007    329\n",
      "2006    314\n",
      "2008    304\n",
      "2010    175\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "SaleType\n",
      "WD       1267\n",
      "New       122\n",
      "COD        43\n",
      "ConLD       9\n",
      "ConLI       5\n",
      "ConLw       5\n",
      "CWD         4\n",
      "Oth         3\n",
      "Con         2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "SaleCondition\n",
      "Normal     1198\n",
      "Partial     125\n",
      "Abnorml     101\n",
      "Family       20\n",
      "Alloca       12\n",
      "AdjLand       4\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "SalePrice\n",
      "140000    20\n",
      "135000    17\n",
      "145000    14\n",
      "155000    14\n",
      "110000    13\n",
      "          ..\n",
      "410000     1\n",
      "156932     1\n",
      "144152     1\n",
      "216000     1\n",
      "274300     1\n",
      "Name: count, Length: 663, dtype: int64\n",
      "--------------------\n"
     ]
    }
   ],
   "source": [
    "for column in train_df.columns:\n",
    "    print(train_df[column].value_counts())\n",
    "    print('-'*20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8961a863",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:09.877720Z",
     "iopub.status.busy": "2024-09-15T17:14:09.877385Z",
     "iopub.status.idle": "2024-09-15T17:14:10.433540Z",
     "shell.execute_reply": "2024-09-15T17:14:10.432469Z"
    },
    "papermill": {
     "duration": 0.578343,
     "end_time": "2024-09-15T17:14:10.436311",
     "exception": false,
     "start_time": "2024-09-15T17:14:09.857968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0799bf0d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:10.490556Z",
     "iopub.status.busy": "2024-09-15T17:14:10.489594Z",
     "iopub.status.idle": "2024-09-15T17:14:10.693684Z",
     "shell.execute_reply": "2024-09-15T17:14:10.692849Z"
    },
    "papermill": {
     "duration": 0.231192,
     "end_time": "2024-09-15T17:14:10.695739",
     "exception": false,
     "start_time": "2024-09-15T17:14:10.464547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=train_df['LotArea'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "acf714fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:10.745264Z",
     "iopub.status.busy": "2024-09-15T17:14:10.744864Z",
     "iopub.status.idle": "2024-09-15T17:14:10.909114Z",
     "shell.execute_reply": "2024-09-15T17:14:10.907670Z"
    },
    "papermill": {
     "duration": 0.196177,
     "end_time": "2024-09-15T17:14:10.913242",
     "exception": false,
     "start_time": "2024-09-15T17:14:10.717065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(x=train_df['LotFrontage'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c144b188",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:10.956956Z",
     "iopub.status.busy": "2024-09-15T17:14:10.956288Z",
     "iopub.status.idle": "2024-09-15T17:14:11.044653Z",
     "shell.execute_reply": "2024-09-15T17:14:11.043738Z"
    },
    "papermill": {
     "duration": 0.110334,
     "end_time": "2024-09-15T17:14:11.046906",
     "exception": false,
     "start_time": "2024-09-15T17:14:10.936572",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>OverallQual</th>\n",
       "      <th>OverallCond</th>\n",
       "      <th>YearBuilt</th>\n",
       "      <th>YearRemodAdd</th>\n",
       "      <th>MasVnrArea</th>\n",
       "      <th>BsmtFinSF1</th>\n",
       "      <th>...</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>EnclosedPorch</th>\n",
       "      <th>3SsnPorch</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1201.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1452.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "      <td>1460.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>730.500000</td>\n",
       "      <td>56.897260</td>\n",
       "      <td>70.049958</td>\n",
       "      <td>10516.828082</td>\n",
       "      <td>6.099315</td>\n",
       "      <td>5.575342</td>\n",
       "      <td>1971.267808</td>\n",
       "      <td>1984.865753</td>\n",
       "      <td>103.685262</td>\n",
       "      <td>443.639726</td>\n",
       "      <td>...</td>\n",
       "      <td>94.244521</td>\n",
       "      <td>46.660274</td>\n",
       "      <td>21.954110</td>\n",
       "      <td>3.409589</td>\n",
       "      <td>15.060959</td>\n",
       "      <td>2.758904</td>\n",
       "      <td>43.489041</td>\n",
       "      <td>6.321918</td>\n",
       "      <td>2007.815753</td>\n",
       "      <td>180921.195890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>421.610009</td>\n",
       "      <td>42.300571</td>\n",
       "      <td>24.284752</td>\n",
       "      <td>9981.264932</td>\n",
       "      <td>1.382997</td>\n",
       "      <td>1.112799</td>\n",
       "      <td>30.202904</td>\n",
       "      <td>20.645407</td>\n",
       "      <td>181.066207</td>\n",
       "      <td>456.098091</td>\n",
       "      <td>...</td>\n",
       "      <td>125.338794</td>\n",
       "      <td>66.256028</td>\n",
       "      <td>61.119149</td>\n",
       "      <td>29.317331</td>\n",
       "      <td>55.757415</td>\n",
       "      <td>40.177307</td>\n",
       "      <td>496.123024</td>\n",
       "      <td>2.703626</td>\n",
       "      <td>1.328095</td>\n",
       "      <td>79442.502883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1300.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1872.000000</td>\n",
       "      <td>1950.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2006.000000</td>\n",
       "      <td>34900.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>365.750000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>7553.500000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1954.000000</td>\n",
       "      <td>1967.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>2007.000000</td>\n",
       "      <td>129975.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>730.500000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>9478.500000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>1973.000000</td>\n",
       "      <td>1994.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>383.500000</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>163000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1095.250000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>11601.500000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>2000.000000</td>\n",
       "      <td>2004.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>712.250000</td>\n",
       "      <td>...</td>\n",
       "      <td>168.000000</td>\n",
       "      <td>68.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2009.000000</td>\n",
       "      <td>214000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1460.000000</td>\n",
       "      <td>190.000000</td>\n",
       "      <td>313.000000</td>\n",
       "      <td>215245.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>1600.000000</td>\n",
       "      <td>5644.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>857.000000</td>\n",
       "      <td>547.000000</td>\n",
       "      <td>552.000000</td>\n",
       "      <td>508.000000</td>\n",
       "      <td>480.000000</td>\n",
       "      <td>738.000000</td>\n",
       "      <td>15500.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>2010.000000</td>\n",
       "      <td>755000.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\n",
       "count  1460.000000  1460.000000  1201.000000    1460.000000  1460.000000   \n",
       "mean    730.500000    56.897260    70.049958   10516.828082     6.099315   \n",
       "std     421.610009    42.300571    24.284752    9981.264932     1.382997   \n",
       "min       1.000000    20.000000    21.000000    1300.000000     1.000000   \n",
       "25%     365.750000    20.000000    59.000000    7553.500000     5.000000   \n",
       "50%     730.500000    50.000000    69.000000    9478.500000     6.000000   \n",
       "75%    1095.250000    70.000000    80.000000   11601.500000     7.000000   \n",
       "max    1460.000000   190.000000   313.000000  215245.000000    10.000000   \n",
       "\n",
       "       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  ...  \\\n",
       "count  1460.000000  1460.000000   1460.000000  1452.000000  1460.000000  ...   \n",
       "mean      5.575342  1971.267808   1984.865753   103.685262   443.639726  ...   \n",
       "std       1.112799    30.202904     20.645407   181.066207   456.098091  ...   \n",
       "min       1.000000  1872.000000   1950.000000     0.000000     0.000000  ...   \n",
       "25%       5.000000  1954.000000   1967.000000     0.000000     0.000000  ...   \n",
       "50%       5.000000  1973.000000   1994.000000     0.000000   383.500000  ...   \n",
       "75%       6.000000  2000.000000   2004.000000   166.000000   712.250000  ...   \n",
       "max       9.000000  2010.000000   2010.000000  1600.000000  5644.000000  ...   \n",
       "\n",
       "        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\n",
       "count  1460.000000  1460.000000    1460.000000  1460.000000  1460.000000   \n",
       "mean     94.244521    46.660274      21.954110     3.409589    15.060959   \n",
       "std     125.338794    66.256028      61.119149    29.317331    55.757415   \n",
       "min       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
       "25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
       "50%       0.000000    25.000000       0.000000     0.000000     0.000000   \n",
       "75%     168.000000    68.000000       0.000000     0.000000     0.000000   \n",
       "max     857.000000   547.000000     552.000000   508.000000   480.000000   \n",
       "\n",
       "          PoolArea       MiscVal       MoSold       YrSold      SalePrice  \n",
       "count  1460.000000   1460.000000  1460.000000  1460.000000    1460.000000  \n",
       "mean      2.758904     43.489041     6.321918  2007.815753  180921.195890  \n",
       "std      40.177307    496.123024     2.703626     1.328095   79442.502883  \n",
       "min       0.000000      0.000000     1.000000  2006.000000   34900.000000  \n",
       "25%       0.000000      0.000000     5.000000  2007.000000  129975.000000  \n",
       "50%       0.000000      0.000000     6.000000  2008.000000  163000.000000  \n",
       "75%       0.000000      0.000000     8.000000  2009.000000  214000.000000  \n",
       "max     738.000000  15500.000000    12.000000  2010.000000  755000.000000  \n",
       "\n",
       "[8 rows x 38 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32bbafef",
   "metadata": {
    "papermill": {
     "duration": 0.019167,
     "end_time": "2024-09-15T17:14:11.085767",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.066600",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Outliers removal "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "30067695",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:11.128521Z",
     "iopub.status.busy": "2024-09-15T17:14:11.128141Z",
     "iopub.status.idle": "2024-09-15T17:14:11.293637Z",
     "shell.execute_reply": "2024-09-15T17:14:11.292698Z"
    },
    "papermill": {
     "duration": 0.190162,
     "end_time": "2024-09-15T17:14:11.296061",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.105899",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values after cleaning:\n",
      "Series([], dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "# Load the dataset (ensure you provide the correct path)\n",
    "df = pd.read_csv('/kaggle/input/datatask1/train.csv')  # Update with your dataset path\n",
    "\n",
    "# Step 1: Remove Outliers using IQR method\n",
    "def remove_outliers(df):\n",
    "    for column in df.select_dtypes(include=[np.number]).columns:\n",
    "        Q1 = df[column].quantile(0.25)\n",
    "        Q3 = df[column].quantile(0.75)\n",
    "        IQR = Q3 - Q1\n",
    "        lower_bound = Q1 - 1.5 * IQR\n",
    "        upper_bound = Q3 + 1.5 * IQR\n",
    "        # Filter the dataframe by removing outliers\n",
    "        df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]\n",
    "    return df\n",
    "\n",
    "df_cleaned = remove_outliers(df)\n",
    "\n",
    "# Step 2: Handle Missing Values\n",
    "\n",
    "# Fill missing values in 'LotFrontage' with the median of the column\n",
    "df_cleaned['LotFrontage'] = df_cleaned['LotFrontage'].fillna(df_cleaned['LotFrontage'].median())\n",
    "\n",
    "# For numerical features - fill missing values with the median of each column\n",
    "for column in df_cleaned.select_dtypes(include=[np.number]).columns:\n",
    "    df_cleaned[column] = df_cleaned[column].fillna(df_cleaned[column].median())\n",
    "\n",
    "# For categorical features - handle missing values\n",
    "for column in df_cleaned.select_dtypes(include=[object]).columns:\n",
    "    if df_cleaned[column].isnull().sum() > 0:\n",
    "        if column == \"PoolQC\":\n",
    "            # Remove the column if it has too many missing values\n",
    "            df_cleaned = df_cleaned.drop(columns=[column])\n",
    "        else:\n",
    "            # Fill missing categorical values with the mode (most frequent value)\n",
    "            df_cleaned[column] = df_cleaned[column].fillna(df_cleaned[column].mode()[0])\n",
    "\n",
    "# Step 3: Optionally, drop columns with too many missing values\n",
    "# Drop columns where more than 50% of the values are missing\n",
    "missing_value_threshold = 0.5\n",
    "df_cleaned = df_cleaned.loc[:, df_cleaned.isnull().mean() < missing_value_threshold]\n",
    "\n",
    "# Check if the dataset still has missing values after cleaning\n",
    "missing_values = df_cleaned.isnull().sum()\n",
    "print(\"Missing values after cleaning:\")\n",
    "print(missing_values[missing_values > 0])  # Print columns with remaining missing values, if any\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "53d6bafd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:11.340454Z",
     "iopub.status.busy": "2024-09-15T17:14:11.340078Z",
     "iopub.status.idle": "2024-09-15T17:14:11.362083Z",
     "shell.execute_reply": "2024-09-15T17:14:11.361304Z"
    },
    "papermill": {
     "duration": 0.045776,
     "end_time": "2024-09-15T17:14:11.364280",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.318504",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save the cleaned dataset\n",
    "# Save the cleaned dataset\n",
    "df_cleaned.to_csv('/kaggle/working/cleaned_dataset.csv', index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a606e47d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:11.404961Z",
     "iopub.status.busy": "2024-09-15T17:14:11.404590Z",
     "iopub.status.idle": "2024-09-15T17:14:11.410651Z",
     "shell.execute_reply": "2024-09-15T17:14:11.409788Z"
    },
    "papermill": {
     "duration": 0.028377,
     "end_time": "2024-09-15T17:14:11.412607",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.384230",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(423, 80)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_cleaned.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "eb2f1d2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:11.454104Z",
     "iopub.status.busy": "2024-09-15T17:14:11.453602Z",
     "iopub.status.idle": "2024-09-15T17:14:11.466766Z",
     "shell.execute_reply": "2024-09-15T17:14:11.465859Z"
    },
    "papermill": {
     "duration": 0.03603,
     "end_time": "2024-09-15T17:14:11.468657",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.432627",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GarageCond       0\n",
       "PavedDrive       0\n",
       "WoodDeckSF       0\n",
       "OpenPorchSF      0\n",
       "EnclosedPorch    0\n",
       "3SsnPorch        0\n",
       "ScreenPorch      0\n",
       "PoolArea         0\n",
       "LandContour      0\n",
       "Utilities        0\n",
       "LotConfig        0\n",
       "LandSlope        0\n",
       "Neighborhood     0\n",
       "Condition1       0\n",
       "Condition2       0\n",
       "BldgType         0\n",
       "HouseStyle       0\n",
       "OverallQual      0\n",
       "OverallCond      0\n",
       "YearBuilt        0\n",
       "YearRemodAdd     0\n",
       "RoofStyle        0\n",
       "RoofMatl         0\n",
       "Exterior1st      0\n",
       "Exterior2nd      0\n",
       "MasVnrType       0\n",
       "MasVnrArea       0\n",
       "ExterQual        0\n",
       "ExterCond        0\n",
       "Foundation       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Check for missing values in the train dataset\n",
    "missing_values_train = df_cleaned.isnull().sum().sort_values(ascending=False)\n",
    "\n",
    "# Check for missing values in the test dataset\n",
    "#missing_values_test = test_df.isnull().sum().sort_values(ascending=False)\n",
    "\n",
    "missing_values_train.head(30)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65ddd92f",
   "metadata": {
    "papermill": {
     "duration": 0.019081,
     "end_time": "2024-09-15T17:14:11.507756",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.488675",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Cleaned data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "f76d6fa8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:11.548683Z",
     "iopub.status.busy": "2024-09-15T17:14:11.548043Z",
     "iopub.status.idle": "2024-09-15T17:14:11.555365Z",
     "shell.execute_reply": "2024-09-15T17:14:11.554413Z"
    },
    "papermill": {
     "duration": 0.029905,
     "end_time": "2024-09-15T17:14:11.557377",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.527472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Drop irrelevant columns\n",
    "irrelevant_columns = [\n",
    "    'Id',  # If there's an ID column\n",
    "    'Alley',  # If not useful for the model\n",
    "    'PoolQC',  # Pool quality might not be useful\n",
    "    'Fence',  # Fence quality might not be predictive\n",
    "    'MiscFeature',  # Miscellaneous features often have little predictive power\n",
    "    'FireplaceQu',  # If `Fireplaces` is sufficient\n",
    "    'GarageYrBlt',  # If garage features are sufficient\n",
    "    '3SsnPorch',  # If not useful\n",
    "    'ScreenPorch',  # If not useful\n",
    "    'LowQualFinSF',  # If not useful\n",
    "    'EnclosedPorch'  # If not useful\n",
    "]\n",
    "\n",
    "df_cleaned = df.drop(columns=irrelevant_columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0ca0ac07",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:11.597850Z",
     "iopub.status.busy": "2024-09-15T17:14:11.597518Z",
     "iopub.status.idle": "2024-09-15T17:14:11.899684Z",
     "shell.execute_reply": "2024-09-15T17:14:11.898777Z"
    },
    "papermill": {
     "duration": 0.324721,
     "end_time": "2024-09-15T17:14:11.901875",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.577154",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>...</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>Y</td>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70</td>\n",
       "      <td>RL</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>WD</td>\n",
       "      <td>Abnorml</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>FR2</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>Y</td>\n",
       "      <td>192</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 70 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSSubClass MSZoning  LotFrontage  LotArea Street LotShape LandContour  \\\n",
       "0          60       RL         65.0     8450   Pave      Reg         Lvl   \n",
       "1          20       RL         80.0     9600   Pave      Reg         Lvl   \n",
       "2          60       RL         68.0    11250   Pave      IR1         Lvl   \n",
       "3          70       RL         60.0     9550   Pave      IR1         Lvl   \n",
       "4          60       RL         84.0    14260   Pave      IR1         Lvl   \n",
       "\n",
       "  Utilities LotConfig LandSlope  ... PavedDrive WoodDeckSF OpenPorchSF  \\\n",
       "0    AllPub    Inside       Gtl  ...          Y          0          61   \n",
       "1    AllPub       FR2       Gtl  ...          Y        298           0   \n",
       "2    AllPub    Inside       Gtl  ...          Y          0          42   \n",
       "3    AllPub    Corner       Gtl  ...          Y          0          35   \n",
       "4    AllPub       FR2       Gtl  ...          Y        192          84   \n",
       "\n",
       "  PoolArea MiscVal  MoSold  YrSold  SaleType  SaleCondition SalePrice  \n",
       "0        0       0       2    2008        WD         Normal    208500  \n",
       "1        0       0       5    2007        WD         Normal    181500  \n",
       "2        0       0       9    2008        WD         Normal    223500  \n",
       "3        0       0       2    2006        WD        Abnorml    140000  \n",
       "4        0       0      12    2008        WD         Normal    250000  \n",
       "\n",
       "[5 rows x 70 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Updated list of categorical columns\n",
    "categorical_columns = [\n",
    "    'MSSubClass', 'MSZoning', 'Street', 'LotShape', 'LandContour',\n",
    "    'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1',\n",
    "    'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n",
    "    'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'Heating',\n",
    "    'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional',\n",
    "    'Fireplaces', 'GarageType', 'GarageFinish', 'PavedDrive', \n",
    "     'SaleType', 'SaleCondition'\n",
    "]\n",
    "\n",
    "# Ensure all categorical columns are in the DataFrame\n",
    "present_columns = [col for col in categorical_columns if col in df_cleaned.columns]\n",
    "missing_columns = [col for col in categorical_columns if col not in df_cleaned.columns]\n",
    "\n",
    "if missing_columns:\n",
    "    print(f\"Missing columns: {missing_columns}\")\n",
    "\n",
    "# Convert YrSold to datetime\n",
    "df_cleaned['YrSold'] = pd.to_datetime(df_cleaned['YrSold'], format='%Y').dt.year\n",
    "\n",
    "# Optional: Extract month and year if needed for other date columns\n",
    "df_cleaned['MoSold'] = df_cleaned['MoSold'].astype(int)  # Convert MoSold to integer\n",
    "\n",
    "# Define the preprocessor with imputation for missing values and scaling for numerical features\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('cat', OneHotEncoder(handle_unknown='ignore', drop='first'), present_columns)\n",
    "    ],\n",
    "    remainder='passthrough'  # Keep other columns unchanged\n",
    ")\n",
    "\n",
    "# Display the first few rows of the updated DataFrame\n",
    "df_cleaned.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ced4487b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:11.943755Z",
     "iopub.status.busy": "2024-09-15T17:14:11.943193Z",
     "iopub.status.idle": "2024-09-15T17:14:11.962487Z",
     "shell.execute_reply": "2024-09-15T17:14:11.961581Z"
    },
    "papermill": {
     "duration": 0.042685,
     "end_time": "2024-09-15T17:14:11.964861",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.922176",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 70 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   MSSubClass     1460 non-null   int64  \n",
      " 1   MSZoning       1460 non-null   object \n",
      " 2   LotFrontage    1201 non-null   float64\n",
      " 3   LotArea        1460 non-null   int64  \n",
      " 4   Street         1460 non-null   object \n",
      " 5   LotShape       1460 non-null   object \n",
      " 6   LandContour    1460 non-null   object \n",
      " 7   Utilities      1460 non-null   object \n",
      " 8   LotConfig      1460 non-null   object \n",
      " 9   LandSlope      1460 non-null   object \n",
      " 10  Neighborhood   1460 non-null   object \n",
      " 11  Condition1     1460 non-null   object \n",
      " 12  Condition2     1460 non-null   object \n",
      " 13  BldgType       1460 non-null   object \n",
      " 14  HouseStyle     1460 non-null   object \n",
      " 15  OverallQual    1460 non-null   int64  \n",
      " 16  OverallCond    1460 non-null   int64  \n",
      " 17  YearBuilt      1460 non-null   int64  \n",
      " 18  YearRemodAdd   1460 non-null   int64  \n",
      " 19  RoofStyle      1460 non-null   object \n",
      " 20  RoofMatl       1460 non-null   object \n",
      " 21  Exterior1st    1460 non-null   object \n",
      " 22  Exterior2nd    1460 non-null   object \n",
      " 23  MasVnrType     588 non-null    object \n",
      " 24  MasVnrArea     1452 non-null   float64\n",
      " 25  ExterQual      1460 non-null   object \n",
      " 26  ExterCond      1460 non-null   object \n",
      " 27  Foundation     1460 non-null   object \n",
      " 28  BsmtQual       1423 non-null   object \n",
      " 29  BsmtCond       1423 non-null   object \n",
      " 30  BsmtExposure   1422 non-null   object \n",
      " 31  BsmtFinType1   1423 non-null   object \n",
      " 32  BsmtFinSF1     1460 non-null   int64  \n",
      " 33  BsmtFinType2   1422 non-null   object \n",
      " 34  BsmtFinSF2     1460 non-null   int64  \n",
      " 35  BsmtUnfSF      1460 non-null   int64  \n",
      " 36  TotalBsmtSF    1460 non-null   int64  \n",
      " 37  Heating        1460 non-null   object \n",
      " 38  HeatingQC      1460 non-null   object \n",
      " 39  CentralAir     1460 non-null   object \n",
      " 40  Electrical     1459 non-null   object \n",
      " 41  1stFlrSF       1460 non-null   int64  \n",
      " 42  2ndFlrSF       1460 non-null   int64  \n",
      " 43  GrLivArea      1460 non-null   int64  \n",
      " 44  BsmtFullBath   1460 non-null   int64  \n",
      " 45  BsmtHalfBath   1460 non-null   int64  \n",
      " 46  FullBath       1460 non-null   int64  \n",
      " 47  HalfBath       1460 non-null   int64  \n",
      " 48  BedroomAbvGr   1460 non-null   int64  \n",
      " 49  KitchenAbvGr   1460 non-null   int64  \n",
      " 50  KitchenQual    1460 non-null   object \n",
      " 51  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 52  Functional     1460 non-null   object \n",
      " 53  Fireplaces     1460 non-null   int64  \n",
      " 54  GarageType     1379 non-null   object \n",
      " 55  GarageFinish   1379 non-null   object \n",
      " 56  GarageCars     1460 non-null   int64  \n",
      " 57  GarageArea     1460 non-null   int64  \n",
      " 58  GarageQual     1379 non-null   object \n",
      " 59  GarageCond     1379 non-null   object \n",
      " 60  PavedDrive     1460 non-null   object \n",
      " 61  WoodDeckSF     1460 non-null   int64  \n",
      " 62  OpenPorchSF    1460 non-null   int64  \n",
      " 63  PoolArea       1460 non-null   int64  \n",
      " 64  MiscVal        1460 non-null   int64  \n",
      " 65  MoSold         1460 non-null   int64  \n",
      " 66  YrSold         1460 non-null   int32  \n",
      " 67  SaleType       1460 non-null   object \n",
      " 68  SaleCondition  1460 non-null   object \n",
      " 69  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(2), int32(1), int64(29), object(38)\n",
      "memory usage: 792.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df_cleaned.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a017794d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:12.006092Z",
     "iopub.status.busy": "2024-09-15T17:14:12.005790Z",
     "iopub.status.idle": "2024-09-15T17:14:12.013178Z",
     "shell.execute_reply": "2024-09-15T17:14:12.012288Z"
    },
    "papermill": {
     "duration": 0.030244,
     "end_time": "2024-09-15T17:14:12.015116",
     "exception": false,
     "start_time": "2024-09-15T17:14:11.984872",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MSSubClass         int64\n",
       "MSZoning          object\n",
       "LotFrontage      float64\n",
       "LotArea            int64\n",
       "Street            object\n",
       "                  ...   \n",
       "MoSold             int64\n",
       "YrSold             int32\n",
       "SaleType          object\n",
       "SaleCondition     object\n",
       "SalePrice          int64\n",
       "Length: 70, dtype: object"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Verify data types\n",
    "df_cleaned.dtypes\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "de752f35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:12.057064Z",
     "iopub.status.busy": "2024-09-15T17:14:12.056754Z",
     "iopub.status.idle": "2024-09-15T17:14:12.063228Z",
     "shell.execute_reply": "2024-09-15T17:14:12.062219Z"
    },
    "papermill": {
     "duration": 0.030295,
     "end_time": "2024-09-15T17:14:12.065644",
     "exception": false,
     "start_time": "2024-09-15T17:14:12.035349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Remaining object columns: Index(['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n",
      "       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n",
      "       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n",
      "       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n",
      "       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n",
      "       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n",
      "       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n",
      "       'PavedDrive', 'SaleType', 'SaleCondition'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# List all columns with dtype 'object'\n",
    "remaining_object_columns = df_cleaned.select_dtypes(include=['object']).columns\n",
    "\n",
    "# Display remaining object columns\n",
    "print(\"Remaining object columns:\", remaining_object_columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "967a8efa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:12.108857Z",
     "iopub.status.busy": "2024-09-15T17:14:12.108312Z",
     "iopub.status.idle": "2024-09-15T17:14:12.162960Z",
     "shell.execute_reply": "2024-09-15T17:14:12.162089Z"
    },
    "papermill": {
     "duration": 0.078913,
     "end_time": "2024-09-15T17:14:12.165261",
     "exception": false,
     "start_time": "2024-09-15T17:14:12.086348",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>...</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>208500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>181500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>223500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70</td>\n",
       "      <td>3</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>140000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>2</td>\n",
       "      <td>192</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>250000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 70 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  LandContour  \\\n",
       "0          60         3         65.0     8450       1         3            3   \n",
       "1          20         3         80.0     9600       1         3            3   \n",
       "2          60         3         68.0    11250       1         0            3   \n",
       "3          70         3         60.0     9550       1         0            3   \n",
       "4          60         3         84.0    14260       1         0            3   \n",
       "\n",
       "   Utilities  LotConfig  LandSlope  ...  PavedDrive  WoodDeckSF  OpenPorchSF  \\\n",
       "0          0          4          0  ...           2           0           61   \n",
       "1          0          2          0  ...           2         298            0   \n",
       "2          0          4          0  ...           2           0           42   \n",
       "3          0          0          0  ...           2           0           35   \n",
       "4          0          2          0  ...           2         192           84   \n",
       "\n",
       "   PoolArea  MiscVal  MoSold  YrSold  SaleType  SaleCondition  SalePrice  \n",
       "0         0        0       2    2008         8              4     208500  \n",
       "1         0        0       5    2007         8              4     181500  \n",
       "2         0        0       9    2008         8              4     223500  \n",
       "3         0        0       2    2006         8              0     140000  \n",
       "4         0        0      12    2008         8              4     250000  \n",
       "\n",
       "[5 rows x 70 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Initialize LabelEncoder\n",
    "label_encoders = {}\n",
    "\n",
    "# Apply LabelEncoder to each object column\n",
    "for col in remaining_object_columns:\n",
    "    le = LabelEncoder()\n",
    "    df_cleaned[col] = le.fit_transform(df_cleaned[col].astype(str))\n",
    "    label_encoders[col] = le\n",
    "\n",
    "df_cleaned.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "8df7c1f4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:12.211874Z",
     "iopub.status.busy": "2024-09-15T17:14:12.210941Z",
     "iopub.status.idle": "2024-09-15T17:14:12.229295Z",
     "shell.execute_reply": "2024-09-15T17:14:12.228380Z"
    },
    "papermill": {
     "duration": 0.043484,
     "end_time": "2024-09-15T17:14:12.231977",
     "exception": false,
     "start_time": "2024-09-15T17:14:12.188493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1460 entries, 0 to 1459\n",
      "Data columns (total 70 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   MSSubClass     1460 non-null   int64  \n",
      " 1   MSZoning       1460 non-null   int64  \n",
      " 2   LotFrontage    1201 non-null   float64\n",
      " 3   LotArea        1460 non-null   int64  \n",
      " 4   Street         1460 non-null   int64  \n",
      " 5   LotShape       1460 non-null   int64  \n",
      " 6   LandContour    1460 non-null   int64  \n",
      " 7   Utilities      1460 non-null   int64  \n",
      " 8   LotConfig      1460 non-null   int64  \n",
      " 9   LandSlope      1460 non-null   int64  \n",
      " 10  Neighborhood   1460 non-null   int64  \n",
      " 11  Condition1     1460 non-null   int64  \n",
      " 12  Condition2     1460 non-null   int64  \n",
      " 13  BldgType       1460 non-null   int64  \n",
      " 14  HouseStyle     1460 non-null   int64  \n",
      " 15  OverallQual    1460 non-null   int64  \n",
      " 16  OverallCond    1460 non-null   int64  \n",
      " 17  YearBuilt      1460 non-null   int64  \n",
      " 18  YearRemodAdd   1460 non-null   int64  \n",
      " 19  RoofStyle      1460 non-null   int64  \n",
      " 20  RoofMatl       1460 non-null   int64  \n",
      " 21  Exterior1st    1460 non-null   int64  \n",
      " 22  Exterior2nd    1460 non-null   int64  \n",
      " 23  MasVnrType     1460 non-null   int64  \n",
      " 24  MasVnrArea     1452 non-null   float64\n",
      " 25  ExterQual      1460 non-null   int64  \n",
      " 26  ExterCond      1460 non-null   int64  \n",
      " 27  Foundation     1460 non-null   int64  \n",
      " 28  BsmtQual       1460 non-null   int64  \n",
      " 29  BsmtCond       1460 non-null   int64  \n",
      " 30  BsmtExposure   1460 non-null   int64  \n",
      " 31  BsmtFinType1   1460 non-null   int64  \n",
      " 32  BsmtFinSF1     1460 non-null   int64  \n",
      " 33  BsmtFinType2   1460 non-null   int64  \n",
      " 34  BsmtFinSF2     1460 non-null   int64  \n",
      " 35  BsmtUnfSF      1460 non-null   int64  \n",
      " 36  TotalBsmtSF    1460 non-null   int64  \n",
      " 37  Heating        1460 non-null   int64  \n",
      " 38  HeatingQC      1460 non-null   int64  \n",
      " 39  CentralAir     1460 non-null   int64  \n",
      " 40  Electrical     1460 non-null   int64  \n",
      " 41  1stFlrSF       1460 non-null   int64  \n",
      " 42  2ndFlrSF       1460 non-null   int64  \n",
      " 43  GrLivArea      1460 non-null   int64  \n",
      " 44  BsmtFullBath   1460 non-null   int64  \n",
      " 45  BsmtHalfBath   1460 non-null   int64  \n",
      " 46  FullBath       1460 non-null   int64  \n",
      " 47  HalfBath       1460 non-null   int64  \n",
      " 48  BedroomAbvGr   1460 non-null   int64  \n",
      " 49  KitchenAbvGr   1460 non-null   int64  \n",
      " 50  KitchenQual    1460 non-null   int64  \n",
      " 51  TotRmsAbvGrd   1460 non-null   int64  \n",
      " 52  Functional     1460 non-null   int64  \n",
      " 53  Fireplaces     1460 non-null   int64  \n",
      " 54  GarageType     1460 non-null   int64  \n",
      " 55  GarageFinish   1460 non-null   int64  \n",
      " 56  GarageCars     1460 non-null   int64  \n",
      " 57  GarageArea     1460 non-null   int64  \n",
      " 58  GarageQual     1460 non-null   int64  \n",
      " 59  GarageCond     1460 non-null   int64  \n",
      " 60  PavedDrive     1460 non-null   int64  \n",
      " 61  WoodDeckSF     1460 non-null   int64  \n",
      " 62  OpenPorchSF    1460 non-null   int64  \n",
      " 63  PoolArea       1460 non-null   int64  \n",
      " 64  MiscVal        1460 non-null   int64  \n",
      " 65  MoSold         1460 non-null   int64  \n",
      " 66  YrSold         1460 non-null   int32  \n",
      " 67  SaleType       1460 non-null   int64  \n",
      " 68  SaleCondition  1460 non-null   int64  \n",
      " 69  SalePrice      1460 non-null   int64  \n",
      "dtypes: float64(2), int32(1), int64(67)\n",
      "memory usage: 792.9 KB\n"
     ]
    }
   ],
   "source": [
    "df_cleaned.info()"
   ]
  },
  {
   "cell_type": "raw",
   "id": "5b73b5fe",
   "metadata": {
    "papermill": {
     "duration": 0.021044,
     "end_time": "2024-09-15T17:14:12.275610",
     "exception": false,
     "start_time": "2024-09-15T17:14:12.254566",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Identify numerical columns\n",
    "numerical_features = df_cleaned.select_dtypes(include=['int64', 'float64']).columns\n",
    "\n",
    "# Create a StandardScaler instance\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Fit and transform the numerical features\n",
    "df_cleaned[numerical_features] = scaler.fit_transform(df_cleaned[numerical_features])\n",
    "\n",
    "# Display the transformed DataFrame with scaled numerical features\n",
    "df_cleaned.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "f0d4162f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:12.321227Z",
     "iopub.status.busy": "2024-09-15T17:14:12.320817Z",
     "iopub.status.idle": "2024-09-15T17:14:13.117362Z",
     "shell.execute_reply": "2024-09-15T17:14:13.116417Z"
    },
    "papermill": {
     "duration": 0.821655,
     "end_time": "2024-09-15T17:14:13.120053",
     "exception": false,
     "start_time": "2024-09-15T17:14:12.298398",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x1000 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the correlation matrix\n",
    "correlation_matrix = df_cleaned.corr()\n",
    "\n",
    "# Select the correlations with SalePrice\n",
    "saleprice_corr = correlation_matrix[['SalePrice']].sort_values(by='SalePrice', ascending=False)\n",
    "\n",
    "# Plot the correlation matrix\n",
    "plt.figure(figsize=(12, 10))\n",
    "sns.heatmap(saleprice_corr, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\n",
    "plt.title('Correlation Matrix with SalePrice')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5d830b5e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:13.167790Z",
     "iopub.status.busy": "2024-09-15T17:14:13.167451Z",
     "iopub.status.idle": "2024-09-15T17:14:13.454426Z",
     "shell.execute_reply": "2024-09-15T17:14:13.453561Z"
    },
    "papermill": {
     "duration": 0.313098,
     "end_time": "2024-09-15T17:14:13.456865",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.143767",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, GridSearchCV\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.linear_model import LinearRegression, Lasso, Ridge\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "e692b3af",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:13.504338Z",
     "iopub.status.busy": "2024-09-15T17:14:13.503988Z",
     "iopub.status.idle": "2024-09-15T17:14:13.511577Z",
     "shell.execute_reply": "2024-09-15T17:14:13.510870Z"
    },
    "papermill": {
     "duration": 0.033532,
     "end_time": "2024-09-15T17:14:13.513685",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.480153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Separate features and target variable\n",
    "X = df_cleaned.drop('SalePrice', axis=1)\n",
    "y = df_cleaned['SalePrice']\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "adb37a13",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:13.561651Z",
     "iopub.status.busy": "2024-09-15T17:14:13.561325Z",
     "iopub.status.idle": "2024-09-15T17:14:13.586005Z",
     "shell.execute_reply": "2024-09-15T17:14:13.585059Z"
    },
    "papermill": {
     "duration": 0.050224,
     "end_time": "2024-09-15T17:14:13.587973",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.537749",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>...</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>65.0</td>\n",
       "      <td>8450</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>61</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>80.0</td>\n",
       "      <td>9600</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>298</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>68.0</td>\n",
       "      <td>11250</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>42</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>70</td>\n",
       "      <td>3</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9550</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>84.0</td>\n",
       "      <td>14260</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>192</td>\n",
       "      <td>84</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1455</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>62.0</td>\n",
       "      <td>7917</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1456</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>85.0</td>\n",
       "      <td>13175</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>349</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1457</th>\n",
       "      <td>70</td>\n",
       "      <td>3</td>\n",
       "      <td>66.0</td>\n",
       "      <td>9042</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>2500</td>\n",
       "      <td>5</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1458</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>68.0</td>\n",
       "      <td>9717</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>366</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1459</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>75.0</td>\n",
       "      <td>9937</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>736</td>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1460 rows × 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  \\\n",
       "0             60         3         65.0     8450       1         3   \n",
       "1             20         3         80.0     9600       1         3   \n",
       "2             60         3         68.0    11250       1         0   \n",
       "3             70         3         60.0     9550       1         0   \n",
       "4             60         3         84.0    14260       1         0   \n",
       "...          ...       ...          ...      ...     ...       ...   \n",
       "1455          60         3         62.0     7917       1         3   \n",
       "1456          20         3         85.0    13175       1         3   \n",
       "1457          70         3         66.0     9042       1         3   \n",
       "1458          20         3         68.0     9717       1         3   \n",
       "1459          20         3         75.0     9937       1         3   \n",
       "\n",
       "      LandContour  Utilities  LotConfig  LandSlope  ...  GarageCond  \\\n",
       "0               3          0          4          0  ...           4   \n",
       "1               3          0          2          0  ...           4   \n",
       "2               3          0          4          0  ...           4   \n",
       "3               3          0          0          0  ...           4   \n",
       "4               3          0          2          0  ...           4   \n",
       "...           ...        ...        ...        ...  ...         ...   \n",
       "1455            3          0          4          0  ...           4   \n",
       "1456            3          0          4          0  ...           4   \n",
       "1457            3          0          4          0  ...           4   \n",
       "1458            3          0          4          0  ...           4   \n",
       "1459            3          0          4          0  ...           4   \n",
       "\n",
       "      PavedDrive  WoodDeckSF  OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  \\\n",
       "0              2           0           61         0        0       2    2008   \n",
       "1              2         298            0         0        0       5    2007   \n",
       "2              2           0           42         0        0       9    2008   \n",
       "3              2           0           35         0        0       2    2006   \n",
       "4              2         192           84         0        0      12    2008   \n",
       "...          ...         ...          ...       ...      ...     ...     ...   \n",
       "1455           2           0           40         0        0       8    2007   \n",
       "1456           2         349            0         0        0       2    2010   \n",
       "1457           2           0           60         0     2500       5    2010   \n",
       "1458           2         366            0         0        0       4    2010   \n",
       "1459           2         736           68         0        0       6    2008   \n",
       "\n",
       "      SaleType  SaleCondition  \n",
       "0            8              4  \n",
       "1            8              4  \n",
       "2            8              4  \n",
       "3            8              0  \n",
       "4            8              4  \n",
       "...        ...            ...  \n",
       "1455         8              4  \n",
       "1456         8              4  \n",
       "1457         8              4  \n",
       "1458         8              4  \n",
       "1459         8              4  \n",
       "\n",
       "[1460 rows x 69 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "10d5daf5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:13.636086Z",
     "iopub.status.busy": "2024-09-15T17:14:13.635724Z",
     "iopub.status.idle": "2024-09-15T17:14:13.646264Z",
     "shell.execute_reply": "2024-09-15T17:14:13.645465Z"
    },
    "papermill": {
     "duration": 0.03678,
     "end_time": "2024-09-15T17:14:13.648313",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.611533",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "ef8bad72",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:13.696807Z",
     "iopub.status.busy": "2024-09-15T17:14:13.696492Z",
     "iopub.status.idle": "2024-09-15T17:14:13.701384Z",
     "shell.execute_reply": "2024-09-15T17:14:13.700557Z"
    },
    "papermill": {
     "duration": 0.030715,
     "end_time": "2024-09-15T17:14:13.703351",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.672636",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1168, 69)\n",
      "(292, 69)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape)\n",
    "print(X_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "ceba571f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:13.750675Z",
     "iopub.status.busy": "2024-09-15T17:14:13.750339Z",
     "iopub.status.idle": "2024-09-15T17:14:13.757600Z",
     "shell.execute_reply": "2024-09-15T17:14:13.756697Z"
    },
    "papermill": {
     "duration": 0.033478,
     "end_time": "2024-09-15T17:14:13.759651",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.726173",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.4774930470957166"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['MasVnrArea'].corr(df['SalePrice'])"
   ]
  },
  {
   "cell_type": "raw",
   "id": "0fa0ddce",
   "metadata": {
    "papermill": {
     "duration": 0.023106,
     "end_time": "2024-09-15T17:14:13.807888",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.784782",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "imputer_masvnr = SimpleImputer(strategy='median')\n",
    "X_train['MasVnrArea'] = imputer_masvnr.fit_transform(X_train[['MasVnrArea']])\n",
    "\n",
    "# For 'LotFrontage', fill with the median\n",
    "imputer_lotfrontage = SimpleImputer(strategy='median')\n",
    "X_train['LotFrontage'] = imputer_lotfrontage.fit_transform(X_train[['LotFrontage']])\n",
    "\n",
    "# Check if the dataset still has missing values\n",
    "missing_values = X_train.isna().sum()\n",
    "print(\"Missing values after filling:\")\n",
    "print(missing_values[missing_values > 0])  # Print columns with remaining missing values, if any"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "3e4328fd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:13.855857Z",
     "iopub.status.busy": "2024-09-15T17:14:13.855488Z",
     "iopub.status.idle": "2024-09-15T17:14:13.875072Z",
     "shell.execute_reply": "2024-09-15T17:14:13.874184Z"
    },
    "papermill": {
     "duration": 0.046433,
     "end_time": "2024-09-15T17:14:13.877595",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.831162",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column 'MSSubClass' has no missing values.\n",
      "Column 'MSZoning' has no missing values.\n",
      "Column 'LotFrontage' has 217 missing values.\n",
      "Column 'LotArea' has no missing values.\n",
      "Column 'Street' has no missing values.\n",
      "Column 'LotShape' has no missing values.\n",
      "Column 'LandContour' has no missing values.\n",
      "Column 'Utilities' has no missing values.\n",
      "Column 'LotConfig' has no missing values.\n",
      "Column 'LandSlope' has no missing values.\n",
      "Column 'Neighborhood' has no missing values.\n",
      "Column 'Condition1' has no missing values.\n",
      "Column 'Condition2' has no missing values.\n",
      "Column 'BldgType' has no missing values.\n",
      "Column 'HouseStyle' has no missing values.\n",
      "Column 'OverallQual' has no missing values.\n",
      "Column 'OverallCond' has no missing values.\n",
      "Column 'YearBuilt' has no missing values.\n",
      "Column 'YearRemodAdd' has no missing values.\n",
      "Column 'RoofStyle' has no missing values.\n",
      "Column 'RoofMatl' has no missing values.\n",
      "Column 'Exterior1st' has no missing values.\n",
      "Column 'Exterior2nd' has no missing values.\n",
      "Column 'MasVnrType' has no missing values.\n",
      "Column 'MasVnrArea' has 6 missing values.\n",
      "Column 'ExterQual' has no missing values.\n",
      "Column 'ExterCond' has no missing values.\n",
      "Column 'Foundation' has no missing values.\n",
      "Column 'BsmtQual' has no missing values.\n",
      "Column 'BsmtCond' has no missing values.\n",
      "Column 'BsmtExposure' has no missing values.\n",
      "Column 'BsmtFinType1' has no missing values.\n",
      "Column 'BsmtFinSF1' has no missing values.\n",
      "Column 'BsmtFinType2' has no missing values.\n",
      "Column 'BsmtFinSF2' has no missing values.\n",
      "Column 'BsmtUnfSF' has no missing values.\n",
      "Column 'TotalBsmtSF' has no missing values.\n",
      "Column 'Heating' has no missing values.\n",
      "Column 'HeatingQC' has no missing values.\n",
      "Column 'CentralAir' has no missing values.\n",
      "Column 'Electrical' has no missing values.\n",
      "Column '1stFlrSF' has no missing values.\n",
      "Column '2ndFlrSF' has no missing values.\n",
      "Column 'GrLivArea' has no missing values.\n",
      "Column 'BsmtFullBath' has no missing values.\n",
      "Column 'BsmtHalfBath' has no missing values.\n",
      "Column 'FullBath' has no missing values.\n",
      "Column 'HalfBath' has no missing values.\n",
      "Column 'BedroomAbvGr' has no missing values.\n",
      "Column 'KitchenAbvGr' has no missing values.\n",
      "Column 'KitchenQual' has no missing values.\n",
      "Column 'TotRmsAbvGrd' has no missing values.\n",
      "Column 'Functional' has no missing values.\n",
      "Column 'Fireplaces' has no missing values.\n",
      "Column 'GarageType' has no missing values.\n",
      "Column 'GarageFinish' has no missing values.\n",
      "Column 'GarageCars' has no missing values.\n",
      "Column 'GarageArea' has no missing values.\n",
      "Column 'GarageQual' has no missing values.\n",
      "Column 'GarageCond' has no missing values.\n",
      "Column 'PavedDrive' has no missing values.\n",
      "Column 'WoodDeckSF' has no missing values.\n",
      "Column 'OpenPorchSF' has no missing values.\n",
      "Column 'PoolArea' has no missing values.\n",
      "Column 'MiscVal' has no missing values.\n",
      "Column 'MoSold' has no missing values.\n",
      "Column 'YrSold' has no missing values.\n",
      "Column 'SaleType' has no missing values.\n",
      "Column 'SaleCondition' has no missing values.\n"
     ]
    }
   ],
   "source": [
    "# Loop through each column to check for missing values\n",
    "for column in X_train.columns:\n",
    "    missing_values = X_train[column].isna().sum()\n",
    "    if missing_values > 0:\n",
    "        print(f\"Column '{column}' has {missing_values} missing values.\")\n",
    "    else:\n",
    "        print(f\"Column '{column}' has no missing values.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "9a29b3c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:13.966905Z",
     "iopub.status.busy": "2024-09-15T17:14:13.966517Z",
     "iopub.status.idle": "2024-09-15T17:14:13.972338Z",
     "shell.execute_reply": "2024-09-15T17:14:13.971413Z"
    },
    "papermill": {
     "duration": 0.033197,
     "end_time": "2024-09-15T17:14:13.974642",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.941445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Column 'SalePrice' has no missing values.\n"
     ]
    }
   ],
   "source": [
    "# Check for missing values in y_train (SalePrice)\n",
    "missing_values_y = y_train.isna().sum()\n",
    "\n",
    "if missing_values_y > 0:\n",
    "    print(f\"Column 'SalePrice' has {missing_values_y} missing values.\")\n",
    "else:\n",
    "    print(\"Column 'SalePrice' has no missing values.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9e2ba6c9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:14.024463Z",
     "iopub.status.busy": "2024-09-15T17:14:14.023624Z",
     "iopub.status.idle": "2024-09-15T17:14:14.047615Z",
     "shell.execute_reply": "2024-09-15T17:14:14.046805Z"
    },
    "papermill": {
     "duration": 0.050907,
     "end_time": "2024-09-15T17:14:14.049750",
     "exception": false,
     "start_time": "2024-09-15T17:14:13.998843",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>...</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>254</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>70.0</td>\n",
       "      <td>8400</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1066</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>59.0</td>\n",
       "      <td>7837</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2009</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>638</th>\n",
       "      <td>30</td>\n",
       "      <td>3</td>\n",
       "      <td>67.0</td>\n",
       "      <td>8777</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>328</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>799</th>\n",
       "      <td>50</td>\n",
       "      <td>3</td>\n",
       "      <td>60.0</td>\n",
       "      <td>7200</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>380</th>\n",
       "      <td>50</td>\n",
       "      <td>3</td>\n",
       "      <td>50.0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1095</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9317</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1130</th>\n",
       "      <td>50</td>\n",
       "      <td>3</td>\n",
       "      <td>65.0</td>\n",
       "      <td>7804</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>431</td>\n",
       "      <td>44</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>2009</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1294</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>60.0</td>\n",
       "      <td>8172</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2006</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>860</th>\n",
       "      <td>50</td>\n",
       "      <td>3</td>\n",
       "      <td>55.0</td>\n",
       "      <td>7642</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>240</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1126</th>\n",
       "      <td>120</td>\n",
       "      <td>3</td>\n",
       "      <td>53.0</td>\n",
       "      <td>3684</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>143</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2009</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1168 rows × 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  \\\n",
       "254           20         3         70.0     8400       1         3   \n",
       "1066          60         3         59.0     7837       1         0   \n",
       "638           30         3         67.0     8777       1         3   \n",
       "799           50         3         60.0     7200       1         3   \n",
       "380           50         3         50.0     5000       1         3   \n",
       "...          ...       ...          ...      ...     ...       ...   \n",
       "1095          20         3         78.0     9317       1         0   \n",
       "1130          50         3         65.0     7804       1         3   \n",
       "1294          20         3         60.0     8172       1         3   \n",
       "860           50         3         55.0     7642       1         3   \n",
       "1126         120         3         53.0     3684       1         3   \n",
       "\n",
       "      LandContour  Utilities  LotConfig  LandSlope  ...  GarageCond  \\\n",
       "254             3          0          4          0  ...           4   \n",
       "1066            3          0          4          0  ...           4   \n",
       "638             3          0          4          0  ...           5   \n",
       "799             3          0          0          0  ...           4   \n",
       "380             3          0          4          0  ...           4   \n",
       "...           ...        ...        ...        ...  ...         ...   \n",
       "1095            3          0          4          0  ...           4   \n",
       "1130            3          0          4          0  ...           4   \n",
       "1294            3          0          4          0  ...           4   \n",
       "860             3          0          0          0  ...           4   \n",
       "1126            3          0          4          0  ...           4   \n",
       "\n",
       "      PavedDrive  WoodDeckSF  OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  \\\n",
       "254            2         250            0         0        0       6    2010   \n",
       "1066           2           0           40         0        0       5    2009   \n",
       "638            1         328            0         0        0       5    2008   \n",
       "799            2           0            0         0        0       6    2007   \n",
       "380            2           0            0         0        0       5    2010   \n",
       "...          ...         ...          ...       ...      ...     ...     ...   \n",
       "1095           2           0           22         0        0       3    2007   \n",
       "1130           2         431           44         0        0      12    2009   \n",
       "1294           0           0            0         0        0       4    2006   \n",
       "860            2           0          240         0        0       6    2007   \n",
       "1126           2         143           20         0        0       6    2009   \n",
       "\n",
       "      SaleType  SaleCondition  \n",
       "254          8              4  \n",
       "1066         8              4  \n",
       "638          8              4  \n",
       "799          8              4  \n",
       "380          8              4  \n",
       "...        ...            ...  \n",
       "1095         8              4  \n",
       "1130         8              4  \n",
       "1294         8              4  \n",
       "860          8              4  \n",
       "1126         8              4  \n",
       "\n",
       "[1168 rows x 69 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "0912308b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:14.100312Z",
     "iopub.status.busy": "2024-09-15T17:14:14.099934Z",
     "iopub.status.idle": "2024-09-15T17:14:14.114743Z",
     "shell.execute_reply": "2024-09-15T17:14:14.113803Z"
    },
    "papermill": {
     "duration": 0.043034,
     "end_time": "2024-09-15T17:14:14.117728",
     "exception": false,
     "start_time": "2024-09-15T17:14:14.074694",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Index: 1168 entries, 254 to 1126\n",
      "Data columns (total 69 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   MSSubClass     1168 non-null   int64  \n",
      " 1   MSZoning       1168 non-null   int64  \n",
      " 2   LotFrontage    951 non-null    float64\n",
      " 3   LotArea        1168 non-null   int64  \n",
      " 4   Street         1168 non-null   int64  \n",
      " 5   LotShape       1168 non-null   int64  \n",
      " 6   LandContour    1168 non-null   int64  \n",
      " 7   Utilities      1168 non-null   int64  \n",
      " 8   LotConfig      1168 non-null   int64  \n",
      " 9   LandSlope      1168 non-null   int64  \n",
      " 10  Neighborhood   1168 non-null   int64  \n",
      " 11  Condition1     1168 non-null   int64  \n",
      " 12  Condition2     1168 non-null   int64  \n",
      " 13  BldgType       1168 non-null   int64  \n",
      " 14  HouseStyle     1168 non-null   int64  \n",
      " 15  OverallQual    1168 non-null   int64  \n",
      " 16  OverallCond    1168 non-null   int64  \n",
      " 17  YearBuilt      1168 non-null   int64  \n",
      " 18  YearRemodAdd   1168 non-null   int64  \n",
      " 19  RoofStyle      1168 non-null   int64  \n",
      " 20  RoofMatl       1168 non-null   int64  \n",
      " 21  Exterior1st    1168 non-null   int64  \n",
      " 22  Exterior2nd    1168 non-null   int64  \n",
      " 23  MasVnrType     1168 non-null   int64  \n",
      " 24  MasVnrArea     1162 non-null   float64\n",
      " 25  ExterQual      1168 non-null   int64  \n",
      " 26  ExterCond      1168 non-null   int64  \n",
      " 27  Foundation     1168 non-null   int64  \n",
      " 28  BsmtQual       1168 non-null   int64  \n",
      " 29  BsmtCond       1168 non-null   int64  \n",
      " 30  BsmtExposure   1168 non-null   int64  \n",
      " 31  BsmtFinType1   1168 non-null   int64  \n",
      " 32  BsmtFinSF1     1168 non-null   int64  \n",
      " 33  BsmtFinType2   1168 non-null   int64  \n",
      " 34  BsmtFinSF2     1168 non-null   int64  \n",
      " 35  BsmtUnfSF      1168 non-null   int64  \n",
      " 36  TotalBsmtSF    1168 non-null   int64  \n",
      " 37  Heating        1168 non-null   int64  \n",
      " 38  HeatingQC      1168 non-null   int64  \n",
      " 39  CentralAir     1168 non-null   int64  \n",
      " 40  Electrical     1168 non-null   int64  \n",
      " 41  1stFlrSF       1168 non-null   int64  \n",
      " 42  2ndFlrSF       1168 non-null   int64  \n",
      " 43  GrLivArea      1168 non-null   int64  \n",
      " 44  BsmtFullBath   1168 non-null   int64  \n",
      " 45  BsmtHalfBath   1168 non-null   int64  \n",
      " 46  FullBath       1168 non-null   int64  \n",
      " 47  HalfBath       1168 non-null   int64  \n",
      " 48  BedroomAbvGr   1168 non-null   int64  \n",
      " 49  KitchenAbvGr   1168 non-null   int64  \n",
      " 50  KitchenQual    1168 non-null   int64  \n",
      " 51  TotRmsAbvGrd   1168 non-null   int64  \n",
      " 52  Functional     1168 non-null   int64  \n",
      " 53  Fireplaces     1168 non-null   int64  \n",
      " 54  GarageType     1168 non-null   int64  \n",
      " 55  GarageFinish   1168 non-null   int64  \n",
      " 56  GarageCars     1168 non-null   int64  \n",
      " 57  GarageArea     1168 non-null   int64  \n",
      " 58  GarageQual     1168 non-null   int64  \n",
      " 59  GarageCond     1168 non-null   int64  \n",
      " 60  PavedDrive     1168 non-null   int64  \n",
      " 61  WoodDeckSF     1168 non-null   int64  \n",
      " 62  OpenPorchSF    1168 non-null   int64  \n",
      " 63  PoolArea       1168 non-null   int64  \n",
      " 64  MiscVal        1168 non-null   int64  \n",
      " 65  MoSold         1168 non-null   int64  \n",
      " 66  YrSold         1168 non-null   int32  \n",
      " 67  SaleType       1168 non-null   int64  \n",
      " 68  SaleCondition  1168 non-null   int64  \n",
      "dtypes: float64(2), int32(1), int64(66)\n",
      "memory usage: 634.2 KB\n"
     ]
    }
   ],
   "source": [
    "X_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "d75bb621",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:14.170226Z",
     "iopub.status.busy": "2024-09-15T17:14:14.169880Z",
     "iopub.status.idle": "2024-09-15T17:14:14.177269Z",
     "shell.execute_reply": "2024-09-15T17:14:14.176365Z"
    },
    "papermill": {
     "duration": 0.034958,
     "end_time": "2024-09-15T17:14:14.179258",
     "exception": false,
     "start_time": "2024-09-15T17:14:14.144300",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "254     145000\n",
       "1066    178000\n",
       "638      85000\n",
       "799     175000\n",
       "380     127000\n",
       "         ...  \n",
       "1095    176432\n",
       "1130    135000\n",
       "1294    115000\n",
       "860     189950\n",
       "1126    174000\n",
       "Name: SalePrice, Length: 1168, dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "965224a9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:14.230719Z",
     "iopub.status.busy": "2024-09-15T17:14:14.229892Z",
     "iopub.status.idle": "2024-09-15T17:14:14.255022Z",
     "shell.execute_reply": "2024-09-15T17:14:14.254065Z"
    },
    "papermill": {
     "duration": 0.05359,
     "end_time": "2024-09-15T17:14:14.257171",
     "exception": false,
     "start_time": "2024-09-15T17:14:14.203581",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>...</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>892</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>70.0</td>\n",
       "      <td>8414</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>192</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>2006</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1105</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>98.0</td>\n",
       "      <td>12256</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>186</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>413</th>\n",
       "      <td>30</td>\n",
       "      <td>4</td>\n",
       "      <td>56.0</td>\n",
       "      <td>8960</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>522</th>\n",
       "      <td>50</td>\n",
       "      <td>4</td>\n",
       "      <td>50.0</td>\n",
       "      <td>5000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>2006</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1036</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>89.0</td>\n",
       "      <td>12898</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>228</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>2009</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>479</th>\n",
       "      <td>30</td>\n",
       "      <td>4</td>\n",
       "      <td>50.0</td>\n",
       "      <td>5925</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>72</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2007</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1361</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>124.0</td>\n",
       "      <td>16158</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>168</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2009</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>802</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>63.0</td>\n",
       "      <td>8199</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>36</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>2008</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>651</th>\n",
       "      <td>70</td>\n",
       "      <td>3</td>\n",
       "      <td>60.0</td>\n",
       "      <td>9084</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>10</td>\n",
       "      <td>2009</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>722</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>70.0</td>\n",
       "      <td>8120</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>2009</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>292 rows × 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  \\\n",
       "892           20         3         70.0     8414       1         3   \n",
       "1105          60         3         98.0    12256       1         0   \n",
       "413           30         4         56.0     8960       1         3   \n",
       "522           50         4         50.0     5000       1         3   \n",
       "1036          20         3         89.0    12898       1         0   \n",
       "...          ...       ...          ...      ...     ...       ...   \n",
       "479           30         4         50.0     5925       1         3   \n",
       "1361          20         3        124.0    16158       1         0   \n",
       "802           60         3         63.0     8199       1         3   \n",
       "651           70         3         60.0     9084       1         3   \n",
       "722           20         3         70.0     8120       1         3   \n",
       "\n",
       "      LandContour  Utilities  LotConfig  LandSlope  ...  GarageCond  \\\n",
       "892             3          0          4          0  ...           4   \n",
       "1105            3          0          0          0  ...           4   \n",
       "413             3          0          4          0  ...           4   \n",
       "522             3          0          0          0  ...           4   \n",
       "1036            1          0          4          0  ...           4   \n",
       "...           ...        ...        ...        ...  ...         ...   \n",
       "479             0          0          4          0  ...           4   \n",
       "1361            2          0          4          1  ...           4   \n",
       "802             3          0          4          0  ...           4   \n",
       "651             3          0          4          0  ...           3   \n",
       "722             3          0          4          0  ...           4   \n",
       "\n",
       "      PavedDrive  WoodDeckSF  OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  \\\n",
       "892            2         192            0         0        0       2    2006   \n",
       "1105           2         186           32         0        0       4    2010   \n",
       "413            2           0            0         0        0       3    2010   \n",
       "522            2           0           24         0        0      10    2006   \n",
       "1036           2         228            0         0        0       9    2009   \n",
       "...          ...         ...          ...       ...      ...     ...     ...   \n",
       "479            2           0           72         0        0       3    2007   \n",
       "1361           2         168           36         0        0       6    2009   \n",
       "802            2          36           18         0        0      10    2008   \n",
       "651            1         120            0         0        0      10    2009   \n",
       "722            2           0            0         0        0       7    2009   \n",
       "\n",
       "      SaleType  SaleCondition  \n",
       "892          8              4  \n",
       "1105         8              4  \n",
       "413          8              4  \n",
       "522          8              4  \n",
       "1036         8              4  \n",
       "...        ...            ...  \n",
       "479          8              2  \n",
       "1361         8              4  \n",
       "802          8              4  \n",
       "651          8              4  \n",
       "722          8              4  \n",
       "\n",
       "[292 rows x 69 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f379aa66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:14.310632Z",
     "iopub.status.busy": "2024-09-15T17:14:14.310286Z",
     "iopub.status.idle": "2024-09-15T17:14:16.617532Z",
     "shell.execute_reply": "2024-09-15T17:14:16.616651Z"
    },
    "papermill": {
     "duration": 2.337047,
     "end_time": "2024-09-15T17:14:16.619921",
     "exception": false,
     "start_time": "2024-09-15T17:14:14.282874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_coordinate_descent.py:631: ConvergenceWarning: Objective did not converge. You might want to increase the number of iterations, check the scale of the features or consider increasing regularisation. Duality gap: 3.681e+10, tolerance: 6.967e+08\n",
      "  model = cd_fast.enet_coordinate_descent(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Performance:\n",
      "                          R2           MSE  Accuracy\n",
      "Linear Regression  0.848727  1.160313e+09  0.537671\n",
      "Lasso Regression   0.848909  1.158919e+09  0.534247\n",
      "Ridge Regression   0.848913  1.158890e+09  0.534247\n",
      "Random Forest      0.897278  7.879130e+08  0.667808\n",
      "XGBoost            0.914513  6.557118e+08  0.657534\n",
      "\n",
      "Best model based on R² score: XGBoost\n",
      "\n",
      "Best model performance:\n",
      "R2          9.145132e-01\n",
      "MSE         6.557118e+08\n",
      "Accuracy    6.575342e-01\n",
      "Name: XGBoost, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Import necessary libraries\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.linear_model import LinearRegression, Lasso, Ridge\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Define a function to evaluate models\n",
    "def evaluate_model(model, X_train, X_test, y_train, y_test):\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    r2 = r2_score(y_test, y_pred)\n",
    "    mse = mean_squared_error(y_test, y_pred)\n",
    "    \n",
    "    # Approximate accuracy based on the percentage of predictions within a certain threshold\n",
    "    accuracy = np.mean(np.abs((y_test - y_pred) / y_test) < 0.1)  # Within 10% of actual value\n",
    "    return r2, mse, accuracy\n",
    "\n",
    "# Define a preprocessor pipeline\n",
    "preprocessor = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='median')),  # Handle missing values\n",
    "    ('scaler', StandardScaler())  # Standardize features\n",
    "])\n",
    "\n",
    "\n",
    "# Initialize dictionary to store results\n",
    "results = {}\n",
    "\n",
    "# 1. Linear Regression Pipeline\n",
    "lr_pipeline = Pipeline([\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', LinearRegression())\n",
    "])\n",
    "r2_lr, mse_lr, acc_lr = evaluate_model(lr_pipeline, X_train, X_test, y_train, y_test)\n",
    "results['Linear Regression'] = {'R2': r2_lr, 'MSE': mse_lr, 'Accuracy': acc_lr}\n",
    "\n",
    "# 2. Lasso Regression Pipeline\n",
    "lasso_pipeline = Pipeline([\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', Lasso(alpha=0.1))\n",
    "])\n",
    "r2_lasso, mse_lasso, acc_lasso = evaluate_model(lasso_pipeline, X_train, X_test, y_train, y_test)\n",
    "results['Lasso Regression'] = {'R2': r2_lasso, 'MSE': mse_lasso, 'Accuracy': acc_lasso}\n",
    "\n",
    "# 3. Ridge Regression Pipeline\n",
    "ridge_pipeline = Pipeline([\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', Ridge(alpha=0.1))\n",
    "])\n",
    "r2_ridge, mse_ridge, acc_ridge = evaluate_model(ridge_pipeline, X_train, X_test, y_train, y_test)\n",
    "results['Ridge Regression'] = {'R2': r2_ridge, 'MSE': mse_ridge, 'Accuracy': acc_ridge}\n",
    "\n",
    "# 4. Random Forest Regressor Pipeline\n",
    "rf_pipeline = Pipeline([\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', RandomForestRegressor(n_estimators=100, random_state=42))\n",
    "])\n",
    "r2_rf, mse_rf, acc_rf = evaluate_model(rf_pipeline, X_train, X_test, y_train, y_test)\n",
    "results['Random Forest'] = {'R2': r2_rf, 'MSE': mse_rf, 'Accuracy': acc_rf}\n",
    "\n",
    "# 5. XGBoost Regressor Pipeline\n",
    "xgb_pipeline = Pipeline([\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', XGBRegressor(n_estimators=100, random_state=42))\n",
    "])\n",
    "r2_xgb, mse_xgb, acc_xgb = evaluate_model(xgb_pipeline, X_train, X_test, y_train, y_test)\n",
    "results['XGBoost'] = {'R2': r2_xgb, 'MSE': mse_xgb, 'Accuracy': acc_xgb}\n",
    "\n",
    "# Convert results to a DataFrame for better visualization\n",
    "results_df = pd.DataFrame(results).T\n",
    "\n",
    "# Display the results\n",
    "print(\"Model Performance:\\n\", results_df)\n",
    "\n",
    "# Find the best model based on R² score (or choose MSE/accuracy if preferred)\n",
    "best_model = results_df['R2'].idxmax()\n",
    "print(f\"\\nBest model based on R² score: {best_model}\")\n",
    "\n",
    "# Display the performance of the best model\n",
    "print(f\"\\nBest model performance:\\n{results_df.loc[best_model]}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "7a53ca26",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:16.673385Z",
     "iopub.status.busy": "2024-09-15T17:14:16.673058Z",
     "iopub.status.idle": "2024-09-15T17:14:16.692853Z",
     "shell.execute_reply": "2024-09-15T17:14:16.691926Z"
    },
    "papermill": {
     "duration": 0.04791,
     "end_time": "2024-09-15T17:14:16.694903",
     "exception": false,
     "start_time": "2024-09-15T17:14:16.646993",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>Alley</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>...</th>\n",
       "      <th>ScreenPorch</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>PoolQC</th>\n",
       "      <th>Fence</th>\n",
       "      <th>MiscFeature</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>20</td>\n",
       "      <td>RH</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>120</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Gar2</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>MnPrv</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9978</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>120</td>\n",
       "      <td>RL</td>\n",
       "      <td>43.0</td>\n",
       "      <td>5005</td>\n",
       "      <td>Pave</td>\n",
       "      <td>NaN</td>\n",
       "      <td>IR1</td>\n",
       "      <td>HLS</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>...</td>\n",
       "      <td>144</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 80 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id  MSSubClass MSZoning  LotFrontage  LotArea Street Alley LotShape  \\\n",
       "0  1461          20       RH         80.0    11622   Pave   NaN      Reg   \n",
       "1  1462          20       RL         81.0    14267   Pave   NaN      IR1   \n",
       "2  1463          60       RL         74.0    13830   Pave   NaN      IR1   \n",
       "3  1464          60       RL         78.0     9978   Pave   NaN      IR1   \n",
       "4  1465         120       RL         43.0     5005   Pave   NaN      IR1   \n",
       "\n",
       "  LandContour Utilities  ... ScreenPorch PoolArea PoolQC  Fence MiscFeature  \\\n",
       "0         Lvl    AllPub  ...         120        0    NaN  MnPrv         NaN   \n",
       "1         Lvl    AllPub  ...           0        0    NaN    NaN        Gar2   \n",
       "2         Lvl    AllPub  ...           0        0    NaN  MnPrv         NaN   \n",
       "3         Lvl    AllPub  ...           0        0    NaN    NaN         NaN   \n",
       "4         HLS    AllPub  ...         144        0    NaN    NaN         NaN   \n",
       "\n",
       "  MiscVal MoSold  YrSold  SaleType  SaleCondition  \n",
       "0       0      6    2010        WD         Normal  \n",
       "1   12500      6    2010        WD         Normal  \n",
       "2       0      3    2010        WD         Normal  \n",
       "3       0      6    2010        WD         Normal  \n",
       "4       0      1    2010        WD         Normal  \n",
       "\n",
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "95864efa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:16.746337Z",
     "iopub.status.busy": "2024-09-15T17:14:16.746043Z",
     "iopub.status.idle": "2024-09-15T17:14:16.751357Z",
     "shell.execute_reply": "2024-09-15T17:14:16.750504Z"
    },
    "papermill": {
     "duration": 0.032941,
     "end_time": "2024-09-15T17:14:16.753302",
     "exception": false,
     "start_time": "2024-09-15T17:14:16.720361",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 80)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "02df1cad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:16.805129Z",
     "iopub.status.busy": "2024-09-15T17:14:16.804824Z",
     "iopub.status.idle": "2024-09-15T17:14:16.823315Z",
     "shell.execute_reply": "2024-09-15T17:14:16.821849Z"
    },
    "papermill": {
     "duration": 0.04679,
     "end_time": "2024-09-15T17:14:16.825401",
     "exception": false,
     "start_time": "2024-09-15T17:14:16.778611",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1459 entries, 0 to 1458\n",
      "Data columns (total 80 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   Id             1459 non-null   int64  \n",
      " 1   MSSubClass     1459 non-null   int64  \n",
      " 2   MSZoning       1455 non-null   object \n",
      " 3   LotFrontage    1232 non-null   float64\n",
      " 4   LotArea        1459 non-null   int64  \n",
      " 5   Street         1459 non-null   object \n",
      " 6   Alley          107 non-null    object \n",
      " 7   LotShape       1459 non-null   object \n",
      " 8   LandContour    1459 non-null   object \n",
      " 9   Utilities      1457 non-null   object \n",
      " 10  LotConfig      1459 non-null   object \n",
      " 11  LandSlope      1459 non-null   object \n",
      " 12  Neighborhood   1459 non-null   object \n",
      " 13  Condition1     1459 non-null   object \n",
      " 14  Condition2     1459 non-null   object \n",
      " 15  BldgType       1459 non-null   object \n",
      " 16  HouseStyle     1459 non-null   object \n",
      " 17  OverallQual    1459 non-null   int64  \n",
      " 18  OverallCond    1459 non-null   int64  \n",
      " 19  YearBuilt      1459 non-null   int64  \n",
      " 20  YearRemodAdd   1459 non-null   int64  \n",
      " 21  RoofStyle      1459 non-null   object \n",
      " 22  RoofMatl       1459 non-null   object \n",
      " 23  Exterior1st    1458 non-null   object \n",
      " 24  Exterior2nd    1458 non-null   object \n",
      " 25  MasVnrType     565 non-null    object \n",
      " 26  MasVnrArea     1444 non-null   float64\n",
      " 27  ExterQual      1459 non-null   object \n",
      " 28  ExterCond      1459 non-null   object \n",
      " 29  Foundation     1459 non-null   object \n",
      " 30  BsmtQual       1415 non-null   object \n",
      " 31  BsmtCond       1414 non-null   object \n",
      " 32  BsmtExposure   1415 non-null   object \n",
      " 33  BsmtFinType1   1417 non-null   object \n",
      " 34  BsmtFinSF1     1458 non-null   float64\n",
      " 35  BsmtFinType2   1417 non-null   object \n",
      " 36  BsmtFinSF2     1458 non-null   float64\n",
      " 37  BsmtUnfSF      1458 non-null   float64\n",
      " 38  TotalBsmtSF    1458 non-null   float64\n",
      " 39  Heating        1459 non-null   object \n",
      " 40  HeatingQC      1459 non-null   object \n",
      " 41  CentralAir     1459 non-null   object \n",
      " 42  Electrical     1459 non-null   object \n",
      " 43  1stFlrSF       1459 non-null   int64  \n",
      " 44  2ndFlrSF       1459 non-null   int64  \n",
      " 45  LowQualFinSF   1459 non-null   int64  \n",
      " 46  GrLivArea      1459 non-null   int64  \n",
      " 47  BsmtFullBath   1457 non-null   float64\n",
      " 48  BsmtHalfBath   1457 non-null   float64\n",
      " 49  FullBath       1459 non-null   int64  \n",
      " 50  HalfBath       1459 non-null   int64  \n",
      " 51  BedroomAbvGr   1459 non-null   int64  \n",
      " 52  KitchenAbvGr   1459 non-null   int64  \n",
      " 53  KitchenQual    1458 non-null   object \n",
      " 54  TotRmsAbvGrd   1459 non-null   int64  \n",
      " 55  Functional     1457 non-null   object \n",
      " 56  Fireplaces     1459 non-null   int64  \n",
      " 57  FireplaceQu    729 non-null    object \n",
      " 58  GarageType     1383 non-null   object \n",
      " 59  GarageYrBlt    1381 non-null   float64\n",
      " 60  GarageFinish   1381 non-null   object \n",
      " 61  GarageCars     1458 non-null   float64\n",
      " 62  GarageArea     1458 non-null   float64\n",
      " 63  GarageQual     1381 non-null   object \n",
      " 64  GarageCond     1381 non-null   object \n",
      " 65  PavedDrive     1459 non-null   object \n",
      " 66  WoodDeckSF     1459 non-null   int64  \n",
      " 67  OpenPorchSF    1459 non-null   int64  \n",
      " 68  EnclosedPorch  1459 non-null   int64  \n",
      " 69  3SsnPorch      1459 non-null   int64  \n",
      " 70  ScreenPorch    1459 non-null   int64  \n",
      " 71  PoolArea       1459 non-null   int64  \n",
      " 72  PoolQC         3 non-null      object \n",
      " 73  Fence          290 non-null    object \n",
      " 74  MiscFeature    51 non-null     object \n",
      " 75  MiscVal        1459 non-null   int64  \n",
      " 76  MoSold         1459 non-null   int64  \n",
      " 77  YrSold         1459 non-null   int64  \n",
      " 78  SaleType       1458 non-null   object \n",
      " 79  SaleCondition  1459 non-null   object \n",
      "dtypes: float64(11), int64(26), object(43)\n",
      "memory usage: 912.0+ KB\n"
     ]
    }
   ],
   "source": [
    "test_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "5bf5c654",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:16.879863Z",
     "iopub.status.busy": "2024-09-15T17:14:16.879335Z",
     "iopub.status.idle": "2024-09-15T17:14:16.893623Z",
     "shell.execute_reply": "2024-09-15T17:14:16.892777Z"
    },
    "papermill": {
     "duration": 0.04264,
     "end_time": "2024-09-15T17:14:16.895437",
     "exception": false,
     "start_time": "2024-09-15T17:14:16.852797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PoolQC          1456\n",
       "MiscFeature     1408\n",
       "Alley           1352\n",
       "Fence           1169\n",
       "MasVnrType       894\n",
       "FireplaceQu      730\n",
       "LotFrontage      227\n",
       "GarageFinish      78\n",
       "GarageYrBlt       78\n",
       "GarageCond        78\n",
       "GarageQual        78\n",
       "GarageType        76\n",
       "BsmtCond          45\n",
       "BsmtExposure      44\n",
       "BsmtQual          44\n",
       "BsmtFinType1      42\n",
       "BsmtFinType2      42\n",
       "MasVnrArea        15\n",
       "MSZoning           4\n",
       "Utilities          2\n",
       "Functional         2\n",
       "BsmtFullBath       2\n",
       "BsmtHalfBath       2\n",
       "SaleType           1\n",
       "Exterior1st        1\n",
       "KitchenQual        1\n",
       "GarageCars         1\n",
       "GarageArea         1\n",
       "Exterior2nd        1\n",
       "BsmtFinSF1         1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "# Check for missing values in the test dataset\n",
    "missing_values_test = test_df.isnull().sum().sort_values(ascending=False)\n",
    "\n",
    "missing_values_test.head(30)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f01ca6b3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:16.947977Z",
     "iopub.status.busy": "2024-09-15T17:14:16.947271Z",
     "iopub.status.idle": "2024-09-15T17:14:17.019944Z",
     "shell.execute_reply": "2024-09-15T17:14:17.019086Z"
    },
    "papermill": {
     "duration": 0.101489,
     "end_time": "2024-09-15T17:14:17.022469",
     "exception": false,
     "start_time": "2024-09-15T17:14:16.920980",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Id\n",
      "2919    1\n",
      "1461    1\n",
      "1462    1\n",
      "1463    1\n",
      "1464    1\n",
      "       ..\n",
      "1483    1\n",
      "1484    1\n",
      "1485    1\n",
      "1486    1\n",
      "1487    1\n",
      "Name: count, Length: 1459, dtype: int64\n",
      "--------------------\n",
      "MSSubClass\n",
      "20     543\n",
      "60     276\n",
      "50     143\n",
      "120     95\n",
      "30      70\n",
      "70      68\n",
      "160     65\n",
      "80      60\n",
      "90      57\n",
      "190     31\n",
      "85      28\n",
      "75       7\n",
      "180      7\n",
      "45       6\n",
      "40       2\n",
      "150      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MSZoning\n",
      "RL         1114\n",
      "RM          242\n",
      "FV           74\n",
      "C (all)      15\n",
      "RH           10\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LotFrontage\n",
      "60.0     133\n",
      "80.0      68\n",
      "70.0      63\n",
      "50.0      60\n",
      "75.0      52\n",
      "        ... \n",
      "25.0       1\n",
      "22.0       1\n",
      "123.0      1\n",
      "133.0      1\n",
      "140.0      1\n",
      "Name: count, Length: 115, dtype: int64\n",
      "--------------------\n",
      "LotArea\n",
      "9600     20\n",
      "7200     18\n",
      "6000     17\n",
      "9000     15\n",
      "7500     12\n",
      "         ..\n",
      "16900     1\n",
      "16451     1\n",
      "12304     1\n",
      "8232      1\n",
      "14311     1\n",
      "Name: count, Length: 1106, dtype: int64\n",
      "--------------------\n",
      "Street\n",
      "Pave    1453\n",
      "Grvl       6\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Alley\n",
      "Grvl    70\n",
      "Pave    37\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LotShape\n",
      "Reg    934\n",
      "IR1    484\n",
      "IR2     35\n",
      "IR3      6\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LandContour\n",
      "Lvl    1311\n",
      "HLS      70\n",
      "Bnk      54\n",
      "Low      24\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Utilities\n",
      "AllPub    1457\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LotConfig\n",
      "Inside     1081\n",
      "Corner      248\n",
      "CulDSac      82\n",
      "FR2          38\n",
      "FR3          10\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "LandSlope\n",
      "Gtl    1396\n",
      "Mod      60\n",
      "Sev       3\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Neighborhood\n",
      "NAmes      218\n",
      "OldTown    126\n",
      "CollgCr    117\n",
      "Somerst     96\n",
      "Edwards     94\n",
      "NridgHt     89\n",
      "Gilbert     86\n",
      "Sawyer      77\n",
      "SawyerW     66\n",
      "Mitchel     65\n",
      "NWAmes      58\n",
      "IDOTRR      56\n",
      "Crawfor     52\n",
      "BrkSide     50\n",
      "Timber      34\n",
      "NoRidge     30\n",
      "StoneBr     26\n",
      "SWISU       23\n",
      "MeadowV     20\n",
      "ClearCr     16\n",
      "BrDale      14\n",
      "NPkVill     14\n",
      "Veenker     13\n",
      "Blmngtn     11\n",
      "Blueste      8\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Condition1\n",
      "Norm      1251\n",
      "Feedr       83\n",
      "Artery      44\n",
      "RRAn        24\n",
      "PosN        20\n",
      "RRAe        17\n",
      "PosA        12\n",
      "RRNe         4\n",
      "RRNn         4\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Condition2\n",
      "Norm      1444\n",
      "Feedr        7\n",
      "PosA         3\n",
      "Artery       3\n",
      "PosN         2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BldgType\n",
      "1Fam      1205\n",
      "TwnhsE     113\n",
      "Duplex      57\n",
      "Twnhs       53\n",
      "2fmCon      31\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "HouseStyle\n",
      "1Story    745\n",
      "2Story    427\n",
      "1.5Fin    160\n",
      "SLvl       63\n",
      "SFoyer     46\n",
      "2.5Unf     13\n",
      "1.5Unf      5\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "OverallQual\n",
      "5     428\n",
      "6     357\n",
      "7     281\n",
      "8     174\n",
      "4     110\n",
      "9      64\n",
      "3      20\n",
      "10     13\n",
      "2      10\n",
      "1       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "OverallCond\n",
      "5    824\n",
      "6    279\n",
      "7    185\n",
      "8     72\n",
      "4     44\n",
      "3     25\n",
      "9     19\n",
      "1      6\n",
      "2      5\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "YearBuilt\n",
      "2005    78\n",
      "2006    71\n",
      "2007    60\n",
      "2004    45\n",
      "2003    43\n",
      "        ..\n",
      "1931     1\n",
      "1896     1\n",
      "1902     1\n",
      "1880     1\n",
      "1932     1\n",
      "Name: count, Length: 106, dtype: int64\n",
      "--------------------\n",
      "YearRemodAdd\n",
      "1950    183\n",
      "2006    105\n",
      "2007     88\n",
      "2005     68\n",
      "2004     49\n",
      "       ... \n",
      "1987      6\n",
      "1988      6\n",
      "1985      5\n",
      "1981      4\n",
      "1982      2\n",
      "Name: count, Length: 61, dtype: int64\n",
      "--------------------\n",
      "RoofStyle\n",
      "Gable      1169\n",
      "Hip         265\n",
      "Gambrel      11\n",
      "Flat          7\n",
      "Mansard       4\n",
      "Shed          3\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "RoofMatl\n",
      "CompShg    1442\n",
      "Tar&Grv      12\n",
      "WdShake       4\n",
      "WdShngl       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Exterior1st\n",
      "VinylSd    510\n",
      "MetalSd    230\n",
      "HdBoard    220\n",
      "Wd Sdng    205\n",
      "Plywood    113\n",
      "CemntBd     65\n",
      "BrkFace     37\n",
      "WdShing     30\n",
      "AsbShng     24\n",
      "Stucco      18\n",
      "BrkComm      4\n",
      "AsphShn      1\n",
      "CBlock       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Exterior2nd\n",
      "VinylSd    510\n",
      "MetalSd    233\n",
      "HdBoard    199\n",
      "Wd Sdng    194\n",
      "Plywood    128\n",
      "CmentBd     66\n",
      "Wd Shng     43\n",
      "BrkFace     22\n",
      "Stucco      21\n",
      "AsbShng     18\n",
      "Brk Cmn     15\n",
      "ImStucc      5\n",
      "CBlock       2\n",
      "AsphShn      1\n",
      "Stone        1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MasVnrType\n",
      "BrkFace    434\n",
      "Stone      121\n",
      "BrkCmn      10\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MasVnrArea\n",
      "0.0      877\n",
      "176.0     10\n",
      "144.0      9\n",
      "120.0      8\n",
      "216.0      8\n",
      "        ... \n",
      "432.0      1\n",
      "771.0      1\n",
      "47.0       1\n",
      "434.0      1\n",
      "662.0      1\n",
      "Name: count, Length: 303, dtype: int64\n",
      "--------------------\n",
      "ExterQual\n",
      "TA    892\n",
      "Gd    491\n",
      "Ex     55\n",
      "Fa     21\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "ExterCond\n",
      "TA    1256\n",
      "Gd     153\n",
      "Fa      39\n",
      "Ex       9\n",
      "Po       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Foundation\n",
      "PConc     661\n",
      "CBlock    601\n",
      "BrkTil    165\n",
      "Slab       25\n",
      "Stone       5\n",
      "Wood        2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtQual\n",
      "TA    634\n",
      "Gd    591\n",
      "Ex    137\n",
      "Fa     53\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtCond\n",
      "TA    1295\n",
      "Fa      59\n",
      "Gd      57\n",
      "Po       3\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtExposure\n",
      "No    951\n",
      "Av    197\n",
      "Gd    142\n",
      "Mn    125\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtFinType1\n",
      "GLQ    431\n",
      "Unf    421\n",
      "ALQ    209\n",
      "Rec    155\n",
      "BLQ    121\n",
      "LwQ     80\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtFinSF1\n",
      "0.0       462\n",
      "24.0       15\n",
      "602.0       6\n",
      "276.0       6\n",
      "16.0        5\n",
      "         ... \n",
      "1298.0      1\n",
      "376.0       1\n",
      "953.0       1\n",
      "381.0       1\n",
      "208.0       1\n",
      "Name: count, Length: 669, dtype: int64\n",
      "--------------------\n",
      "BsmtFinType2\n",
      "Unf    1237\n",
      "Rec      51\n",
      "LwQ      41\n",
      "BLQ      35\n",
      "ALQ      33\n",
      "GLQ      20\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtFinSF2\n",
      "0.0      1278\n",
      "483.0       3\n",
      "294.0       3\n",
      "162.0       3\n",
      "60.0        2\n",
      "         ... \n",
      "186.0       1\n",
      "449.0       1\n",
      "48.0        1\n",
      "613.0       1\n",
      "507.0       1\n",
      "Name: count, Length: 161, dtype: int64\n",
      "--------------------\n",
      "BsmtUnfSF\n",
      "0.0      123\n",
      "384.0     11\n",
      "624.0      8\n",
      "672.0      7\n",
      "738.0      7\n",
      "        ... \n",
      "307.0      1\n",
      "556.0      1\n",
      "99.0       1\n",
      "350.0      1\n",
      "517.0      1\n",
      "Name: count, Length: 793, dtype: int64\n",
      "--------------------\n",
      "TotalBsmtSF\n",
      "0.0      41\n",
      "864.0    39\n",
      "960.0    13\n",
      "546.0    12\n",
      "384.0    12\n",
      "         ..\n",
      "818.0     1\n",
      "824.0     1\n",
      "817.0     1\n",
      "637.0     1\n",
      "697.0     1\n",
      "Name: count, Length: 736, dtype: int64\n",
      "--------------------\n",
      "Heating\n",
      "GasA    1446\n",
      "GasW       9\n",
      "Grav       2\n",
      "Wall       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "HeatingQC\n",
      "Ex    752\n",
      "TA    429\n",
      "Gd    233\n",
      "Fa     43\n",
      "Po      2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "CentralAir\n",
      "Y    1358\n",
      "N     101\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Electrical\n",
      "SBrkr    1337\n",
      "FuseA      94\n",
      "FuseF      23\n",
      "FuseP       5\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "1stFlrSF\n",
      "864     21\n",
      "1040    12\n",
      "546     12\n",
      "960     11\n",
      "936     10\n",
      "        ..\n",
      "1147     1\n",
      "502      1\n",
      "714      1\n",
      "492      1\n",
      "885      1\n",
      "Name: count, Length: 789, dtype: int64\n",
      "--------------------\n",
      "2ndFlrSF\n",
      "0       839\n",
      "546      15\n",
      "504       8\n",
      "728       8\n",
      "886       7\n",
      "       ... \n",
      "1182      1\n",
      "363       1\n",
      "973       1\n",
      "308       1\n",
      "651       1\n",
      "Name: count, Length: 407, dtype: int64\n",
      "--------------------\n",
      "LowQualFinSF\n",
      "0       1445\n",
      "362        1\n",
      "1064       1\n",
      "431        1\n",
      "436        1\n",
      "259        1\n",
      "312        1\n",
      "108        1\n",
      "697        1\n",
      "512        1\n",
      "114        1\n",
      "205        1\n",
      "80         1\n",
      "140        1\n",
      "450        1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GrLivArea\n",
      "864     19\n",
      "1092    18\n",
      "1040    11\n",
      "1456    10\n",
      "936      9\n",
      "        ..\n",
      "713      1\n",
      "715      1\n",
      "720      1\n",
      "1146     1\n",
      "1207     1\n",
      "Name: count, Length: 879, dtype: int64\n",
      "--------------------\n",
      "BsmtFullBath\n",
      "0.0    849\n",
      "1.0    584\n",
      "2.0     23\n",
      "3.0      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BsmtHalfBath\n",
      "0.0    1364\n",
      "1.0      91\n",
      "2.0       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "FullBath\n",
      "2    762\n",
      "1    659\n",
      "3     31\n",
      "4      4\n",
      "0      3\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "HalfBath\n",
      "0    921\n",
      "1    525\n",
      "2     13\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "BedroomAbvGr\n",
      "3    792\n",
      "2    384\n",
      "4    187\n",
      "1     53\n",
      "5     27\n",
      "6     14\n",
      "0      2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "KitchenAbvGr\n",
      "1    1393\n",
      "2      64\n",
      "0       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "KitchenQual\n",
      "TA    757\n",
      "Gd    565\n",
      "Ex    105\n",
      "Fa     31\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "TotRmsAbvGrd\n",
      "6     442\n",
      "7     320\n",
      "5     308\n",
      "8     160\n",
      "4      99\n",
      "9      68\n",
      "10     33\n",
      "11     14\n",
      "3       8\n",
      "12      5\n",
      "13      1\n",
      "15      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Functional\n",
      "Typ     1357\n",
      "Min2      36\n",
      "Min1      34\n",
      "Mod       20\n",
      "Maj1       5\n",
      "Maj2       4\n",
      "Sev        1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Fireplaces\n",
      "0    730\n",
      "1    618\n",
      "2    104\n",
      "3      6\n",
      "4      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "FireplaceQu\n",
      "Gd    364\n",
      "TA    279\n",
      "Fa     41\n",
      "Po     26\n",
      "Ex     19\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageType\n",
      "Attchd     853\n",
      "Detchd     392\n",
      "BuiltIn     98\n",
      "Basment     17\n",
      "2Types      17\n",
      "CarPort      6\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageYrBlt\n",
      "2005.0    77\n",
      "2007.0    66\n",
      "2006.0    56\n",
      "2004.0    46\n",
      "2003.0    42\n",
      "          ..\n",
      "1896.0     1\n",
      "1916.0     1\n",
      "1918.0     1\n",
      "1932.0     1\n",
      "1919.0     1\n",
      "Name: count, Length: 97, dtype: int64\n",
      "--------------------\n",
      "GarageFinish\n",
      "Unf    625\n",
      "RFn    389\n",
      "Fin    367\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageCars\n",
      "2.0    770\n",
      "1.0    407\n",
      "3.0    193\n",
      "0.0     76\n",
      "4.0     11\n",
      "5.0      1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageArea\n",
      "0.0       76\n",
      "576.0     50\n",
      "440.0     47\n",
      "484.0     34\n",
      "400.0     33\n",
      "          ..\n",
      "582.0      1\n",
      "485.0      1\n",
      "543.0      1\n",
      "831.0      1\n",
      "1085.0     1\n",
      "Name: count, Length: 459, dtype: int64\n",
      "--------------------\n",
      "GarageQual\n",
      "TA    1293\n",
      "Fa      76\n",
      "Gd      10\n",
      "Po       2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "GarageCond\n",
      "TA    1328\n",
      "Fa      39\n",
      "Po       7\n",
      "Gd       6\n",
      "Ex       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "PavedDrive\n",
      "Y    1301\n",
      "N     126\n",
      "P      32\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "WoodDeckSF\n",
      "0      762\n",
      "100     38\n",
      "192     32\n",
      "144     28\n",
      "168     28\n",
      "      ... \n",
      "121      1\n",
      "414      1\n",
      "657      1\n",
      "351      1\n",
      "444      1\n",
      "Name: count, Length: 263, dtype: int64\n",
      "--------------------\n",
      "OpenPorchSF\n",
      "0      642\n",
      "48      29\n",
      "32      27\n",
      "40      25\n",
      "36      23\n",
      "      ... \n",
      "188      1\n",
      "215      1\n",
      "222      1\n",
      "193      1\n",
      "204      1\n",
      "Name: count, Length: 203, dtype: int64\n",
      "--------------------\n",
      "EnclosedPorch\n",
      "0      1208\n",
      "112       7\n",
      "96        7\n",
      "168       7\n",
      "84        6\n",
      "       ... \n",
      "225       1\n",
      "208       1\n",
      "34        1\n",
      "213       1\n",
      "102       1\n",
      "Name: count, Length: 131, dtype: int64\n",
      "--------------------\n",
      "3SsnPorch\n",
      "0      1446\n",
      "153       2\n",
      "224       1\n",
      "225       1\n",
      "255       1\n",
      "360       1\n",
      "150       1\n",
      "174       1\n",
      "120       1\n",
      "219       1\n",
      "176       1\n",
      "86        1\n",
      "323       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "ScreenPorch\n",
      "0      1319\n",
      "144      10\n",
      "168       7\n",
      "216       6\n",
      "192       5\n",
      "       ... \n",
      "171       1\n",
      "135       1\n",
      "322       1\n",
      "174       1\n",
      "141       1\n",
      "Name: count, Length: 75, dtype: int64\n",
      "--------------------\n",
      "PoolArea\n",
      "0      1453\n",
      "144       1\n",
      "368       1\n",
      "444       1\n",
      "228       1\n",
      "561       1\n",
      "800       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "PoolQC\n",
      "Ex    2\n",
      "Gd    1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "Fence\n",
      "MnPrv    172\n",
      "GdPrv     59\n",
      "GdWo      58\n",
      "MnWw       1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MiscFeature\n",
      "Shed    46\n",
      "Gar2     3\n",
      "Othr     2\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MiscVal\n",
      "0        1408\n",
      "400         7\n",
      "450         5\n",
      "500         5\n",
      "600         4\n",
      "1500        3\n",
      "650         3\n",
      "2000        3\n",
      "700         2\n",
      "3000        2\n",
      "4500        2\n",
      "1200        1\n",
      "80          1\n",
      "300         1\n",
      "12500       1\n",
      "490         1\n",
      "2500        1\n",
      "900         1\n",
      "6500        1\n",
      "750         1\n",
      "1000        1\n",
      "17000       1\n",
      "1512        1\n",
      "455         1\n",
      "460         1\n",
      "420         1\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "MoSold\n",
      "6     250\n",
      "7     212\n",
      "5     190\n",
      "4     138\n",
      "3     126\n",
      "8     111\n",
      "9      95\n",
      "10     84\n",
      "2      81\n",
      "1      64\n",
      "11     63\n",
      "12     45\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "YrSold\n",
      "2007    363\n",
      "2008    318\n",
      "2009    309\n",
      "2006    305\n",
      "2010    164\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "SaleType\n",
      "WD       1258\n",
      "New       117\n",
      "COD        44\n",
      "ConLD      17\n",
      "CWD         8\n",
      "Oth         4\n",
      "ConLI       4\n",
      "ConLw       3\n",
      "Con         3\n",
      "Name: count, dtype: int64\n",
      "--------------------\n",
      "SaleCondition\n",
      "Normal     1204\n",
      "Partial     120\n",
      "Abnorml      89\n",
      "Family       26\n",
      "Alloca       12\n",
      "AdjLand       8\n",
      "Name: count, dtype: int64\n",
      "--------------------\n"
     ]
    }
   ],
   "source": [
    "for column in test_df.columns:\n",
    "    print(test_df[column].value_counts())\n",
    "    print('-'*20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "28555a57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.078547Z",
     "iopub.status.busy": "2024-09-15T17:14:17.078250Z",
     "iopub.status.idle": "2024-09-15T17:14:17.305166Z",
     "shell.execute_reply": "2024-09-15T17:14:17.304092Z"
    },
    "papermill": {
     "duration": 0.255834,
     "end_time": "2024-09-15T17:14:17.307331",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.051497",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing values after cleaning:\n",
      "Series([], dtype: int64)\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Load the dataset (ensure you provide the correct path)\n",
    "df2 = pd.read_csv('/kaggle/input/datatask1/test.csv')  # Update with your dataset path\n",
    "\n",
    "# Step 1: Remove Outliers using IQR method\n",
    "def remove_outliers(df2):\n",
    "    for column in df2.select_dtypes(include=[np.number]).columns:\n",
    "        Q1 = df2[column].quantile(0.25)\n",
    "        Q3 = df2[column].quantile(0.75)\n",
    "        IQR = Q3 - Q1\n",
    "        lower_bound = Q1 - 1.5 * IQR\n",
    "        upper_bound = Q3 + 1.5 * IQR\n",
    "        # Filter the dataframe by removing outliers\n",
    "        df2 = df2[(df2[column] >= lower_bound) & (df2[column] <= upper_bound)]\n",
    "    return df2\n",
    "\n",
    "df2_cleaned = remove_outliers(df)\n",
    "\n",
    "# Step 2: Handle Missing Values\n",
    "\n",
    "# Fill missing values in 'LotFrontage' with the median of the column\n",
    "df2_cleaned['LotFrontage'] = df2_cleaned['LotFrontage'].fillna(df2_cleaned['LotFrontage'].median())\n",
    "\n",
    "# For numerical features - fill missing values with the median of each column\n",
    "for column in df2_cleaned.select_dtypes(include=[np.number]).columns:\n",
    "    df2_cleaned[column] = df2_cleaned[column].fillna(df2_cleaned[column].median())\n",
    "\n",
    "# For categorical features - handle missing values\n",
    "for column in df2_cleaned.select_dtypes(include=[object]).columns:\n",
    "    if df2_cleaned[column].isnull().sum() > 0:\n",
    "        if column == \"PoolQC\":\n",
    "            # Remove the column if it has too many missing values\n",
    "            df2_cleaned = df2_cleaned.drop(columns=[column])\n",
    "        else:\n",
    "            # Fill missing categorical values with the mode (most frequent value)\n",
    "            df2_cleaned[column] = df2_cleaned[column].fillna(df2_cleaned[column].mode()[0])\n",
    "\n",
    "# Step 3: Optionally, drop columns with too many missing values\n",
    "# Drop columns where more than 50% of the values are missing\n",
    "missing_value_threshold = 0.5\n",
    "df2_cleaned = df2_cleaned.loc[:, df2_cleaned.isnull().mean() < missing_value_threshold]\n",
    "\n",
    "# Check if the dataset still has missing values after cleaning\n",
    "missing_values = df2_cleaned.isnull().sum()\n",
    "print(\"Missing values after cleaning:\")\n",
    "print(missing_values[missing_values > 0])  # Print columns with remaining missing values, if any\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "899745e0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.362957Z",
     "iopub.status.busy": "2024-09-15T17:14:17.362643Z",
     "iopub.status.idle": "2024-09-15T17:14:17.382602Z",
     "shell.execute_reply": "2024-09-15T17:14:17.381915Z"
    },
    "papermill": {
     "duration": 0.049003,
     "end_time": "2024-09-15T17:14:17.384462",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.335459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Save the cleaned dataset\n",
    "df2_cleaned.to_csv('/kaggle/working/cleaned_dataset_test.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "0255e54b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.438526Z",
     "iopub.status.busy": "2024-09-15T17:14:17.438229Z",
     "iopub.status.idle": "2024-09-15T17:14:17.458591Z",
     "shell.execute_reply": "2024-09-15T17:14:17.457755Z"
    },
    "papermill": {
     "duration": 0.049776,
     "end_time": "2024-09-15T17:14:17.460538",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.410762",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Id</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSSubClass</th>\n",
       "      <td>60</td>\n",
       "      <td>60</td>\n",
       "      <td>60</td>\n",
       "      <td>20</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MSZoning</th>\n",
       "      <td>RL</td>\n",
       "      <td>RL</td>\n",
       "      <td>RL</td>\n",
       "      <td>RL</td>\n",
       "      <td>RL</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LotFrontage</th>\n",
       "      <td>65.0</td>\n",
       "      <td>68.0</td>\n",
       "      <td>84.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LotArea</th>\n",
       "      <td>8450</td>\n",
       "      <td>11250</td>\n",
       "      <td>14260</td>\n",
       "      <td>10084</td>\n",
       "      <td>11200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MoSold</th>\n",
       "      <td>2</td>\n",
       "      <td>9</td>\n",
       "      <td>12</td>\n",
       "      <td>8</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YrSold</th>\n",
       "      <td>2008</td>\n",
       "      <td>2008</td>\n",
       "      <td>2008</td>\n",
       "      <td>2007</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SaleType</th>\n",
       "      <td>WD</td>\n",
       "      <td>WD</td>\n",
       "      <td>WD</td>\n",
       "      <td>WD</td>\n",
       "      <td>WD</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SaleCondition</th>\n",
       "      <td>Normal</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Normal</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SalePrice</th>\n",
       "      <td>208500</td>\n",
       "      <td>223500</td>\n",
       "      <td>250000</td>\n",
       "      <td>307000</td>\n",
       "      <td>129500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    0       1       2       3       4\n",
       "Id                  1       3       5       7      11\n",
       "MSSubClass         60      60      60      20      20\n",
       "MSZoning           RL      RL      RL      RL      RL\n",
       "LotFrontage      65.0    68.0    84.0    75.0    70.0\n",
       "LotArea          8450   11250   14260   10084   11200\n",
       "...               ...     ...     ...     ...     ...\n",
       "MoSold              2       9      12       8       2\n",
       "YrSold           2008    2008    2008    2007    2008\n",
       "SaleType           WD      WD      WD      WD      WD\n",
       "SaleCondition  Normal  Normal  Normal  Normal  Normal\n",
       "SalePrice      208500  223500  250000  307000  129500\n",
       "\n",
       "[80 rows x 5 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2_cleaned=pd.read_csv('/kaggle/working/cleaned_dataset_test.csv')\n",
    "df2_cleaned.head().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "bab0988a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.515529Z",
     "iopub.status.busy": "2024-09-15T17:14:17.514902Z",
     "iopub.status.idle": "2024-09-15T17:14:17.525752Z",
     "shell.execute_reply": "2024-09-15T17:14:17.524872Z"
    },
    "papermill": {
     "duration": 0.040547,
     "end_time": "2024-09-15T17:14:17.527612",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.487065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GarageCond       0\n",
       "PavedDrive       0\n",
       "WoodDeckSF       0\n",
       "OpenPorchSF      0\n",
       "EnclosedPorch    0\n",
       "3SsnPorch        0\n",
       "ScreenPorch      0\n",
       "PoolArea         0\n",
       "LandContour      0\n",
       "Utilities        0\n",
       "LotConfig        0\n",
       "LandSlope        0\n",
       "Neighborhood     0\n",
       "Condition1       0\n",
       "Condition2       0\n",
       "BldgType         0\n",
       "HouseStyle       0\n",
       "OverallQual      0\n",
       "OverallCond      0\n",
       "YearBuilt        0\n",
       "YearRemodAdd     0\n",
       "RoofStyle        0\n",
       "RoofMatl         0\n",
       "Exterior1st      0\n",
       "Exterior2nd      0\n",
       "MasVnrType       0\n",
       "MasVnrArea       0\n",
       "ExterQual        0\n",
       "ExterCond        0\n",
       "Foundation       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Check for missing values in the test dataset\n",
    "missing_values_test = df2_cleaned.isnull().sum().sort_values(ascending=False)\n",
    "\n",
    "missing_values_test.head(30)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "d256d213",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.583510Z",
     "iopub.status.busy": "2024-09-15T17:14:17.583165Z",
     "iopub.status.idle": "2024-09-15T17:14:17.590169Z",
     "shell.execute_reply": "2024-09-15T17:14:17.589349Z"
    },
    "papermill": {
     "duration": 0.037588,
     "end_time": "2024-09-15T17:14:17.592232",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.554644",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Drop irrelevant columns\n",
    "irrelevant_columns = [\n",
    "    'Id',  # If there's an ID column\n",
    "    'Alley',  # If not useful for the model\n",
    "    'PoolQC',  # Pool quality might not be useful\n",
    "    'Fence',  # Fence quality might not be predictive\n",
    "    'MiscFeature',  # Miscellaneous features often have little predictive power\n",
    "    'FireplaceQu',  # If `Fireplaces` is sufficient\n",
    "    'GarageYrBlt',  # If garage features are sufficient\n",
    "    '3SsnPorch',  # If not useful\n",
    "    'ScreenPorch',  # If not useful\n",
    "    'LowQualFinSF',  # If not useful\n",
    "    'EnclosedPorch'  # If not useful\n",
    "]\n",
    "\n",
    "df2_cleaned = df2.drop(columns=irrelevant_columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4d86aa3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.649976Z",
     "iopub.status.busy": "2024-09-15T17:14:17.649422Z",
     "iopub.status.idle": "2024-09-15T17:14:17.678919Z",
     "shell.execute_reply": "2024-09-15T17:14:17.677954Z"
    },
    "papermill": {
     "duration": 0.060135,
     "end_time": "2024-09-15T17:14:17.680934",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.620799",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>...</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>RH</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>Pave</td>\n",
       "      <td>Reg</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>RL</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Corner</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>393</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>212</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>RL</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9978</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>Lvl</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>360</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>120</td>\n",
       "      <td>RL</td>\n",
       "      <td>43.0</td>\n",
       "      <td>5005</td>\n",
       "      <td>Pave</td>\n",
       "      <td>IR1</td>\n",
       "      <td>HLS</td>\n",
       "      <td>AllPub</td>\n",
       "      <td>Inside</td>\n",
       "      <td>Gtl</td>\n",
       "      <td>...</td>\n",
       "      <td>TA</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>WD</td>\n",
       "      <td>Normal</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSSubClass MSZoning  LotFrontage  LotArea Street LotShape LandContour  \\\n",
       "0          20       RH         80.0    11622   Pave      Reg         Lvl   \n",
       "1          20       RL         81.0    14267   Pave      IR1         Lvl   \n",
       "2          60       RL         74.0    13830   Pave      IR1         Lvl   \n",
       "3          60       RL         78.0     9978   Pave      IR1         Lvl   \n",
       "4         120       RL         43.0     5005   Pave      IR1         HLS   \n",
       "\n",
       "  Utilities LotConfig LandSlope  ... GarageCond PavedDrive WoodDeckSF  \\\n",
       "0    AllPub    Inside       Gtl  ...         TA          Y        140   \n",
       "1    AllPub    Corner       Gtl  ...         TA          Y        393   \n",
       "2    AllPub    Inside       Gtl  ...         TA          Y        212   \n",
       "3    AllPub    Inside       Gtl  ...         TA          Y        360   \n",
       "4    AllPub    Inside       Gtl  ...         TA          Y          0   \n",
       "\n",
       "  OpenPorchSF PoolArea  MiscVal  MoSold  YrSold  SaleType SaleCondition  \n",
       "0           0        0        0       6    2010        WD        Normal  \n",
       "1          36        0    12500       6    2010        WD        Normal  \n",
       "2          34        0        0       3    2010        WD        Normal  \n",
       "3          36        0        0       6    2010        WD        Normal  \n",
       "4          82        0        0       1    2010        WD        Normal  \n",
       "\n",
       "[5 rows x 69 columns]"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import ColumnTransformer\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "# Updated list of categorical columns\n",
    "categorical_columns = [\n",
    "    'MSSubClass', 'MSZoning', 'Street', 'LotShape', 'LandContour',\n",
    "    'Utilities', 'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1',\n",
    "    'Condition2', 'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl',\n",
    "    'Exterior1st', 'Exterior2nd', 'MasVnrType', 'Foundation', 'Heating',\n",
    "    'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual', 'Functional',\n",
    "    'Fireplaces', 'GarageType', 'GarageFinish', 'PavedDrive', \n",
    "     'SaleType', 'SaleCondition'\n",
    "]\n",
    "\n",
    "# Ensure all categorical columns are in the DataFrame\n",
    "present_columns = [col for col in categorical_columns if col in df2_cleaned.columns]\n",
    "missing_columns = [col for col in categorical_columns if col not in df2_cleaned.columns]\n",
    "\n",
    "if missing_columns:\n",
    "    print(f\"Missing columns: {missing_columns}\")\n",
    "\n",
    "# Convert YrSold to datetime\n",
    "df2_cleaned['YrSold'] = pd.to_datetime(df2_cleaned['YrSold'], format='%Y').dt.year\n",
    "\n",
    "# Optional: Extract month and year if needed for other date columns\n",
    "df2_cleaned['MoSold'] = df2_cleaned['MoSold'].astype(int)  # Convert MoSold to integer\n",
    "\n",
    "# Define the preprocessor with imputation for missing values and scaling for numerical features\n",
    "preprocessor = ColumnTransformer(\n",
    "    transformers=[\n",
    "        ('cat', OneHotEncoder(handle_unknown='ignore', drop='first'), present_columns)\n",
    "    ],\n",
    "    remainder='passthrough'  # Keep other columns unchanged\n",
    ")\n",
    "\n",
    "# Display the first few rows of the updated DataFrame\n",
    "df2_cleaned.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8f6f7ccf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.736749Z",
     "iopub.status.busy": "2024-09-15T17:14:17.736477Z",
     "iopub.status.idle": "2024-09-15T17:14:17.754464Z",
     "shell.execute_reply": "2024-09-15T17:14:17.753537Z"
    },
    "papermill": {
     "duration": 0.047669,
     "end_time": "2024-09-15T17:14:17.756556",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.708887",
     "status": "completed"
    },
    "scrolled": true,
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1459 entries, 0 to 1458\n",
      "Data columns (total 69 columns):\n",
      " #   Column         Non-Null Count  Dtype  \n",
      "---  ------         --------------  -----  \n",
      " 0   MSSubClass     1459 non-null   int64  \n",
      " 1   MSZoning       1455 non-null   object \n",
      " 2   LotFrontage    1232 non-null   float64\n",
      " 3   LotArea        1459 non-null   int64  \n",
      " 4   Street         1459 non-null   object \n",
      " 5   LotShape       1459 non-null   object \n",
      " 6   LandContour    1459 non-null   object \n",
      " 7   Utilities      1457 non-null   object \n",
      " 8   LotConfig      1459 non-null   object \n",
      " 9   LandSlope      1459 non-null   object \n",
      " 10  Neighborhood   1459 non-null   object \n",
      " 11  Condition1     1459 non-null   object \n",
      " 12  Condition2     1459 non-null   object \n",
      " 13  BldgType       1459 non-null   object \n",
      " 14  HouseStyle     1459 non-null   object \n",
      " 15  OverallQual    1459 non-null   int64  \n",
      " 16  OverallCond    1459 non-null   int64  \n",
      " 17  YearBuilt      1459 non-null   int64  \n",
      " 18  YearRemodAdd   1459 non-null   int64  \n",
      " 19  RoofStyle      1459 non-null   object \n",
      " 20  RoofMatl       1459 non-null   object \n",
      " 21  Exterior1st    1458 non-null   object \n",
      " 22  Exterior2nd    1458 non-null   object \n",
      " 23  MasVnrType     565 non-null    object \n",
      " 24  MasVnrArea     1444 non-null   float64\n",
      " 25  ExterQual      1459 non-null   object \n",
      " 26  ExterCond      1459 non-null   object \n",
      " 27  Foundation     1459 non-null   object \n",
      " 28  BsmtQual       1415 non-null   object \n",
      " 29  BsmtCond       1414 non-null   object \n",
      " 30  BsmtExposure   1415 non-null   object \n",
      " 31  BsmtFinType1   1417 non-null   object \n",
      " 32  BsmtFinSF1     1458 non-null   float64\n",
      " 33  BsmtFinType2   1417 non-null   object \n",
      " 34  BsmtFinSF2     1458 non-null   float64\n",
      " 35  BsmtUnfSF      1458 non-null   float64\n",
      " 36  TotalBsmtSF    1458 non-null   float64\n",
      " 37  Heating        1459 non-null   object \n",
      " 38  HeatingQC      1459 non-null   object \n",
      " 39  CentralAir     1459 non-null   object \n",
      " 40  Electrical     1459 non-null   object \n",
      " 41  1stFlrSF       1459 non-null   int64  \n",
      " 42  2ndFlrSF       1459 non-null   int64  \n",
      " 43  GrLivArea      1459 non-null   int64  \n",
      " 44  BsmtFullBath   1457 non-null   float64\n",
      " 45  BsmtHalfBath   1457 non-null   float64\n",
      " 46  FullBath       1459 non-null   int64  \n",
      " 47  HalfBath       1459 non-null   int64  \n",
      " 48  BedroomAbvGr   1459 non-null   int64  \n",
      " 49  KitchenAbvGr   1459 non-null   int64  \n",
      " 50  KitchenQual    1458 non-null   object \n",
      " 51  TotRmsAbvGrd   1459 non-null   int64  \n",
      " 52  Functional     1457 non-null   object \n",
      " 53  Fireplaces     1459 non-null   int64  \n",
      " 54  GarageType     1383 non-null   object \n",
      " 55  GarageFinish   1381 non-null   object \n",
      " 56  GarageCars     1458 non-null   float64\n",
      " 57  GarageArea     1458 non-null   float64\n",
      " 58  GarageQual     1381 non-null   object \n",
      " 59  GarageCond     1381 non-null   object \n",
      " 60  PavedDrive     1459 non-null   object \n",
      " 61  WoodDeckSF     1459 non-null   int64  \n",
      " 62  OpenPorchSF    1459 non-null   int64  \n",
      " 63  PoolArea       1459 non-null   int64  \n",
      " 64  MiscVal        1459 non-null   int64  \n",
      " 65  MoSold         1459 non-null   int64  \n",
      " 66  YrSold         1459 non-null   int32  \n",
      " 67  SaleType       1458 non-null   object \n",
      " 68  SaleCondition  1459 non-null   object \n",
      "dtypes: float64(10), int32(1), int64(20), object(38)\n",
      "memory usage: 780.9+ KB\n"
     ]
    }
   ],
   "source": [
    "df2_cleaned.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e1bb8389",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.812519Z",
     "iopub.status.busy": "2024-09-15T17:14:17.812213Z",
     "iopub.status.idle": "2024-09-15T17:14:17.818679Z",
     "shell.execute_reply": "2024-09-15T17:14:17.817676Z"
    },
    "papermill": {
     "duration": 0.036369,
     "end_time": "2024-09-15T17:14:17.820785",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.784416",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Remaining object columns: Index(['MSZoning', 'Street', 'LotShape', 'LandContour', 'Utilities',\n",
      "       'LotConfig', 'LandSlope', 'Neighborhood', 'Condition1', 'Condition2',\n",
      "       'BldgType', 'HouseStyle', 'RoofStyle', 'RoofMatl', 'Exterior1st',\n",
      "       'Exterior2nd', 'MasVnrType', 'ExterQual', 'ExterCond', 'Foundation',\n",
      "       'BsmtQual', 'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinType2',\n",
      "       'Heating', 'HeatingQC', 'CentralAir', 'Electrical', 'KitchenQual',\n",
      "       'Functional', 'GarageType', 'GarageFinish', 'GarageQual', 'GarageCond',\n",
      "       'PavedDrive', 'SaleType', 'SaleCondition'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# List all columns with dtype 'object'\n",
    "remaining_object_columns = df2_cleaned.select_dtypes(include=['object']).columns\n",
    "\n",
    "# Display remaining object columns\n",
    "print(\"Remaining object columns:\", remaining_object_columns)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "4139020a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.877081Z",
     "iopub.status.busy": "2024-09-15T17:14:17.876766Z",
     "iopub.status.idle": "2024-09-15T17:14:17.882344Z",
     "shell.execute_reply": "2024-09-15T17:14:17.881504Z"
    },
    "papermill": {
     "duration": 0.035378,
     "end_time": "2024-09-15T17:14:17.884208",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.848830",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 69)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2_cleaned.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "fd4bade9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:17.939631Z",
     "iopub.status.busy": "2024-09-15T17:14:17.939337Z",
     "iopub.status.idle": "2024-09-15T17:14:17.995083Z",
     "shell.execute_reply": "2024-09-15T17:14:17.994226Z"
    },
    "papermill": {
     "duration": 0.085495,
     "end_time": "2024-09-15T17:14:17.996969",
     "exception": false,
     "start_time": "2024-09-15T17:14:17.911474",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>...</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>393</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>212</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9978</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>360</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>120</td>\n",
       "      <td>3</td>\n",
       "      <td>43.0</td>\n",
       "      <td>5005</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  LandContour  \\\n",
       "0          20         2         80.0    11622       1         3            3   \n",
       "1          20         3         81.0    14267       1         0            3   \n",
       "2          60         3         74.0    13830       1         0            3   \n",
       "3          60         3         78.0     9978       1         0            3   \n",
       "4         120         3         43.0     5005       1         0            1   \n",
       "\n",
       "   Utilities  LotConfig  LandSlope  ...  GarageCond  PavedDrive  WoodDeckSF  \\\n",
       "0          0          4          0  ...           4           2         140   \n",
       "1          0          0          0  ...           4           2         393   \n",
       "2          0          4          0  ...           4           2         212   \n",
       "3          0          4          0  ...           4           2         360   \n",
       "4          0          4          0  ...           4           2           0   \n",
       "\n",
       "   OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n",
       "0            0         0        0       6    2010         8              4  \n",
       "1           36         0    12500       6    2010         8              4  \n",
       "2           34         0        0       3    2010         8              4  \n",
       "3           36         0        0       6    2010         8              4  \n",
       "4           82         0        0       1    2010         8              4  \n",
       "\n",
       "[5 rows x 69 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Initialize LabelEncoder\n",
    "label_encoders = {}\n",
    "\n",
    "# Apply LabelEncoder to each object column\n",
    "for col in remaining_object_columns:\n",
    "    le = LabelEncoder()\n",
    "    df2_cleaned[col] = le.fit_transform(df2_cleaned[col].astype(str))\n",
    "    label_encoders[col] = le\n",
    "\n",
    "df2_cleaned.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "dbc3df7d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.059899Z",
     "iopub.status.busy": "2024-09-15T17:14:18.059102Z",
     "iopub.status.idle": "2024-09-15T17:14:18.065292Z",
     "shell.execute_reply": "2024-09-15T17:14:18.064447Z"
    },
    "papermill": {
     "duration": 0.038737,
     "end_time": "2024-09-15T17:14:18.067183",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.028446",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 69)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2_cleaned.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "e6a3382c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.124379Z",
     "iopub.status.busy": "2024-09-15T17:14:18.124060Z",
     "iopub.status.idle": "2024-09-15T17:14:18.130334Z",
     "shell.execute_reply": "2024-09-15T17:14:18.129351Z"
    },
    "papermill": {
     "duration": 0.037301,
     "end_time": "2024-09-15T17:14:18.132511",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.095210",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "X2 = df2_cleaned.copy()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "e67cd0f7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.192797Z",
     "iopub.status.busy": "2024-09-15T17:14:18.192226Z",
     "iopub.status.idle": "2024-09-15T17:14:18.211407Z",
     "shell.execute_reply": "2024-09-15T17:14:18.210506Z"
    },
    "papermill": {
     "duration": 0.050503,
     "end_time": "2024-09-15T17:14:18.213493",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.162990",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>MSSubClass</th>\n",
       "      <th>MSZoning</th>\n",
       "      <th>LotFrontage</th>\n",
       "      <th>LotArea</th>\n",
       "      <th>Street</th>\n",
       "      <th>LotShape</th>\n",
       "      <th>LandContour</th>\n",
       "      <th>Utilities</th>\n",
       "      <th>LotConfig</th>\n",
       "      <th>LandSlope</th>\n",
       "      <th>...</th>\n",
       "      <th>GarageCond</th>\n",
       "      <th>PavedDrive</th>\n",
       "      <th>WoodDeckSF</th>\n",
       "      <th>OpenPorchSF</th>\n",
       "      <th>PoolArea</th>\n",
       "      <th>MiscVal</th>\n",
       "      <th>MoSold</th>\n",
       "      <th>YrSold</th>\n",
       "      <th>SaleType</th>\n",
       "      <th>SaleCondition</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>20</td>\n",
       "      <td>2</td>\n",
       "      <td>80.0</td>\n",
       "      <td>11622</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>140</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>20</td>\n",
       "      <td>3</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14267</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>393</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>12500</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>74.0</td>\n",
       "      <td>13830</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>212</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>60</td>\n",
       "      <td>3</td>\n",
       "      <td>78.0</td>\n",
       "      <td>9978</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>360</td>\n",
       "      <td>36</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>120</td>\n",
       "      <td>3</td>\n",
       "      <td>43.0</td>\n",
       "      <td>5005</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>82</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 69 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   MSSubClass  MSZoning  LotFrontage  LotArea  Street  LotShape  LandContour  \\\n",
       "0          20         2         80.0    11622       1         3            3   \n",
       "1          20         3         81.0    14267       1         0            3   \n",
       "2          60         3         74.0    13830       1         0            3   \n",
       "3          60         3         78.0     9978       1         0            3   \n",
       "4         120         3         43.0     5005       1         0            1   \n",
       "\n",
       "   Utilities  LotConfig  LandSlope  ...  GarageCond  PavedDrive  WoodDeckSF  \\\n",
       "0          0          4          0  ...           4           2         140   \n",
       "1          0          0          0  ...           4           2         393   \n",
       "2          0          4          0  ...           4           2         212   \n",
       "3          0          4          0  ...           4           2         360   \n",
       "4          0          4          0  ...           4           2           0   \n",
       "\n",
       "   OpenPorchSF  PoolArea  MiscVal  MoSold  YrSold  SaleType  SaleCondition  \n",
       "0            0         0        0       6    2010         8              4  \n",
       "1           36         0    12500       6    2010         8              4  \n",
       "2           34         0        0       3    2010         8              4  \n",
       "3           36         0        0       6    2010         8              4  \n",
       "4           82         0        0       1    2010         8              4  \n",
       "\n",
       "[5 rows x 69 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "f9a77f57",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.272262Z",
     "iopub.status.busy": "2024-09-15T17:14:18.271738Z",
     "iopub.status.idle": "2024-09-15T17:14:18.277527Z",
     "shell.execute_reply": "2024-09-15T17:14:18.276667Z"
    },
    "papermill": {
     "duration": 0.037079,
     "end_time": "2024-09-15T17:14:18.279538",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.242459",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459, 69)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X2.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "9ff4d962",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.340325Z",
     "iopub.status.busy": "2024-09-15T17:14:18.339664Z",
     "iopub.status.idle": "2024-09-15T17:14:18.599864Z",
     "shell.execute_reply": "2024-09-15T17:14:18.599128Z"
    },
    "papermill": {
     "duration": 0.293653,
     "end_time": "2024-09-15T17:14:18.602031",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.308378",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/base.py:439: UserWarning: X does not have valid feature names, but SimpleImputer was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "# Import necessary libraries\n",
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.impute import SimpleImputer\n",
    "from sklearn.linear_model import LinearRegression, Lasso, Ridge\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from xgboost import XGBRegressor\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Define a preprocessor pipeline\n",
    "preprocessor = Pipeline([\n",
    "    ('imputer', SimpleImputer(strategy='median')),  # Handle missing values\n",
    "    ('scaler', StandardScaler())  # Standardize features\n",
    "])\n",
    "\n",
    "X2 = df2_cleaned.copy()\n",
    "\n",
    "\n",
    "# Define the best model pipeline\n",
    "best_model_pipeline = Pipeline([\n",
    "    ('preprocessor', preprocessor),\n",
    "    ('model', XGBRegressor(n_estimators=100, random_state=42))\n",
    "])\n",
    "\n",
    "# Refit the best model pipeline on the entire training dataset\n",
    "best_model_pipeline.fit(X_train, y_train)\n",
    "\n",
    "# Prepare test data for prediction\n",
    "X2 = df2_cleaned.copy()\n",
    "\n",
    "# Transform the test data using the fitted preprocessor\n",
    "X2_preprocessed = preprocessor.transform(X2)\n",
    "\n",
    "# Generate predictions using the best model\n",
    "y_pred = best_model_pipeline.predict(X2_preprocessed)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "7bf73169",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.662599Z",
     "iopub.status.busy": "2024-09-15T17:14:18.662294Z",
     "iopub.status.idle": "2024-09-15T17:14:18.668397Z",
     "shell.execute_reply": "2024-09-15T17:14:18.667537Z"
    },
    "papermill": {
     "duration": 0.037308,
     "end_time": "2024-09-15T17:14:18.670231",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.632923",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([80204.625, 78177.12 , 86164.54 , ..., 83976.46 , 80204.625,\n",
       "       83967.914], dtype=float32)"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a50004d6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.728111Z",
     "iopub.status.busy": "2024-09-15T17:14:18.727782Z",
     "iopub.status.idle": "2024-09-15T17:14:18.733166Z",
     "shell.execute_reply": "2024-09-15T17:14:18.732354Z"
    },
    "papermill": {
     "duration": 0.036299,
     "end_time": "2024-09-15T17:14:18.734980",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.698681",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1459,)"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "a352e6f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.793175Z",
     "iopub.status.busy": "2024-09-15T17:14:18.792876Z",
     "iopub.status.idle": "2024-09-15T17:14:18.801833Z",
     "shell.execute_reply": "2024-09-15T17:14:18.801168Z"
    },
    "papermill": {
     "duration": 0.040233,
     "end_time": "2024-09-15T17:14:18.803712",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.763479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "submission_df = pd.DataFrame({\n",
    "    'Id': test_df['Id'],  # Replace with the actual test IDs\n",
    "    'SalePrice': y_pred\n",
    "})\n",
    "\n",
    "# Save the DataFrame to a CSV file\n",
    "submission_file = '/kaggle/working/submission2.csv'\n",
    "submission_df.to_csv(submission_file, index=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "9940a8e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-09-15T17:14:18.862170Z",
     "iopub.status.busy": "2024-09-15T17:14:18.861873Z",
     "iopub.status.idle": "2024-09-15T17:14:18.872874Z",
     "shell.execute_reply": "2024-09-15T17:14:18.872048Z"
    },
    "papermill": {
     "duration": 0.042311,
     "end_time": "2024-09-15T17:14:18.874775",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.832464",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>SalePrice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1461</td>\n",
       "      <td>80204.625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1462</td>\n",
       "      <td>78177.120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1463</td>\n",
       "      <td>86164.540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1464</td>\n",
       "      <td>86164.540</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1465</td>\n",
       "      <td>85584.086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1466</td>\n",
       "      <td>83970.340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1467</td>\n",
       "      <td>83684.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1468</td>\n",
       "      <td>83970.340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1469</td>\n",
       "      <td>83684.100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1470</td>\n",
       "      <td>77724.190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Id  SalePrice\n",
       "0  1461  80204.625\n",
       "1  1462  78177.120\n",
       "2  1463  86164.540\n",
       "3  1464  86164.540\n",
       "4  1465  85584.086\n",
       "5  1466  83970.340\n",
       "6  1467  83684.100\n",
       "7  1468  83970.340\n",
       "8  1469  83684.100\n",
       "9  1470  77724.190"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission_2=pd.read_csv('/kaggle/working/submission2.csv')\n",
    "submission_2.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df170ea0",
   "metadata": {
    "papermill": {
     "duration": 0.028574,
     "end_time": "2024-09-15T17:14:18.932963",
     "exception": false,
     "start_time": "2024-09-15T17:14:18.904389",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 5660749,
     "sourceId": 9340753,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30762,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 15.195189,
   "end_time": "2024-09-15T17:14:19.480538",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-09-15T17:14:04.285349",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
